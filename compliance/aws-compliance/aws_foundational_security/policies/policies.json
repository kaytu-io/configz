[
  {
    "ID": "aws_foundational_security_s3_1",
    "Title": "1 S3 Block Public Access setting should be enabled",
    "Description": "This control checks whether the following Amazon S3 public access block settings are configured at the account level",
    "QueryID": "aws_s3_public_access_block_account",
    "DocumentURI": "policies/aws_foundational_security_s3_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "s3_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS Control would mean that your Amazon S3 public access block settings are not fully configured at the account level. The potential costs of this non-compliance could include:\n\n1. **Security Risks:** The most crucial cost is the potential breach of sensitive data. If the block public access settings are misconfigured or left unchecked, it can leave your S3 buckets vulnerable to unauthorized access or even data leaks.\n\n2. **Financial Costs:** In case of significant data breaches, organizations may face severe penalties and fines, especially if they are under jurisdictions or deals with certain industries (like health or financial sectors) that mandate strict data protection guidelines.\n\n3. **Reputational Damage:** A publicized data breach would cause harm to the organization's reputation, leading to customer distrust and potential loss of business.\n\n4. **Operational Disruption:** Unauthorized access could also lead to operational disruption. An outsider could alter, delete or even ransom your data leading to services disruptions which might bring additional recovery costs.\n\n5. **Legal \u0026 Compliance issues:** If the organization works with data that requires compliance with specific standards and regulations (GDPR, HIPAA), failure to properly secure data could result in non-compliance, leading to potential lawsuits and hefty fines.\n\nIn short, the cost of non-compliance with this AWS control isn't just monetary; it could also affect your business's operations and reputation. Thus, it's crucial to ensure the public access block settings are correctly configured at the account level for Amazon S3."
      ],
      "x-kaytu-usefulness-example": [
        "AWS Control can be incredibly useful in managing your S3 storage settings. For instance, it can help ensure secure and efficient functioning of your S3 resources.\n\n- AWS Control inspects and ensures that the public access is suitably blocked at the account level. This will not only improve your security measures but also minimize the risk of accidentally making a bucket public that should have been kept private due to confidential data.\n- It would be particularly useful in a scenario where your organization is dealing with sensitive data such as financial or personal information. By ensuring that the Amazon S3 public access block settings are appropriately configured at the account level, you are preventing unauthorized access or leakage of information. This can greatly save your organization from potential data breaches or violations of privacy laws.\n- Similarly, if your organization needs to adhere to strict compliance guidelines or standards, being able to validate that the S3 public access block is correctly set up at the account level is important. AWS control allows you to do this conveniently.\n- Additionally, using AWS control to monitor and manage the public-access block settings can also prove useful in industries where data confidentiality and security are of prime importance such as healthcare, banking, or government organizations. It allows these organizations to efficiently manage their data access while complying with international and regional data security standards. \n\nThe format of AWS Control to configure S3 public access block is:\n\n```\naws s3api put-public-access-block \\\n    --public-access-block-configuration \\\n    \"BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true\" \\\n    --account-id ACCOUNT-ID\n```\n\nBy inputting the above command, you are blocking new public ACLs (Access Control Lists) and bucket policies, and setting the account to ignore any existing public ACLs in its buckets. This tightens the security of your S3 resources, making them private and secure."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_s3_2",
    "Title": "2 S3 buckets should prohibit public read access",
    "Description": "This control checks whether your S3 buckets allow public read access. It evaluates the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).",
    "QueryID": "aws_s3_bucket_restrict_public_read_access",
    "DocumentURI": "policies/aws_foundational_security_s3_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "s3_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS Control can potentially lead to serious financial and reputational costs:\n\n1. **Loss of Data** - Allowing public read access to S3 buckets might result in unauthorized access to sensitive data, resulting in data loss.\n\n2. **Financial Loss** - Data breaches can lead to substantial financial loss. It's not just a matter of dealing with the issue at hand but also having to compensate potentially affected clients and customers.\n\n3. **Litigation Costs** - If sensitive customer data is exposed due to non-compliance, it may subject the company to legal action. Litigation and legal compliance costs can easily reach into the millions of dollars.\n\n4. **Reputational Damage** - One of the worst damages a business can suffer is to its reputation. Once client trust has been lost, it can be incredibly difficult to win back.\n\n5. **Regulatory Penalties** - If you are discovered to be non-compliant during an audit, you can face regulatory fines and penalties. This is particularly relevant for those organizations operating in heavily regulated industries like finance and healthcare.\n\n6. **Non-Compliant with Data Protection Laws** - In many jurisdictions, such as those subject to GDPR, public access to personal identifiable information (PII) can lead to heavy fines.\n\nGiven the potential costs, it's crucial to adhere to this AWS Control and mitigate the risk of providing public read access to S3 buckets."
      ],
      "x-kaytu-usefulness-example": [
        "```\nExample:\n\nCompany XYZ is a healthcare company that stores sensitive patient data on their AWS S3 buckets. It is crucial for them to ensure the confidentiality and security of this data as leakage could lead to severe financial and reputational harm due to potential violation of privacy laws like HIPPA.\n\nThey setup this AWS control to constantly check and evaluate the Block Public Access settings, bucket policy, and the bucket access control list (ACL). \n\nOne day, one of their new interns unknowingly configured a bucket to allow public read access. The AWS control quickly detected this and sent an alert to the system admins. They were able to immediately rectify the mistake before anyone could access the data publicly. \n\nHad the control not been in place, this could have led to a major data leak, potential lawsuits, and loss of goodwill for Company XYZ. Therefore, the control proved significantly useful in keeping their AWS S3 buckets secure and their health-data safe.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_s3_3",
    "Title": "3 S3 buckets should prohibit public write access",
    "Description": "This control checks whether your S3 buckets allow public write access. It evaluates the block public access settings, the bucket policy, and the bucket access control list (ACL).",
    "QueryID": "aws_s3_bucket_restrict_public_write_access",
    "DocumentURI": "policies/aws_foundational_security_s3_3.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "s3_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control could lead to several potential costs, both financial and non-financial.\n\n**1. Unauthorized Data Access:** The most direct risk is that malicious actors may use the public write access to modify, delete, or even increase the amount of data stored in the bucket, leading to both a potential loss of data and increased storage costs. This could also lead to theft of sensitive information, which may have significant financial repercussions if the data violation involves customer data or intellectual property.\n\n**2. Regulatory Fines:** Non-compliance could lead to hefty fines from regulatory bodies, especially for organizations dealing with sensitive data such as financial or health records that are required by laws and industry regulations like GDPR, PCI-DSS, HIPAA etc. to ensure data security and privacy. \n\n**3. Reduced Customer Trust:** If the data breach becomes public knowledge, it could significantly damage the reputation of the company, leading to loss of customer trust and potential business.\n\n**4. Security Incident Response Costs:** In case of a security breach, the organization would have to spend money on forensic investigations, launching a remediation plan, and potentially hiring external consultants or adding internal resources to deal with the incident. \n\n**5. Potential Legal Costs:** In cases of serious data violations, there could also be legal implications and associated costs including legal fees and potential litigation or settlement costs.\n\nHence, it is essential from a financial, operational, and reputational perspective for organizations to ensure that S3 buckets do not allow public write access, unless specifically required and adequately monitored."
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider an organization that collects highly sensitive customer data, such as personal identifiable information (PII) or financial information. To protect the data, it is stored on Amazon S3 into buckets. \n\nHowever, configuration errors may inadvertently allow public write access to these buckets. This would permit any user on the internet to potentially manipulate, corrupt or delete our sensitive data. \n\nTo counter this risk, we utilize this AWS Control to routinely examine the block public access settings, bucket policy, and the bucket ACL. \n\nIf this control finds that public write access is enabled for a bucket, it alerts our security team, enabling them to quickly mitigate the potential security breach by limiting public access, ensuring only authorized personnel have write capabilities. \n\nThis AWS Control is essential to maintain the integrity and confidentiality of our data, helping to uphold regulatory compliance and protect our company’s reputation."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_s3_4",
    "Title": "4 S3 buckets should have server-side encryption enabled",
    "Description": "This control checks that your S3 bucket either has Amazon S3 default encryption enabled or that the S3 bucket policy explicitly denies put-object requests without server-side encryption.",
    "QueryID": "aws_s3_bucket_default_encryption_enabled",
    "DocumentURI": "policies/aws_foundational_security_s3_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "s3_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the above-mentioned AWS control can be severe. The specifics would depend on the nature of data being stored and processed, but here are some general costs:\n\n1. **Security Risk:** One of the main costs is the potential for security breaches or data leaks. Without the default encryption or explicit denial of put-object requests without server-side encryption, sensitive data stored in the bucket could be more easily compromised.\n\n2. **Non-Compliance Penalties:** If your organization operates in a regulated industry or handles sensitive data (such as personally identifiable information (PII) or credit card data), not adhering to appropriate data security controls could lead to non-compliance with regulations such as GDPR or PCI-DSS. This could result in hefty fines.\n\n3. **Business Impact:** Beyond financial penalties, any data breach as a result of non-compliance could significantly damage your business's reputation and trust with clients, potentially leading to loss of customers and revenue.\n\n4. **Legal Consequences:** If any third-party or client data is compromised due to non-compliance, your organization could face lawsuits.\n\n5. **Remediation Costs:** If non-compliance is identified during audit, the cost of addressing it could include system downtime and operational disruption, along with the expenditure on resources to amend the issue and perhaps even hire external consultants or auditors.\n\nIn conclusion, it's essential to comply with the AWS control to mitigate potential security ramifications that could impose significant financial and reputational harm."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nCompany XYZ uses Amazon S3 bucket for storing their clients' sensitive data. Due to the nature of this data, it's critical that it is always stored securely using encryption. \n\nUsing this AWS Control, the company can ensure two layers of protection:\n\n- Firstly, the default encryption ensures that whatever data is stored in the S3 bucket, it is automatically encrypted by the AWS servers. This rules out human error if an employee forgets to encrypt something.\n\n- Secondly, the bucket policy explicitly denying any put-object requests without server-side encryption acts as another level of fail-safe. This ensures that even if somehow unencrypted data tries to be stored, the action is denied.\n\nIn this way, Company XYZ can increase their data security and protect their clients' sensitive information by applying this AWS Control."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_s3_5",
    "Title": "5 S3 buckets should require requests to use Secure Socket Layer",
    "Description": "This control checks whether S3 buckets have policies that require requests to use Secure Socket Layer (SSL). S3 buckets should have policies that require all requests (Action: S3:*)to only accept transmission of data over HTTPS in the S3 resource policy, indicated by the condition key aws:SecureTransport.",
    "QueryID": "aws_s3_bucket_enforces_ssl",
    "DocumentURI": "policies/aws_foundational_security_s3_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "s3_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control could be substantial depending on the value and sensitivity of the data stored in your S3 buckets. Here are some potential costs:\n\n1. **Security Risks**: Not enforcing SSL can leave your data vulnerable to interception, modification, or theft. This compromises the confidentiality and integrity of your data.\n\n2. **Regulatory Violations**: If you're storing sensitive or regulated data (like HIPAA, PCI-DSS, or GDPR), failing to comply with encryption requirements could lead to heavy fines and penalties.\n\n3. **Damage to Business Reputation**: If a data breach occurs due to non-compliance, it could damage your business reputation. This could lead to a loss of customers and future business.\n\n4. **Incidental Costs**: If a violation is discovered, you'll need to allocate resources to correct it and potentially conduct an audit to determine the extent of any damage. This could take significant time and effort. \n\n```\nCosts of Non-Compliance:\n\n1. **Security Risks**\nOpening your data to potential security breaches, compromising both confidentiality and integrity.\n\n2. **Regulatory Violations**\nIncurring heavy fines and penalties for not complying with mandatory industry regulations.\n\n3. **Reputation Damage**\nPotentially losing customer trust and damaging business reputation.\n\n4. **Incidental Costs**\nHaving to allocate resources to correct and audit the issue.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA popular streaming service, StreamFlix, stores and distributes its video content through Amazon S3. These massive video files contain proprietary content that they should only be accessed securely. Leakage of their content due to insecure data transmission paths could lead to massive losses for the company. \n\nTo enforce secure access to its content, StreamFlix uses this AWS control to verify that all their S3 buckets require the use of SSL for requests. It adds a policy that requires all actions to only accept transmission of data over HTTPS. \n\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"ForceHttps\",\n            \"Effect\": \"Deny\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:*\",\n            \"Resource\": \"arn:aws:s3:::streamflix-bucket/*\",\n            \"Condition\": {\n                \"Bool\": {\n                    \"aws:SecureTransport\": \"false\"\n                }\n            }\n        }\n    ]\n}\n```\n\nWith the policy that checks whether S3 buckets require SSL in place, they prevent unauthorized parties from intercepting sensitive data. StreamFlix thus guarantees the secure transmission of its video content across networks and upholds its brand reputation. It also reduces the risk of non-compliance with data protection regulations."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_s3_6",
    "Title": "6 Amazon S3 permissions granted to other AWS accounts in bucket policies should be restricted",
    "Description": "This control checks whether the S3 bucket policy prevents principals from other AWS accounts from performing denied actions on resources in the S3 bucket.",
    "QueryID": "aws_s3_bucket_policy_restricts_cross_account_permission_changes",
    "DocumentURI": "policies/aws_foundational_security_s3_6.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "sensitive_api_operations_actions_restricted"
      ],
      "foundational_security_item_id": [
        "s3_6"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control can potentially lead to several costs:\n\n1. **Security Risk:** If principals from other AWS accounts can perform denied actions, it can lead to unauthorized access to your data, potential data breaches, and compromises to the security and integrity of your stored data.\n\n2. **Financial Implications:** In case of a data breach, there may be significant financial implications. This can range from loss of customer confidence and potential business to regulatory fines and penalties.\n\n3. **Legal \u0026 Regulatory:** If you're handling sensitive customer data and it gets exposed due to lack of controls, you will face legal implications. Also, lack of compliance might fail you in audits which can lead to penalties and negative impact in certifications.\n\n4. **Reputation Damage:** A data breach or unauthorized data alteration can lead to serious damage to your business reputation.\n\n5. **Data Loss or Corruption:** Unauthorized access or modifications could lead to loss or corruption of important data. Restoring this data (if possible) can take a considerable amount of time and resources.\n\nSo, it's extremely important to ensure this control's compliance for securing your AWS S3 buckets, to keep your data safe and to avoid unwanted costs and implications. \n\nIn markup format:\n\n- **Security Risk** - Unauthorized access can compromise data security.\n- **Financial Implications** - Data breaches can lead to loss of business and regulatory fines.\n- **Legal \u0026 Regulatory Implications** - Non-compliance can lead to legal implications and failure in audits.\n- **Reputation Damage** - Data breaches can lead to serious damage to business reputation.\n- **Data Loss or Corruption** - Unauthorized modifications can lead to loss or corruption of vital data."
      ],
      "x-kaytu-usefulness-example": [
        "```\nSuppose your company has multiple AWS accounts to manage different business units. Each business unit has its own distinct responsibilities, and they might also have separate S3 storage buckets for data management. For example, your Finance department might have a bucket that contains sensitive financial data, while the HR department has another bucket that houses employee records.\n\nIn such a setup, you want to ensure that principals (users, applications, or services) from other AWS accounts can only access resources within their assigned S3 buckets. Hence, using the AWS control is very useful as it will check whether the S3 bucket policy is correctly denying principals from other AWS accounts from performing unauthorized actions or accessing sensitive resources in another S3 bucket.\n\n```XML\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"DenyOtherAWSAccountAccess\",\n      \"Effect\": \"Deny\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3:::finance-bucket/*\",\n        \"arn:aws:s3:::hr-bucket/*\"\n      ],\n      \"Condition\": {\n        \"StringNotEquals\": {\n          \"aws:userid\": [\"account-id-A\", \"account-id-B\"]\n        }\n      }\n    }\n  ]\n}\n```\nThis policy denies all in S3 (`s3:*`) on the `finance-bucket` and `hr-bucket` for all principals except those within \"account-id-A\" and \"account-id-B\". This way, you have ensured that unauthorized AWS accounts are restricted from accessing data they are not supposed to, improving your overall data access security.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_s3_8",
    "Title": "8 S3 Block Public Access setting should be enabled at the bucket level",
    "Description": "This control checks whether S3 buckets have bucket-level public access blocks applied.",
    "QueryID": "aws_s3_bucket_public_access_blocked",
    "DocumentURI": "policies/aws_foundational_security_s3_8.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "access_control"
      ],
      "foundational_security_item_id": [
        "s3_8"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can lead to several consequences:\n\n1. **Financial Loss**: \n   Unrestricted access to S3 data can result in unauthorized data exposure or breaches. If confidential information such as personal client information or premium content is leaked, it can lead to hefty regulatory fines, lawsuits, and other monetary losses. \n\n2. **Reputation Damage**:\n   A data breach can seriously harm a company's reputation. It can lead to loss of customer trust, decreased user base, and much lesser engagement, which ultimately translates into financial losses in the long term.\n\n3. **Operational Breakdown**:\n   Without necessary access restrictions, malicious users can alter or delete vital operational data. This can disrupt services and negatively impact business operations.\n\n4. **Regulatory Non-Compliance**:\n   Businesses operating in regulated industries (such as healthcare, finance) are required to comply with specific data protection regulations. Failure to do so can result in penalties, revoked licenses, or even business closure.\n\n5. **Data Theft and Tampering**:\n   If an S3 bucket does not have public access blocks applied, it becomes easy for unauthorized users to make changes, download data, or introduce malicious code into the system.\n\nTo avoid these potential implications, it is crucial to ensure that all S3 buckets have bucket-level public access blocks applied. This will ensure only authorized users can access or modify the data stored in the S3 buckets."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA company uses AWS S3 buckets to store sensitive data such as customer records and internal documents. To ensure the security of these data, they want to make sure each S3 bucket is not publicly accessible. AWS Control that checks whether S3 buckets have bucket-level public access blocks applied provides an essential tool for the company's security team to automate the process of checking these blocks. \n\nBy running this control on their AWS environment, the security team can quickly identify which S3 buckets are potentially exposed to the public, preventing unwanted data exposure or data breaches. They can swiftly apply necessary modifications to their bucket policies to restrict public access, enhancing the company's overall data security posture. \n\nIn the context of data regulatory standards such as GDPR and CCPA, this control can assist in maintaining compliance by ensuring that data is not inadvertently exposed to the public. This control becomes even more useful when dealing with large scale AWS environments, where managing and validating the security settings of each individual S3 bucket manually would be impractical. \n\n```\nReviewBucketPublicAccessSetting_Action:\n  Type: \"AWS::Config::ConfigRule\"\n  Properties:\n    ConfigRuleName: s3-bucket-public-read-prohibited\n    Description: Checks that your Amazon S3 buckets do not allow public read access.\n    Scope:\n      ComplianceResourceTypes:\n        - \"AWS::S3::Bucket\"\n    Source:\n      Owner: AWS\n      SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED\n```\nThis code snippet is an example of how this control could be implemented using AWS CloudFormation. It defines a Config rule that checks all S3 buckets in the environment for public read access. \n   \nThis example use case demonstrates the usefulness of this AWS Control in maintaining rigorous data security standards and regulatory compliance in a scalable and efficient way."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_s3_9",
    "Title": "9 S3 bucket server access logging should be enabled",
    "Description": "When logging is enabled, Amazon S3 delivers access logs for a source bucket to a chosen target bucket. The target bucket must be in the same AWS Region as the source bucket and must not have a default retention period configuration.",
    "QueryID": "aws_s3_bucket_logging_enabled",
    "DocumentURI": "policies/aws_foundational_security_s3_9.md",
    "ManualVerification": false,
    "Severity": "Low",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "s3_9"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "Low"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control indicates that all your Amazon S3 access logs are not being efficiently and accurately delivered to the required target bucket. This could have several implications:\n\n1. **Security Risk:** Not having logs in one place, as per AWS best practice, can lead to difficulties in monitoring and analyzing bucket activity. This could lead to delayed or missed detection of security threats or issues.\n\n2. **Operational Issues:** If logs are not correctly delivered to their target bucket, debugging and troubleshooting operational issues could become time-consuming and complex.\n\n3. **Compliance Risk:** If your organization needs to comply with specific regulatory requirements related to logging and monitoring, non-compliance with this control could lead to violations. This could result in reputational damage, financial penalties, or in extreme cases, losing the license to operate.\n\n4. **Additional Costs:** If the target bucket's retention period configuration is not set correctly, it could lead to incurring unexpected costs. If logs are stored for longer than required, it could result in extra storage costs. Alternatively, if logs are deleted too quickly, you may incur costs related to data loss or retrieval.\n\n5. **Data Management Issues:** Incorrect configuration can impact your data lifecycle management process. Your organization may fail to make timely decisions on data retention, archival, and deletion, which could lead to inefficient use of storage and cost overruns.\n\nTherefore, the cost of non-compliance to this AWS control is not only financial but could also impact operational efficiency, security, and regulatory standing of your organization. It's important to adhere to the recommended controls to ensure a secure and optimal use of Amazon S3."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, a company S-tech Solutions uses AWS S3 for its cloud data storage needs. They have multiple buckets for different areas such as Application data, User data, Log files etc. They recently enabled logging for a source bucket 'App-data' to keep track of all access points and activities.\n\nThey chose another existing bucket 'Log-files' to store these access logs. This was beneficial to them as it allowed them to effectively monitor and check for any unauthorized access or suspicious activities. It also helped them analyze data usage patterns over time and optimize costs.\n\nIn addition, the fact that the target bucket 'Log-files' was kept in the same region as the source bucket 'App-data' ensured that there was lower latency and faster accessibility of the log data.\n\nMoreover, by not having a default retention period configuration for the target bucket, they could store the logs indefinitely and review them whenever required, providing a thorough audit trail. \n\nEnabling this control was quite useful for S-tech Solutions for reasons of security, data management and cost optimization.\n\n```\nExample:\n\nBucket Name: App-data (Source Bucket)\nRegion: us-west-2\nLogging: Enabled\n\nBucket Name: Log-files (Target Bucket)\nRegion: us-west-2\nRetention period: Not Configured\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_s3_10",
    "Title": "10 S3 buckets with versioning enabled should have lifecycle policies configured",
    "Description": "This control checks if Amazon Simple Storage Service (Amazon S3) version enabled buckets have lifecycle policy configured. This rule fails if Amazon S3 lifecycle policy is not enabled.",
    "QueryID": "aws_s3_bucket_versioning_and_lifecycle_policy_enabled",
    "DocumentURI": "policies/aws_foundational_security_s3_10.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "s3_10"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can lead to several potential costs and issues:\n\n1. **Increased Operational Costs**: Without a lifecycle policy in place, data that are no longer needed may continue to remain stored in S3, thus resulting in unnecessary storage costs.\n\n2. **Data Retention Violations**: Many regions have regulations and controls on how long various types of data must be maintained. Without lifecycle rules in place, it might be difficult to automatically maintain data retention standards, potentially leading to regulatory fines and/or legal ramifications.\n \n3. **Limited Storage Optimization**: Bucket lifecycle policies can transition objects between storage classes or determine when objects are expired and can be permanently deleted. Without the lifecycle policy in place, this process would not be automated which can make the management of storage space less efficient requiring manual intervention.\n\n4. **Security Risks**: Lifecycle policies are sometimes used to automatically transition older data to more secure storage classes. Without these, critical data might be left at risk.\n\n5. **Audit Failures**: Lastly, lifecycle policies on S3 buckets are often a requirement of several compliance regimes. If these controls are not enabled, an organization may fail an audit, which can result in reputational risk, loss of customer trust or even business.\n\nTherefore, it is beneficial for businesses to ensure compliance with this AWS control, in order to mitigate these potential costs and issues."
      ],
      "x-kaytu-usefulness-example": [
        "For example, an IT company uses AWS to store their backup data on Amazon S3. They don't want to keep every version of the backup as some data is just redundant, and storing all versions indefinitely can lead to unnecessary costs. By using this AWS control, they enable a lifecycle policy on their Amazon S3 bucket, which automates moving their older object versions to less expensive storage or even delete them. \n\nThus, it will be like this in the markup format:\n\n```\n{\n  \"Id\": \"LifecyclePolicy\",\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"Stmt1631234567890\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::Account-ID:user/UserName\"\n      },\n      \"Action\": \"s3:PutLifecycleConfiguration\",\n      \"Resource\": \"arn:aws:s3:::bucket-name\",\n      \"Condition\": {\n        \"Bool\": {\n          \"aws:SecureTransport\": \"true\"\n        }\n      }\n    }\n  ]\n}\n```\n\nIf the lifecycle policy was not enabled, the IT company would risk unnecessarily high costs for storage and potential disarray in their data from not having a proper data version management strategy. The AWS control that checks for lifecycle policy in S3 helps to avoid these issues."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_s3_11",
    "Title": "11 S3 buckets should have event notifications enabled",
    "Description": "This control checks whether S3 Event Notifications are enabled on an Amazon S3 bucket. This control fails if S3 Event Notifications are not enabled on a bucket.",
    "QueryID": "aws_s3_bucket_event_notifications_enabled",
    "DocumentURI": "policies/aws_foundational_security_s3_11.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "s3_11"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance with this AWS control can be significant, and it's generally divided into two main categories: financial costs and operational costs.\n\n1. Financial Costs:\n\nIf S3 Event Notifications are not enabled, you may lose the opportunity to automatically respond to changes in your S3 buckets. This means you might end up paying extra for manual monitoring and intervention to check and respond to any alterations. Tasks like data loss prevention, backups, updates, and maintenance might require additional resources, driving up costs.\n\n2. Operational Costs:\n\na. **Missed Opportunities for Automation**: Without event notifications, you miss the opportunity to automate processes such as data replication, triggering AWS Lambda functions or triggering workflows in response to changes in the S3 bucket. \n\nb. **Increased Risk of Data Breaches**: Event notifications can alert you to unusual or suspicious activity, such as multiple download attempts, changes to access control lists (ACLs), or other potential indicators of a security breach. Not enabling these notifications increases the risk of data breaches going undetected.\n\nc. **Delayed Response to Changes or Incidents**: Event notifications can trigger immediate responses to events. Without them, there may be significant delays in identifying and responding to changes or incidents, which could lead to prolonged system downtime or loss of data.\n\nd. **Operational Inefficiency**: Manual monitoring and response are generally less efficient than automated responses. The time and effort spent manually checking and managing the S3 bucket could be better spent on other tasks.\n\nOverall, non-compliance with this AWS control can lead to increased costs, reduced efficiency, and a higher risk of critical incidents such as data breaches or loss. Therefore, it's critical to ensure S3 Event Notifications are enabled on all relevant Amazon S3 buckets."
      ],
      "x-kaytu-usefulness-example": [
        "```\nExample:\n\nImagine you are responsible for managing a website that pulls content from an Amazon S3 bucket. Each time new content is uploaded to the bucket, you want your website to automatically reflect that new content. \n\nManually checking the S3 bucket for new content can be time consuming and inefficient. This is where S3 Event Notifications can be especially useful.\n\nUsing AWS Control to ensure S3 Event Notifications are enabled, you can automate your workflow. Once S3 Event Notifications are enabled, your custom applications, SNS topic, or AWS Lambda function would receive a notification once a new object is uploaded to the bucket.\n\nThis means the data on your website can be automatically updated upon new content being added to the S3 bucket. This not only helps maintain the website's freshness but also allows more time for you to focus on other aspects of your work.\n\nIn this instance, the AWS Control check failing would be indicative of S3 Event Notifications not being enabled. Thus leading to manual checks for content updates, which takes away valuable time.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_s3_12",
    "Title": "12 S3 access control lists (ACLs) should not be used to manage user access to buckets",
    "Description": "This control checks whether Amazon S3 buckets provide user permissions via ACLs. The control fails if ACLs are configured for managing user access on S3 buckets.",
    "QueryID": "aws_s3_bucket_acls_should_prohibit_user_access",
    "DocumentURI": "policies/aws_foundational_security_s3_12.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "access_control"
      ],
      "foundational_security_item_id": [
        "s3_12"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Failing to comply with this AWS control can have major financial and reputational costs. Here's a breakdown of the costs:\n\n1. **Financial Costs**\n\n   Non-compliance to this control can lead to unauthorized access to your S3 buckets which could result in data breaches. Such breaches can result in hefty fines from regulatory bodies, especially if personal or sensitive information is leaked. Also, it could cause financial loss due to the theft of intellectual property or trade secrets. \n\n2. **Reputational Costs**\n\n   If a data breach occurs and becomes public, the reputation of your organization can be significantly damaged. The loss of trust from customers and clients can lead to loss of business which indirectly leads to financial cost. Rebuilding a company's reputation can take years and the cost is hard to quantify.\n\n3. **Operational Costs**\n\n   In the event of a data breach due to non-compliance, there may be additional costs associated with identifying and fixing the breach, as well as potential downtime or disruption to regular business activities.\n\nOverall, non-compliance to this control can expose the business to financial, reputational, and operational risks. It's crucial to use managed policies for managing user access on S3 buckets as ACLs are harder to manage and tend to lead to misconfigurations. Thus, organizations should ensure this control is implemented effectively to mitigate these potential costs."
      ],
      "x-kaytu-usefulness-example": [
        "In a scenario where a company or organization is using Amazon S3 to store data, ensuring that this data is secure from unauthorized access is paramount. Here is an example where the AWS Control can be useful:\n\n## Example\n\nThe XYZ corporation hosts a web application and stores all user data including personal information and transaction details on Amazon S3 buckets. Due to regulatory compliance and data privacy laws, it is crucial that these data can only be accessed by authorized personnel.\n\nThe company uses this AWS Control to routinely check the access configurations on their Amazon S3 buckets. Each S3 bucket should be utilizing IAM roles and policies for managing user access instead of ACLs. The control ensures that there are no loopholes or chances of unauthorized access to this data, by flagging if ACLs are being used, so the corporation's security team can take appropriate measures.\n\nIf these checks were not performed routinely and if any of their AWS S3 bucket uses ACLs for user access control, the company might be exposed to potential infiltration and data theft. Therefore, the AWS Control serves as an important tool for maintaining their security infrastructure and meeting their regulatory compliance."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_es_1",
    "Title": "1 Elasticsearch domains should have encryption at-rest enabled",
    "Description": "This control checks whether Amazon Elasticsearch Service (Amazon ES) domains have encryption at rest configuration enabled. The check fails if encryption at rest is not enabled.",
    "QueryID": "aws_es_domain_encryption_at_rest_enabled",
    "DocumentURI": "policies/aws_foundational_security_es_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "es_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ES"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "- **Data Breaches**: If data isn't encrypted at rest, it's more vulnerable to being accessed by unauthorized entities, resulting in potential data breaches. This could have huge financial implications, from direct loss of income, fines (for e.g. under GDPR), and lawsuits to indirect loss through damage to the company's reputation and customer trust.\n\n- **Non-compliance fines**: Certain industries like healthcare, finance, or state services require strict compliance with specific standards (like HIPAA or PCI DSS), which may require data to be encrypted at rest. Non-compliance with these standards could result in hefty fines, auditors' sanctions, or even loss of license to operate.\n\n- **Loss of Customer Trust**: If a data breach occurs due to non-compliance, it can significantly impact a company's reputation. Customers may lose trust in the company's ability to safeguard their data, leading to loss of business.\n\n- **Legal Risks**: In many jurisdictions, companies are legally obligated to protect the sensitive data of their customers. Non-compliance with encryption at rest could lead to legal repercussions, both civil and criminal.\n\n- **Intellectual Property**: Unencrypted data is vulnerable to theft. Proprietary information and intellectual property can be stolen and misused, compromising a company's competitive edge.\n\n- **Increased Attack Vector**: Non-encrypted data increases the surface for potential attacks, making the system inherently less secure and more prone to various forms of cyber attacks.\n\nThus, non-compliance with this AWS control might lead to significant financial, operational, and reputational costs."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA financial firm is using Amazon Elasticsearch Service (Amazon ES) domains extensively to manage their financial data analysis. Since these data contain sensitive customer information, data security is the firm's utmost priority. Using this AWS Control, they are able to enable encryption at rest configuration for all Elasticsearch service domains. This helps the firm prevent unauthorized access to the data stored within the service, achieving a higher level of data protection and conforming to best practices in cloud security. The control is handy to regularly ensure that no Elasticsearch domains are left unencrypted unintentionally, therefore greatly reducing the potential risk of data breaches."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_es_2",
    "Title": "2 Amazon Elasticsearch Service domains should be in a VPC",
    "Description": "This control checks whether Amazon Elasticsearch Service domains are in a VPC. It does not evaluate the VPC subnet routing configuration to determine public access. You should ensure that Amazon ES domains are not attached to public subnets.",
    "QueryID": "aws_es_domain_in_vpc",
    "DocumentURI": "policies/aws_foundational_security_es_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resources_within_vpc"
      ],
      "foundational_security_item_id": [
        "es_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ES"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can have severe consequences and can potentially result in substantial costs for a business. These costs can be broadly categorized into financial, operational, and reputational costs.\n\n1. **Financial Costs:**\n    - If AWS Elasticsearch service domains are not in a VPC, they might be prone to security threats and data breaches. Corrective actions for such breaches can incur substantial financial penalties.\n    - Data loss due to any potential breaches could result in fines particularly if the data involves personally identifiable information (PII), protected health information (PHI), or sensitive customer information. These costs could be direct (imposed by regulatory bodies) or indirect (costs related to notification and response).\n    \n2. **Operational Costs:**\n    - Non-compliance may lead to system downtime or disruption of operations which might increase operational costs.\n    - The technical staff will need to spend time and resources to fix the issue which will divert resources from other productive activities.\n    \n3. **Reputational Costs:**\n    - In the event of a security breach, the business can suffer long-term reputational damage which may erode customer trust and lead to potential loss of business.\n    - If found non-compliant, it could also potentially hurt a business’s standing with partners, vendors, and regulators, affecting future opportunities.\n\nTo prevent these costly problems, it is best to comply with this control and ensure that Amazon ES domains are in a VPC and not attached to public subnets. It might even lead to a savings by reducing the risk of potential security breaches and resulting financial, operational, and reputational damages."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA software company deploys a series of Elasticsearch Service domains for managing and analyzing their application and system log files. They store sensitive business and customer data in these domains, ensuring they are both secure and performant. However, managing security for all domains can be difficult and time-consuming. \n\nBy implementing the AWS Control to check whether the Elasticsearch Service domains are in a Virtual Private Cloud (VPC), the company can quickly identify potential vulnerabilities. If a domain is not within a VPC, it could be exposed to potential security risks, as it is accessible over the internet. \n\nWith this control, the company can ensure all domains are secured within a VPC, without manually checking each one. However, it needs to be noted that it does not evaluate the VPC subnet routing configuration for public access, so the company should ensure that ES domains are not attached to public subnets for additional protection.\n\nThis way, the company can effectively protect its sensitive data and maintain robust security practices, while leveraging the powerful logging and analysis capabilities of Amazon Elasticsearch Service."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_s3_13",
    "Title": "13 S3 buckets should have lifecycle policies configured",
    "Description": "This control checks if a lifecycle policy is configured for an Amazon S3 bucket. This control fails if a lifecycle policy is not configured for an S3 bucket.",
    "QueryID": "aws_s3_bucket_lifecycle_policy_enabled",
    "DocumentURI": "policies/aws_foundational_security_s3_13.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "data_protection"
      ],
      "foundational_security_item_id": [
        "s3_13"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Not having a lifecycle policy on an Amazon S3 bucket can result in multiple potential costs:\n\n1. **Data Storage Costs:** Without a lifecycle policy, data could be stored in an S3 bucket indefinitely, which could lead to increased storage costs over time. AWS charges you for storing objects in your S3 buckets. Therefore, if you're storing large amounts of data that is not frequently accessed, it might be wise to utilize a lifecycle policy to move older objects to cheaper storage classes (like S3 Infrequent Access or Glacier) or delete them entirely.\n\n2. **Data Management Costs:** Without a lifecycle policy, managing data could become complex and time-consuming. Lifecycle policies automate the process of migrating data to different storage tiers or deleting it, based on defined rules related to aspects like the age of data. Without this automation, these processes would have to be carried out manually, leading to increased effort and operational costs.\n\n3. **Compliance Costs:** In certain industries, regulatory bodies require that data be preserved for a set amount of time and then disposed. Without a lifecycle policy, it’s possible that an organization could either delete necessary data prematurely or fail to delete data when required, both of which could result in hefty compliance fines.\n\n4. **Risk of Data Breach:** Storing data that is no longer needed increases the risk of it being accessed in the event of a data breach. In the case of sensitive or personal data, this could lead to potential legal costs and reputational damage.\n\nIn conclusion, non-compliance to this AWS Control of not configuring a lifecycle policy for an S3 bucket, could potentially lead to increased financial, operational and legal costs, and risks."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, a company is using AWS S3 bucket to store a vast amount of data logs generated by its website on a daily basis. Over time, the data storage costs begin to escalate due to the sheer volume of log data. To manage this, the company decides to implement a lifecycle policy for its S3 bucket.\n\nWith the policy, the company can automate moving the older logs to a cheaper storage class after a set period of time (like 30 days). For older logs that may not be needed any longer (such as logs older than a year), they can also set rules for automatic deletion. \n\nHere, using the control to check if a lifecycle policy is configured for an Amazon S3 bucket is crucial. If this control fails, it means that the company's lifecycle policy may not be working as expected, which may lead to continued high storage costs and inefficient data management. Thus, the control is useful for enforcing best practices, reducing storage costs and mitigating risk for data loss."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_es_3",
    "Title": "3 Amazon Elasticsearch Service domains should encrypt data sent between nodes",
    "Description": "This control checks whether Amazon ES domains have node-to-node encryption enabled.",
    "QueryID": "aws_es_domain_node_to_node_encryption_enabled",
    "DocumentURI": "policies/aws_foundational_security_es_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transit"
      ],
      "foundational_security_item_id": [
        "es_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ES"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS Control of enabling node-to-node encryption for Amazon ES domains can lead to several detrimental costs such as:\n\n1. **Data Breach**: Without node-to-node encryption, data transmitted between Elasticsearch nodes can be vulnerable to unauthorized access, tampering, or eavesdropping. This can lead to potential data breaches, leading to financial costs associated with recovery and legal liabilities.\n\n2. **Non-compliance Penalties**: Organizations in regulated industries may face penalties or fines from regulatory bodies due to non-compliance with data protection and privacy laws, such as GDPR or HIPAA. \n\n3. **Loss of Trust**: If customer data is compromised due to lack of encryption, this can significantly harm the organization's reputation and result in loss of customers. \n\n4. **Recovery Costs**: In the event of a security incident, recovery processes can be time-consuming and expensive, especially if the data was altered or deleted.\n\n5. **Legal Costs**: If a data breach leads to sensitive or personal information being compromised, organizations could face legal action from affected parties.\n\nTo ensure that you avoid these potential costs, it's crucial to comply with the AWS control and enable node-to-node encryption for your Amazon ES domains. The cost of enabling this security feature is much less compared to the potential costs of non-compliance."
      ],
      "x-kaytu-usefulness-example": [
        "Instance of Usefulness:\n\nConsider a situation where a company uses Amazon Elasticsearch Service (ES) to search, analyze, and visualize large amounts of data in real-time. This data might include sensitive information, such as customer records or financial transactions. \n\nIf node-to-node encryption is not enabled for Amazon ES domains, the data exchanged between these nodes can be intercepted, manipulated, or stolen during transmission. This could lead to security breaches, loss of data integrity, and non-compliance with data protection regulations. \n\nTherefore, by leveraging the AWS Control to ensure node-to-node encryption is enabled, the company can significantly enhance the security of their data during transmission between ES nodes. This not only helps to better protect sensitive information but also helps to meet regulatory and compliance requirements. \n\nHere's a markup usage example for this AWS Control:\n\n```json\n{\n  \"Controls\": [\n    {\n      \"Id\": \"ES-EncryptionCheck\",\n      \"Name\": \"Check Node-to-Node Encryption for Amazon ES Domains\",\n      \"AWSResourceType\": \"AWS::Elasticsearch::Domain\",\n      \"ControlScope\": {\n        \"ComplianceResourceTypes\": [\"AWS::Elasticsearch::Domain\"],\n        \"AWS:ResourceSelectors\": [\"AWS::Account\"]\n      },\n      \"Description\": \"Checks whether Amazon ES domains have node-to-node encryption enabled to enhance data security.\",\n      \"ControlSources\": [\"AWS::Config\"],\n      \"SourceIdentifier\": \"ES_ENCRYPTION_CHECK\",\n      \"InputParameters\": {\n        \"CheckEncryption\": {\n          \"ParameterValue\": \"True\",\n          \"ParameterType\": \"String\"\n        }\n      }\n    }\n  ]\n}\n```\n\nIn this instance, the AWS Control 'ES-EncryptionCheck' would ensure every Elasticsearch domain within the account has enabled node-to-node encryption. If any ES domain is found to lack this encryption setting, an alert is triggered for remedial action."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_es_4",
    "Title": "4 Elasticsearch domain error logging to CloudWatch Logs should be enabled",
    "Description": "This control checks whether Elasticsearch domains are configured to send error logs to CloudWatch Logs.",
    "QueryID": "aws_es_domain_error_logging_enabled",
    "DocumentURI": "policies/aws_foundational_security_es_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "es_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ES"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control could lead to several potential costs, including:\n\n1. **Operational Costs**: Without logging errors to CloudWatch Logs, it would be harder for your operational team to diagnose and fix issues in Elasticsearch domains. This could lead to longer downtime and increased operational expenses for problem-solving efforts.\n\n2. **Security Costs**: If Elasticsearch domains are not configured to send error logs to CloudWatch Logs, it means your organization is lacking important audit trails that are necessary when it comes to security incident investigation and response. This could lead to inefficient handling of security issues and could increase the potential for data breaches.\n\n3. **Non-compliance Costs**: Depending on the industry and region, your organization could face significant fines or legal action for failing to meet compliance standards related to logging and auditing. For example, certain privacy and data protection regulations require thorough logging of all system activity, and not doing so could lead to penalties.\n\n4. **Reputation Costs**: Not logging errors properly could lead to larger, more noticeable system issues or security breaches. These incidents could damage a company’s reputation, leading to a loss of customers and potential revenue.\n\n5. **Debugging and System Analysis Costs**: Without having error logs available in CloudWatch Logs, teams lose a critical visibility into their systems' behavior. When performance issues or system errors occur, engineers might need to spend more time and resources in order to identify the root causes.\n\nBy ensuring Elasticsearch domains are configured to send error logs to CloudWatch Logs, you mitigate these risks and enable more effective, efficient, and secure system management."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nSuppose you have an organization that handles massive amounts of data being processed using Elasticsearch domains. While managing such vast amounts of data, it's inevitable you will run into errors that need identifying and processing. Manually going through these errors in such large volumes would be time-consuming and unfeasible.\n\nThis is where this AWS control comes in handy. By configuring your Elasticsearch domains to send error logs to CloudWatch Logs, you can automatically monitor these logs in near real-time. You can track the error rate, review detailed log data, and even set alarms for specific error events. \n\nHere's a simple instance in markup format:\n\n```yaml\nAWSTemplateFormatVersion: '2010-09-09'\nResources:\n  MyDomain:\n    Type: 'AWS::Elasticsearch::Domain'\n    Properties:\n      DomainName: my-domain\n      ElasticsearchVersion: 6.3\n      ElasticsearchClusterConfig: \n        InstanceCount: '1'\n        InstanceType: t2.small.elasticsearch\n        ZoneAwarenessEnabled: 'False'\n      LogPublishingOptions: \n        ES_APPLICATION_LOGS: \n          CloudWatchLogsLogGroupArn: 'arn:aws:logs:us-west-2:123456789012:log-group:my-log-group: log-stream: my-log-stream'\n          Enabled: 'True'\n```\n\nIn the above CloudFormation template, an Elasticsearch domain is being configured with CloudWatch logs. `LogPublishingOptions` enables error logs being sent to a specified log group in CloudWatch Logs. This helps the organization to keep track of any error logs conveniently, thereby enhancing the debugging efficiency."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_es_5",
    "Title": "5 Elasticsearch domains should have audit logging enabled",
    "Description": "This control checks whether Elasticsearch domains have audit logging enabled. This control fails if an Elasticsearch domain does not have audit logging enabled.",
    "QueryID": "aws_es_domain_audit_logging_enabled",
    "DocumentURI": "policies/aws_foundational_security_es_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "es_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ES"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can come with several costs:\n\n**1. Data Breaches:**\nWithout audit logging, it is more challenging to track who has accessed your data. Non-compliance opens the door to potential data breaches, without providing a clear trail of where the breach originated. The cost of data breaches can be severe, including financial penalties, loss of customer trust, and potential legal action.\n\n**2. Non-Compliance Penalties:**\nDepending on the regulatory environment that your company operates within, non-compliance itself could lead to financial penalties. Laws like GDPR, HIPAA, or SOX require certain standards of data access and integrity. Lack of proper audit logging can lead to violations.\n\n**3. Operational Inefficiency:**\nAudit logs are a critical part of understanding how your Elasticsearch domains are used. Without them, debugging problems becomes much more complex and time-consuming, and inefficiency can lead to increased operational costs.\n\n**4. Loss of Visibility:**\nWhen audit logging is not enabled, organizations lose visibility into who's doing what in their Elasticsearch domains. This can potentially open the door to malicious activity or misuse of resources, leading to eventual financial loss.\n\n**5. Legal Risks:**\nIn case of any legal dispute, audit logs serve as a crucial piece of evidence. Lack of them can put the organization in a vulnerable position, making it difficult to defend its stand. Legal issues can also lead to financial loss and damage to reputation.\n\nIn summary, non-compliance to this AWS control can lead to substantial financial and operational costs, reduced visibility, and escalated legal risks. Thus, it's imperative to have audit logging enabled for Elasticsearch domains."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, an organization might be using AWS Elasticsearch domains for managing, monitoring, and scaling their log data. In this scenario, enabling audit logging becomes crucial as it helps the organization to track any changes made within the Elasticsearch domain and identify the source of any suspicious activities or potential security breaches. \n\nFor example:\n\n```\n1. Detecting Anomalies: If an unexpected or unknown user starts making changes to the Elasticsearch domain, the audit logs will record the activity, helping the organization to quickly identify and respond to this potentially dangerous behavior.\n\n2. Accountability: If multiple users or admins have access to the Elasticsearch domain, audit logs can act as a record of who did what at what time, thereby helping to maintain individual accountability within the organization.\n\n3. Complying with Regulations: Some organizations, especially those in sectors like healthcare and finance, are required by laws and regulations to maintain detailed logs of all activities, including the changes in their Elasticsearch domains. In these cases, enabling audit logging on these domains helps the organization to meet their legal obligations.\n\n4. Troubleshooting issues: Audit logs can prove invaluable during troubleshooting, offering insights on what changed, when it changed, and possibly why it changed.\n\n```\nSo, to enforce security guidelines and ensure that all Elasticsearch domains have audit logging enabled, this control should be in place. If a domain doesn't have audit logging enabled, it will fail this control and can be immediately identified and rectified."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_es_6",
    "Title": "6 Elasticsearch domains should have at least three data nodes",
    "Description": "This control checks whether Elasticsearch domains are configured with at least three data nodes and zoneAwarenessEnabled is true.",
    "QueryID": "aws_es_domain_data_nodes_min_3",
    "DocumentURI": "policies/aws_foundational_security_es_6.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "es_6"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ES"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control could result in the following consequences:\n\n1. **Data Loss:** ElasticSearch Domains configured with less than three data nodes increases the risk of data loss. If one node fails and you only have two nodes, the whole operation might be disrupted, and some data might not be replicated in time before the disruption occurred.\n\n2. **Redundancy and High Availability Issues:**  ElasticSearch balances its data across all available zones. Having Zoneawareness enabled ensures that an adequate replica of the data is available in each zone to prevent data loss and minimize the impact of node or Zone failure. A minimum of two or three availability zones is advised to guarantee high availability. Misconfiguration of these settings can lead to situations where an entire application goes down if one zone fails or is temporarily disconnected.\n\n3. **Performance Degradation:** If there aren't enough data nodes to distribute load evenly, workloads might experience performance degradation in the form of increased latency or reduced throughput.\n\n4. **Increased Potential for Downtime:** Data nodes contain the data in your cluster and respond to data related CRUD (Create, Read, Update, and Delete) operations. If zone-awareness is not enabled and you have fewer than three data nodes, a single failure can cause significant downtime, especially if recovery of node state takes a while.\n\n5. **Cost Implications:** Unplanned service interruptions and downtime could affect the business and result in potential financial losses due to increased remediation cost, possible violation of service level agreements (SLAs), and damage to customer relationships.\n\n6. **Regulatory and Compliance Violations:** If the data stored in Elasticsearch domain is subjected to various regulatory standards, non-compliance with high availability best practices may result in violations and might have legal and financial implications. These implications might include auditors fines and penalties.\n\nIn summary, non-compliance to this AWS Control could potentially result in performance issues, data loss, increased downtime, and even regulatory violations, all of which could have serious financial repercussions for a business."
      ],
      "x-kaytu-usefulness-example": [
        "AWS Elasticsearch is a popular tool for search and analytics in real-time applications. Correct configuration is necessary for ensuring data reliability and application performance. The specific control that checks if Elasticsearch domains are set up with a minimum of three data nodes and `zoneAwarenessEnabled` set to true is very important in various scenarios:\n\n- For instance, a user is running a large e-commerce website where millions of products are listed. Customers are continuously searching for products they need, and analytics data is being continuously generated from these searches. Having at least three data nodes ensures that if one node fails, the other two can keep the system running without disruption. Additionally, having `zoneAwarenessEnabled` true makes sure the data nodes are located in different availability zones, adding another layer of failure protection. This control can help to maintain the reliability of the application and prevent data loss.\n  \n```markdown\nExample:\n\n- Application: Large e-commerce website\n- Use: Enhancing data reliability and application performance\n- AWS Control: Checks if Elasticsearch domains have at least three data nodes and if `zoneAwarenessEnabled` is true\n- Benefit: If one data node fails, the system continues running without disruption. Distributing data nodes across different availability zones adds another layer of failure protection, helping to maintain reliability and prevent data loss.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_es_7",
    "Title": "7 Elasticsearch domains should be configured with at least three dedicated master nodes",
    "Description": "This control checks whether Elasticsearch domains are configured with at least three dedicated master nodes. This control fails if the domain does not use dedicated master nodes. This control passes if Elasticsearch domains have five dedicated master nodes. However, using more than three master nodes might be unnecessary to mitigate the availability risk, and will result in additional cost.",
    "QueryID": "aws_es_domain_dedicated_master_nodes_min_3",
    "DocumentURI": "policies/aws_foundational_security_es_7.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "es_7"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ES"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the given AWS control can lead to various kinds of costs and impacts such as:\n\n1. **Reliability**: Not having at least three dedicated master nodes for Elasticsearch domains can risk the reliability and high availability of your systems. It can lead to session losses if a master node fails, disrupting service availability which could potentially cause loss of business and harm your reputation.\n\n2. **Data Loss**: Single master node failures can result in data loss. Dedicated master nodes enhance the cluster health by preventing data loss from index corruption, hardware failure, or other unforeseen issues. Hence, non-compliance could lead to the cost associated with data recovery or permanently lost data.\n\n3. **Performance**: Without dedicated master nodes, the load will be shared by data nodes which could impact overall system performance. This can result in slower system responses and degrade the user experience.\n\n4. **Financial Impact**: Although using more than three master nodes may lead to extra costs, the cost of non-compliance can be much greater. System downtime, data recovery, and damage to reputation could have significant financial impacts. Balancing the system's reliability and cost-effectiveness becomes critical.\n\n5. **Violation of Compliance Standards**: If your organization is subjected to certain industry standards or regulations, non-compliance to this control could result in violation fines and penalties.\n\nSo, while the initial setup of at least three dedicated master nodes might seem like an upfront cost, in the long run, it offers reliability, performance, and durability benefits that outweigh these costs. It is true that using more than three master nodes might be unnecessary and add additional cost, but this needs to be weighed against the availability needs of your Elasticsearch domains."
      ],
      "x-kaytu-usefulness-example": [
        "As an example, let's consider a large corporation who records and analyzes a huge amount of data daily from various sources all around the globe to make critical business decisions. This corporation uses AWS Elasticsearch domains to manage, search, and analyze the collected data.\n\nHowever, with only a single master node, the company could risk severe downtime and loss of data if that node fails. Further, critical business operations dependent on data analysis could be disrupted.\n\nWith the aid of the AWS control that checks for at least three dedicated master nodes, the company can ensure data resiliency and high availability. Three master nodes provide a failover mechanism - if one node fails, the remaining nodes can still ensure the continuity of operations. This helps the corporation to prevent potential data loss, minimize the risk of interruption to data analysis and consequently maintain the business operations.\n\nWhile the AWS control would pass if there are five dedicated master nodes, the corporation could be incurring unnecessary costs without a significant increase in reliability or performance. This aspect helps the corporation balance the tradeoff between cost and system availability. \n\nThis AWS control, therefore, is highly useful to ensure data resilience, system reliability, and cost-effectiveness in running Elasticsearch domains for large-scale data management and analysis operations."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_es_8",
    "Title": "8 Connections to Elasticsearch domains should be encrypted using TLS 1.2",
    "Description": "This control checks whether connections to Elasticsearch domains are required to use TLS 1.2. The check fails if the Elasticsearch domain TLSSecurityPolicy is not Policy-Min-TLS-1-2-2019-07.",
    "QueryID": "aws_es_domain_encrypted_using_tls_1_2",
    "DocumentURI": "policies/aws_foundational_security_es_8.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transit"
      ],
      "foundational_security_item_id": [
        "es_8"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ES"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control could potentially lead to the following costs:\n\n1. **Data Breaches**: Elasticsearch allows full-text searching over potentially massive datasets. Clients not using minimum TLS 1.2 for connections might expose sensitive data during transit, leading to data breaches.\n\n2. **Non-compliance Fines**: Certain industries are regulated by laws or standards that enforce using secure connections for data transmission. For example, the Payment Card Industry Data Security Standard (PCI DSS) and Health Insurance Portability and Accountability Act (HIPAA). Non-compliance could lead to hefty fines and penalties.\n\n3. **Damage to Business Reputation**: In the event of a security breach that exposes sensitive customer or business data, the reputation of the company can be significantly damaged.\n\n4. **Potential Loss of Business**: In some contexts, customers may choose not to work with a company that doesn't fulfill the minimum security requirements such as requiring secure connections.\n\n5. **Operational Costs**: If a breach occurs due to this non-compliance, the operational cost of managing the breach, data remediation, incident response, and possibly system downtime can be high.\n\n6. **Legal Costs**: If data breaches occur, the organization could face legal ramifications that could include lawsuits from clients or clients' customers whose data was compromised. \n\n7. **Industry Trust and Credibility Reduction**: In industries where data security is paramount, non-compliance to such fundamental security protocols could lead to loss of industry trust and credibility."
      ],
      "x-kaytu-usefulness-example": [
        "```\nSuppose there is a company XYZ Corp. that heavily relies on Elasticsearch for various data analytics operations such as search, log processing, and machine learning. To ensure the integrity and confidentiality of their data traffic between their specific application servers and the Elasticsearch domains, they enforce the use of TLS 1.2. \n\nThis control becomes useful in this case as it would check if the said TLS 1.2 security policy is being used. It would fail if the Elasticsearch domain TLSSecurityPolicy is not configured as Policy-Min-TLS-1-2-2019-07. \n\nWith the help of this control, the company can identify any vulnerabilities due to lower TLS versions and take corrective actions, ensuring that their data remains secure during transit. This way, XYZ Corp. could avoid any potential security breaches or data leakage incidents, following best security practices of AWS.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_1",
    "Title": "1 Amazon EBS snapshots should not be public, determined by the ability to be restorable by anyone",
    "Description": "Amazon EBS snapshots should not be public, determined by the ability to be restorable by anyone. EBS snapshots are used to back up the data on your EBS volumes to Amazon S3 at a specific point in time. You can use the snapshots to restore previous states of EBS volumes. It is rarely acceptable to share a snapshot with the public. Typically the decision to share a snapshot publicly was made in error or without a complete understanding of the implications. This check helps ensure that all such sharing was fully planned and intentional.",
    "QueryID": "aws_ebs_snapshot_not_publicly_restorable",
    "DocumentURI": "policies/aws_foundational_security_ec2_1.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "ec2_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS control of keeping Amazon EBS Snapshots private can lead to the following costs:\n\n1. **Data Breach**: If EBS snapshots are public, it gives a chance for unauthorized users to access sensitive information, leading to a data breach. Facing a data breach could lead to significant implications including loss of customer trust and legal consequences.\n\n2. **Operational Risks**: Public snapshots can be restored and manipulated by anyone, which would expose your system to operational risks. Cyber attackers could potentially destabilize your applications, causing mission-critical disruptions.\n\n3. **Non-Compliance Penalties**: Non-compliance might lead to penalties or fines if the exposed data includes sensitive or personally identifiable information and your organization is subject to regulations such as the General Data Protection Regulation (GDPR) or Health Insurance Portability and Accountability Act (HIPAA).\n\n4. **Financial Losses**: The result of a data breach or an operational disruption can lead to financial losses. These can be direct losses from fraudulent activity, as well as indirect costs such as regulatory fines, loss of business, and the cost of incident response.\n\n5. **Reputational Damage**: Non-compliance could lead to reputational damage, leading to loss of users or customers, which could have long-term impacts on the financial health and sustainability of the organization.\n\nTherefore, it is crucial to ensure that the decision to share a snapshot publicly is fully planned and intentional. Making EBS Snapshots public can expose the organization to a significant amount of risk, and the cost of non-compliance can be substantial."
      ],
      "x-kaytu-usefulness-example": [
        "An example use of this control could be in a hypothetical Software Development agency. Let's envision that Clover Inc., a software development agency, uses Amazon EBS snapshots to backup their EBS volumes, which store a vast number of internal product development files, databases and sensitive client information to Amazon S3. If these snapshots were to be publicly accessible and restorable by anyone, this could lead to a security breach; where unauthorized users could access, restore, and misuse these crucial backups. The use of this AWS control, to ensure that these snapshots are not publicly accessible, is thus a vital security measure for Clover Inc. \n\nAWS control effectively checks and mitigates the risk of unintentional public sharing of the backup data, created due to a mistake or lack of awareness by an authorized user. This control helps Clover Inc. to establish a robust and secure backup management procedure, ultimately enhancing their data security and credibility."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_2",
    "Title": "2 The VPC default security group should not allow inbound and outbound traffic",
    "Description": "This control checks that the default security group of a VPC does not allow inbound or outbound traffic. The rules for the default security group allow all outbound and inbound traffic from network interfaces (and their associated instances) that are assigned to the same security group.",
    "QueryID": "aws_vpc_default_security_group_restricts_all_traffic",
    "DocumentURI": "policies/aws_foundational_security_ec2_2.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "ec2_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the stated AWS control can lead to significant costs that vary across several dimensions. Below are some prominent examples of potential costs:\n\n1. **Financial Loss**: If the default security group allows unknown inbound or outbound traffic, it may allow malicious actors to infiltrate your system, leading to data breaches. The recovery process, including system repair and losses from operational downtime, could lead to substantial financial losses.\n\n2. **Data Loss**: Non-compliance may allow unauthorized access to confidential and critical data. This may lead to data theft, manipulation, or deletion by an unauthorized party that leads to an irreversible loss.\n\n3. **Legal and Compliance Costs**: Non-compliance might result in breaches of data protection laws and regulations, leading to legal consequences, penalties, and fines. Additionally, you might have to devote resources to meet the necessary legal requirements post-data breach.\n\n4. **Reputation Damage**: A security breach may result in the loss of customer trust, tarnishing the reputation of the company. This could lead to a loss of existing clients and difficulty in attracting new ones.\n\n5. **Increased Insurance Costs**: Following a security breach, the costs associated with Cyber Liability Insurance could rise significantly.\n\n6. **Operational Disruption**: A breach could pause day-to-day operations until the security issue is thoroughly resolved, leading to business disruption and costs resulting from lost productivity.\n\nIn summary, it's very crucial to comply with this AWS Control to maintain a secure and efficient VPC environment and to avoid these potential costs."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nCompany XYZ is using AWS for its infrastructure. They have many Virtual Private Cloud (VPC) instances running different applications. The default security groups of their VPC instances have been configured incorrectly to allow all inbound and outbound traffic.\n\nRecently, a security audit flagged that this configuration could potentially leave XYZ vulnerable to cyber-attacks, data breaches, and other security threats. For instance, an attacker who gains access to one of their applications could then potentially use that as a launch point to attack other applications within the same VPC.\n\nImplementing this control - checking that the default security group of a VPC does not allow inbound or outbound traffic - will provide an additional layer of security. It will enforce the principle of least privilege, ensuring that only necessary communication is allowed. This will reduce the potential attack surface, thereby making their AWS infrastructure more secure."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_3",
    "Title": "3 Attached EBS volumes should be encrypted at rest",
    "Description": "This control checks whether the EBS volumes that are in an attached state are encrypted. To pass this check, EBS volumes must be in use and encrypted. If the EBS volume is not attached, then it is not subject to this check.",
    "QueryID": "aws_ebs_attached_volume_encryption_enabled",
    "DocumentURI": "policies/aws_foundational_security_ec2_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "ec2_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "If you do not comply with this AWS control, the following potential cost implications might occur\n\n1. **Data Breaches:** Unencrypted EBS volumes mean that the data stored on them is not secured or protected. If attackers gain access to your AWS account, they can easily read the data on unencrypted EBS volumes. This can lead to data breaches, which are often very costly to resolve. \n\n2. **Regulatory Fines:** If your organization must comply with certain data protection regulations like GDPR, HIPAA, PCI-DSS, etc., not encrypting sensitive data could lead to massive regulatory fines.\n\n3. **Loss of Trust:** Data breaches, especially those involving sensitive customer data, can significantly erode trust in your brand. This could indirectly lead to business loss, as customers opt to transact with more secure competitors.\n\n4. **Remediation Cost:** If a security audit discovers unencrypted EBS volumes, you may need to implement encryption retrospectively. This could involve additional costs in terms of resources and potential system downtime.\n\n5. **Legal Action:** In case of a data breach, affected parties may pursue legal action. This could lead to significant legal fees and potentially even compensation payouts.\n\n```markdown\n- **Data Breaches**: Unencrypted EBS volumes mean that the data stored in them is not secured or protected. If attackers gain access to your AWS account, they can easily read data from these volumes. This can lead to data breaches, which are often very costly to resolve.\n- **Regulatory Fines**: Non-compliance with data protection regulations such as GDPR, HIPAA, or PCI-DSS might result in hefty regulatory fines.\n- **Loss of Trust**: Data breaches, especially those involving sensitive customer data, can cause a significant erosion of trust in your organization. This loss of trust can translate into loss of business as customers move to competitors they deem more secure.\n- **Remediation Cost**: If a security audit discovers unencrypted EBS volumes, the process of encrypting your data retrospectively can be costly, both in terms of additional resources required and potential system downtime while the changes are made.\n- **Legal Action**: If a data breach occurs and it results in sensitive information being leaked, your organization may be subjected to legal actions which can result in additional costs in legal fees and potential compensation payouts.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA financial organization is required by regulations to protect sensitive data at rest, including data on AWS EBS volumes. If any EBS volumes are left unencrypted, they could potentially be accessed by unauthorized users, leading to a data breach.\n\nThe control is useful in this scenario as it continually monitors and checks that every EBS volume that is in use (i.e., attached) is encrypted. If a volume is detected to be unencrypted, this control would raise an alert. The timely alert helps the system administrator to ensure compliance with data protection regulations, and safeguards the organization from potential data breaches and resultant penalties. \n\nHere is a sample markup format for CloudFormation to check this control:\n\n```markup\nResources:\n  MyVolume:\n    Type: 'AWS::EC2::Volume'\n    Properties: \n      KmsKeyId: \"arn:aws:kms:us-east-1:012345678912:key/abcd1234-a123-456a-a12b-a123b4cd5678\" # Use a KMS key ID or ARN for encryption\n      Size: 10\n      AvailabilityZone: \"us-east-1a\"\n```\nMark-up explains how the Volume is encrypted using KMS key which helps in achieving the desired check."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_4",
    "Title": "4 Stopped EC2 instances should be removed after a specified time period",
    "Description": "This control checks whether any EC2 instances have been stopped for more than the allowed number of days. An EC2 instance fails this check if it is stopped for longer than the maximum allowed time period, which by default is 30 days.",
    "QueryID": "aws_ec2_stopped_instance_30_days",
    "DocumentURI": "policies/aws_foundational_security_ec2_4.md",
    "ManualVerification": false,
    "Severity": "Low",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "inventory"
      ],
      "foundational_security_item_id": [
        "ec2_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "Low"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can be both financial and operational:\n\n**1. Financial Cost:**\n\nAlthough you are not charged for compute time when an EC2 instance is in a stopped state, you are still charged for any Elastic IP addresses or EBS volumes attached to the instance. These costs can add up over time if you have instances that remain stopped and unused for extended periods. \n\n```markdown\n- *Elastic Load Balancer costs:* If an EC2 instance is associated with an Elastic Load Balancer, you will still incur costs for that service.\n- *EBS volumes costs:* You will also be charged for the storage used by the EBS volumes attached to the stopped instances. These volumes are charged on a per-GB basis, and the cost can add up over time.\n- *Elastic IP costs:* If your stopped instance is associated with an Elastic IP address that is not associated with a running instance, you will be charged an hourly rate.\n```\n\n**2. Operational Cost:**\n\nLeaving EC2 instances unused or stopped for too long can lead to underutilization of resources, and negatively affect the efficiency of your operations.\n\n```markdown\n- *Resource underutilization:* Stopped instances take up allocation space that could otherwise be used for running instances. This leads to resource underutilization and inefficient usage of your AWS services.\n- *Potential loss of data:* If the instance is stopped for too long, there may be a potential for data loss, especially if data is not properly backed up.\n- *Security risks:* Unattended instances may pose security risks, as they may not receive necessary security updates or patches if they are not actively managed.\n```\n\n*This is why it is important to check for and manage instances that have been stopped for an extended period of time. Doing so can help to manage costs, improve operational efficiency, and reduce potential security risks.*"
      ],
      "x-kaytu-usefulness-example": [
        "This control is especially useful for large organizations running numerous EC2 instances on AWS. For example, let's consider a global company that leverages AWS EC2 for hosting their multiple-process applications. \n\nOver time, these applications can evolve rendering some instances redundant. Such instances are often overlooked and left in a stopped state, accruing costs and increasing security risks. \n\nUsing this control, the company can monitor and identify EC2 instances that have been stopped for over 30 days. By so doing, the company can take necessary actions like terminating these instances, thus saving on costs and reducing potential security loopholes.\n\n```markdown\nAs an illustration:\n\n**Company XYZ - Excessive Stopped EC2 Instances Report**\n\nDuring our monthly cloud infrastructure audit, we found that the following EC2 instances have been stopped for more than 30 days:\n\n1. Instance ID: i-0abcd1234efgh5678\n   - **State**: Stopped\n   - **Stop Time**: 45 days ago\n\n2. Instance ID: i-0ijkl9101lmn2345\n   - **State**: Stopped\n   - **Stop Time**: 56 days ago\n\nAs per the company's cloud resource usage policy, EC2 instances that are stopped for more than 30 days are subject to termination to minimize unnecessary costs and potential security risks. Please review and approve the termination of these instances.\n```\nUsing this AWS control, Company XYZ is able to manage their AWS EC2 resources efficiently and maintain a cost-effective and secure cloud infrastructure environment."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_6",
    "Title": "6 VPC flow logging should be enabled in all VPCs",
    "Description": "This control checks whether Amazon VPC Flow Logs are found and enabled for VPCs. The traffic type is set to Reject. With the VPC Flow Logs feature, you can capture information about the IP address traffic going to and from network interfaces in your VPC. After you create a flow log, you can view and retrieve its data in CloudWatch Logs. To reduce cost, you can also send your flow logs to Amazon S3.",
    "QueryID": "aws_vpc_flow_logs_enabled",
    "DocumentURI": "policies/aws_foundational_security_ec2_6.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "ec2_6"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control [VPC Flow Logs] can lead to several potential costs:\n\n1. **Data Breach**: Without the flow logs, you might not have timely or comprehensive insight into all network traffic to and from your VPC. If there is unauthorized or unusual activity, you may only discover it after damage has been done. This could potentially lead to data breaches, with associated loss of customer trust, legal liabilities, and penalties.\n\n2. **Increased Troubleshooting Time**: In the case of network connectivity issues or performance degradation, flow logs provide crucial data for troubleshooting. Without them, it may take longer to identify and fix the problem, leading to extended periods of downtime or poor application performance.\n\n3. **Regulatory Compliance Penalties**: For organizations operating in regulated industries (like healthcare or finance), failure to adequately monitor network traffic can lead to non-compliance with industry or government regulations. Penalties could include fines, sanctions, or loss of operating licenses.\n\n4. **Potential Loss of Revenue**: The above factors could indirectly contribute to a potential loss of revenue. Extended downtime or frequent breaches can negatively impact customer experience and thus affecting the business bottomline.\n\n5. **Forensics Cost**: In the case of a security incident investigation, without flow logs, companies can find it challenging to perform a precise forensic investigation as lack of data can lead to increased time and cost in uncovering the problem. Additionally, there could be potential fines for inability to provide required logs during an investigation.\n\nIn conclusion, it's crucial to ensure that Amazon VPC Flow Logs are enabled and properly configured to avoid these costs. Compliance with this control contributes to a robust security posture, efficient operations, and regulatory compliance."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, an e-commerce company hosts its application on a number of EC2 instances all running in various VPCs. The security team needs to monitor and troubleshoot security issues, including network anomalies and strange traffic patterns.\n\nBy enabling Amazon VPC Flow Logs, they are able to track all IP traffic (accepted and not accepted) going to and from network interfaces in the VPC. This gives them greater visibility into the security landscape of their network and helps quickly identify any unexpected or suspicious behavior. When a traffic is rejected, an alert is triggered, they can quickly check CloudWatch Logs for details on the source and destination of the traffic, timestamps, and the actions that were taken.\n\nThis capability significantly aids in intrusion detection and post-incident analysis, leading to a more secure and resilient infrastructure. The flow logs data can be stored cost-effectively in Amazon S3 for archival and compliance purposes.\n```\nAmazon\n  VPC\n    Name: VPC-1\n    VPC Flow Logs: Enabled\n    Traffic Type: Reject\n    Traffic Detail: All\n    Destination: CloudWatch Logs / Amazon S3\n```\nThis control ensures that such a critical security monitoring feature is never accidentally disabled or overlooked in any VPC."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_7",
    "Title": "7 EBS default encryption should be enabled",
    "Description": "This control checks whether account-level encryption is enabled by default for Amazon Elastic Block Store(Amazon EBS). The control fails if the account level encryption is not enabled.",
    "QueryID": "aws_ec2_ebs_default_encryption_enabled",
    "DocumentURI": "policies/aws_foundational_security_ec2_7.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "ec2_7"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control can lead to the following costs:\n\n1. **Security Risks**: Without account-level encryption for Amazon EBS, sensitive data may be exposed to unauthorized individuals or cybercriminals. This could lead to data breaches, identity theft, and a significant loss of customer trust.\n\n2. **Financial Losses**: In case of a data breach, businesses could face massive financial losses in the form of fines and penalties for failing to comply with data protection legislation, as well as damages from lawsuits. \n\n3. **Regulatory Penalties**: Many industries have strict regulations regarding data protection. Organizations could face regulatory penalties, including fines and sanctions, for failing to implement adequate security controls like EBS encryption.\n\n4. **Reputational Damage**: Non-compliance with data security practices can harm an organization's reputation, potentially costing them customers and impacting future revenue.\n\n5. **Operational Disruptions**: Non-encrypted data could potentially be tampered with or disrupted, leading to service downtimes and impacting business operations.\n\nEncrypting data at the account level in Amazon EBS is a foundational security practice, and failing to comply can have severe implications for both the security of the data and the overall health of the business."
      ],
      "x-kaytu-usefulness-example": [
        "```\nFor example, consider a scenario where an organization is using AWS for hosting their web application. They have several Amazon EBS volumes to store critical application and users' data. To comply with the data privacy standards and prevent unauthorized access, they must ensure all data stored is encrypted.\n\nIn this scenario, the organization can use the AWS Control that checks for account-level encryption on Amazon EBS. This control will ensure that all EBS volumes are encrypted by default, adding an additional layer of security. \n\nIn case the control finds that account-level encryption is not enabled, it will fail and alert the organization. Thus, the organization can immediately correct this security flaw and protect its sensitive data from potential threats. This control, thus, plays a vital role in maintaining the organization's data security and compliance with data privacy regulations.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_8",
    "Title": "8 EC2 instances should use IMDSv2",
    "Description": "This control checks whether your EC2 instance metadata version is configured with Instance Metadata Service Version 2 (IMDSv2). The control passes if HttpTokens is set to required for IMDSv2. The control fails if HttpTokens is set to optional.",
    "QueryID": "aws_ec2_instance_uses_imdsv2",
    "DocumentURI": "policies/aws_foundational_security_ec2_8.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "network_security"
      ],
      "foundational_security_item_id": [
        "ec2_8"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can lead to several potential costs:\n\n1. **Security risks**: EC2 instances configured with IMDSv1 are more vulnerable to SSRF (Server Side Request Forgery) attacks. In an SSRF attack, an attacker can trick a server into making HTTP requests to an arbitrary URL, potentially breaching the server security. By allowing HttpTokens to be optional, an SSRF attacker may intercept these tokens and use them for unauthorized activities.\n\n2. **Data breach**: Metadata of AWS EC2 instances holds critical information, including temporary security credentials. If these credentials are leaked due to non-compliance with this control, it can lead to a massive data breach with sensitive customer or business data being exposed.\n\n3. **Financial costs**: A data breach incident due to failure of this control can impose substantial financial losses. This could be from fines imposed for compliance failures, cost of remediation, legal costs, loss of business, or compensation to be paid to affected parties.\n\n4. **Reputation loss**: Security breaches and data leaks can cause organizations to lose their customer's trust, which can have long term impact on their reputation, and in turn, their business.\n\n5. **Compliance failure**: Many industry regulations and international standards require secure handling of customer data and proper digital security measures. Non-compliance to this AWS Control can cause organizations to flout these regulations resulting in sanctions, penalties, or even loss of license to operate. \n\nIt's important to ensure IMDSv2 (with HttpTokens set to required) is correctly configured to prevent these potential issues."
      ],
      "x-kaytu-usefulness-example": [
        "```\nInstance: eCommerce web application\n\nThe web application relies heavily on AWS EC2 instances for its server-side processing. These instances handle tasks such as inventory management, transaction processing, and user authentication.\n\nExample:\n\nLast month, a security audit raised concerns about potential unauthorized access to instance metadata due to the use of Instance Metadata Service Version 1 (IMDSv1). The audit report recommended moving to IMDSv2, which offers an additional layer of protection through the HttpTokens setting.\n\nAfter the change:\n\n- The eCommerce application EC2 instances are now set to use Instance Metadata Service Version 2 (IMDSv2), with HttpTokens set to required.\n- This helps secure the instances against unauthorized metadata access, such as the leakage of IAM roles or access keys, which could potentially be used by bad actors to gain unauthorized access to other AWS EC2 instances or services.\n- Now, each request for instance metadata requires a valid session token, making it harder for potential 'man-in-the-middle' attacks.\n- As a result, the auditors and the IT team are compliant with best practices for securing AWS resources, and the control for checking EC2 instance metadata version passes successfully, contributing to a more secure eCommerce web application.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_9",
    "Title": "9 EC2 instances should not have a public IP address",
    "Description": "This control checks whether EC2 instances have a public IP address. The control fails if the publicIp field is present in the EC2 instance configuration item. This control applies to IPv4 addresses only.",
    "QueryID": "aws_ec2_instance_not_publicly_accessible",
    "DocumentURI": "policies/aws_foundational_security_ec2_9.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "public_ip_addresses"
      ],
      "foundational_security_item_id": [
        "ec2_9"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance with this control may vary depending on what exactly is being protected and the potential exposure as a result of having a public IP. However, generally, it can be categorized as following:\n\n1. **Security Risk**: The presence of public IP addresses in an EC2 instance can increase the risk of unauthorized access, data breaches and attacks. Cybercriminals can exploit public IP addresses to gain unauthorized access to instances and to sensitive data stored on them.\n\n2. **Potential Regulatory Non-Compliance Penalties**: Depending on specific industry, organizations may be subject to various regulatory requirements regarding data protection. Amazon Web Services (AWS) users who don't meet these requirements, such as healthcare organizations that need to comply with the Health Insurance Portability and Accountability Act (HIPAA), may face significant penalties.\n\n3. **Financial Loss**: A data breach resulting from failure to this control can result in significant financial loss. This includes potential legal costs, regulatory penalties, loss of customer trust and potential customer loss.\n\n4. **Reputation Damage**: A security breach can greatly damage the organization's reputation, resulting in loss of customer trust and potential customer loss. This can have long-term implications for the company's earnings and its ability to attract new customers.\n\n5. **Privacy Violation**: If personal data is exposed due to non-compliance, the company may be in violation of privacy laws such as General Data Protection Regulation (GDPR), which can lead to heavy fines.\n\nTherefore, it's crucial to comply with this control to limit public IP addresses and reduce exposure to these potential costs and risks."
      ],
      "x-kaytu-usefulness-example": [
        "Instance of usefulness:\n\nAn organization has a strict security policy that requires all of its data and services to be private and not accessible to the public. This organization utilizes AWS and EC2 instances to store and manage some of their sensitive data. \n\nTo ensure that none of their EC2 instances are inadvertently exposing this data to the public, they use the AWS Control that checks for public IP addresses. This way, if any EC2 instances have a public IP, the control will flag it, allowing the IT team to quickly address and correct the issue, ensuring the security and privacy of their data. \n\nFor example, they can use AWS config to receive notifications about changes to their AWS resources. A public IP address for EC2 instances could be changing and the AWS config can help the organization to constantly have track of these changes regarding the public accessibility of these instances. This will further ensure they remain accountable and compliant with their security policies. \n\nBy limiting public access, this control can avoid possible data leaks or breaches that may occur due to unauthorized access. Thus, this AWS Control is highly useful for enhancing the security and privacy measures of an organization's AWS environment, particularly for organizations that deal with sensitive data."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_10",
    "Title": "10 Amazon EC2 should be configured to use VPC endpoints",
    "Description": "This control checks whether a service endpoint for Amazon EC2 is created for each VPC. The control fails if a VPC does not have a VPC endpoint created for the Amazon EC2 service.",
    "QueryID": "aws_vpc_configured_to_use_vpc_endpoints",
    "DocumentURI": "policies/aws_foundational_security_ec2_10.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "api_private_access"
      ],
      "foundational_security_item_id": [
        "ec2_10"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control could potentially incur the following costs:\n\n1. **Increased Data Transfer Cost**: Without an EC2 VPC endpoint in place, your traffic to/from EC2 goes through the Internet Gateway, which might increase your AWS data transfer costs. VPC endpoints enable you to privately connect your VPC to supported AWS services without requiring an Internet gateway, a NAT device, VPN, or AWS Direct Connect connection.\n\n2. **Security Risks**: VPC Endpoints for Amazon EC2 allows access to EC2 without requiring exposure to the public internet. Non-compliance would mean traffic needs to traverse over the public internet to reach the service which increases the risk of data breaches.\n\n3. **Performance Degradation**: Connectivity through the public internet can introduce network performance unpredictability. A VPC endpoint enables you to privately connect your VPC to services, providing more reliable and potentially faster network performance.\n\n4. **Compliance Risks**: Depending on the regulations your organization has to comply with (e.g. GDPR, HIPAA), transferring sensitive data over the public Internet could be viewed as unacceptable and might result in penalties.\n\n5. **Operational Inefficiencies**: Amazon EC2 VPC endpoints provide more reliable connectivity to Amazon EC2 than an Internet gateway. Without an Amazon EC2 VPC endpoint, you're more susceptible to network interruptions. \n\nTo summarize, non-compliance can lead to increased costs, compromised network performance and security risks, potentially causing significant damage to the enterprise. Therefore, ensuring adherence to this AWS control is significant."
      ],
      "x-kaytu-usefulness-example": [
        "```markdown\nConsider the following use case: \n\nA user is part of a large organization that makes use of multiple Virtual Private Clouds (VPCs) within the Amazon Web Services (AWS) environment. This organization uses the Amazon Elastic Compute Cloud (EC2) heavily for various operations.\n\nThe organization’s policy states that each VPC must have a service endpoint for Amazon EC2 for security and accessibility reasons. Without the service endpoint, the EC2 instances inside a VPC would have to use the public internet to communicate with each other. This approach poses a risk as data could be intercepted or altered in transit.\n\nAs an example, let's say the organization has three VPCs -- VPC A, VPC B, and VPC C. VPC A and VPC B have service endpoints configured for EC2, but VPC C does not. \n\nWith this AWS Control, you can automate the process of checking for service endpoints across all the VPCs. When the control runs, it will confirm that a service endpoint exists for VPC A and VPC B. However, the control will fail for VPC C, indicating that a service endpoint for EC2 has not been configured. \n\nReceiving a fail notice allows the organization to promptly recognize and address the issue. They can then go ahead and create a service endpoint for VPC C. In this way, the AWS Control helps the organization to adhere to its security policy, minimize the risk of data interception, and improve the internal connectivity for EC2 instances across all VPCs.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_20",
    "Title": "20 Both VPN tunnels for an AWS Site-to-Site VPN connection should be up",
    "Description": "This control checks that both VPN tunnels provided by AWS Site-to-Site VPN are in UP status. The control fails if one or both tunnels are in DOWN status.",
    "QueryID": "aws_vpc_vpn_tunnel_up",
    "DocumentURI": "policies/aws_foundational_security_ec2_20.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resilience"
      ],
      "foundational_security_item_id": [
        "ec2_20"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can be significant and multifaceted:\n\n1. **Operational Disruption:** If one or both VPN tunnels are not in the UP status, certain data transfers or operational processes that rely on the VPN connection might not work as expected. This can lead to disruptions in business operations and delays in workflows. \n\n2. **Reduced Redundancy:** AWS Site-to-Site VPN provides two tunnels for increased resilience. If one or both tunnels are down, this redundancy is reduced, leading to a potentially higher risk of downtime.\n\n3. **Data Security:** VPNs are often used to create a secure connection for data transfer between different networks. If the VPN tunnels are down, this secure connection is interrupted, which can potentially expose sensitive data to risks.\n\n4. **Increased Troubleshooting Costs:** If the VPN tunnels are not working correctly, businesses may need to invest time and resources to troubleshoot and rectify the issues, which can in turn lead to increased operating costs.\n\n5. **Compliance Violations:** If the business operates in an industry or region with specific data security and privacy regulations, functioning VPNs might be a requirement. Failure to comply with these regulations because of non-working VPN tunnels can lead to fines or penalties."
      ],
      "x-kaytu-usefulness-example": [
        "This AWS control is crucial for businesses that rely on a stable and secure connection between their on-premises network and their Amazon VPC (Virtual Private Cloud). Here is an instance illustrating its usefulness:\n\n#### Business Scenario\n\nAssume a company called `XYZ Corp.` has its primary data center located in New York and has active branches across different cities in the U.S. They use an AWS Site-to-Site VPN to securely transfer data between their primary data center and other VPCs on AWS they use for their daily operations.\n\n#### Detection\n\nOne day, the XYZ Corp AWS engineer receives a report that one of the VPN tunnels is in the `DOWN` status, which means it is not active and data couldn't be transferred over it.\n\n#### Impact\n\nThe inactive VPN tunnel poses a significant risk to operations, as it could lead to instability in the network, impacting the communication between the main data center and their AWS environment. It could delay operations, cause service downtime, and ultimately loss of revenue.\n\n#### Resolution\n\nThanks to the AWS control, the engineer promptly works on troubleshooting and fixing the issue, restoring the site-to-site VPN connectivity and resuming normal operations. The control also continued to monitor the VPN status going forward, reducing the likelihood of unrecognized or prolonged downtime.\n\nHence, AWS control gives XYZ Corp a mechanism to ensure that their site-to-site VPN is always up and running, reducing the potential downtime and ensuring seamless operations."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_21",
    "Title": "21 Network ACLs should not allow ingress from 0.0.0.0/0 to port 22 or port 3389",
    "Description": "This control checks if default ports for SSH/RDP ingress traffic for network access control lists (NACLs) is unrestricted. The rule fails if a NACL inbound entry allows a source CIDR block of '0.0.0.0/0' or '::/0' for ports 22 or 3389.",
    "QueryID": "aws_vpc_network_acl_remote_administration",
    "DocumentURI": "policies/aws_foundational_security_ec2_21.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "ec2_21"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control can lead to substantial costs due to the potential vulnerabilities it opens up.\n\n1. **Security Costs:** Having SSH/RDP ports unrestricted means that anyone on the internet can try to access your systems and data. This increases the chance of unauthorized access, hacking attempts, or malicious activities, potentially leading to data breaches and system compromises. The cost of dealing with these incidents can be tremendous.\n\n2. **Regulatory Fines:** Failure to adhere to industry regulations (like HIPAA for healthcare or PCI-DSS for financial data) due to insecure network configurations can result in hefty fines and penalties. Moreover, such non-compliance can incur costs due to loss of business, damage to reputation, legal fees, etc.\n\n3. **Operational Costs:** If unrestricted ports lead to a security compromise, your business may suffer operationally due to downtime and system disruptions. Here, the cost is not just immediate repairs, but also potential loss of productivity and revenue.\n\n4. **Chance of Data Loss:** Unauthorized access can lead to loss of sensitive data, with associated costs. This means the cost of potentially having to pay for remediation services, like notifications, credit monitoring, and claims for affected individuals.\n\nHere's a simple illustration:\n\n```markdown\n- **Security Costs:** \n    - Risk of unauthorized access, hacking, data breaches, and system compromises.\n- **Regulatory Fines:**\n    - Non-compliance with security standards can lead to fines and penalties.\n- **Operational Costs:** \n    - System downtime, disruptions, and loss of productivity due to security incidents.\n- **Data Loss Costs:**\n    - Cost of remediation for affected individuals in case of sensitive data exposure.\n```\n\nTherefore, ensuring that default ports for SSH/RDP ingress traffic in network access control lists (NACLs) are restricted is essential for risk mitigation and cost optimization."
      ],
      "x-kaytu-usefulness-example": [
        "AWS Control gives you a higher level of control over your cloud computing resources. For example, by checking whether the default ports for Secure Shell (SSH) and Remote Desktop Protocol (RDP) ingress traffic for network control lists (NACLs) are unrestricted or not.\n\nThe primary use of this control is to protect and secure the network traffic in your Amazon Virtual Private Cloud (VPC). By limiting or even blocking unwanted traffic altogether. Since both SSH and RDP are commonly used methods for remote administrative access, allowing inbound requests from any IP address (represented by '0.0.0.0/0' or '::/0') especially for these ports, could expose your infrastructure to malicious activity.\n\nFor example, suppose you run a set of web servers behind an Amazon VPC with a NACL defined. Meanwhile, one of your administrators mistakenly allows unrestricted SSH and RDP traffic. The AWS Control would identify this configuration issue and report it, allowing for a quick rectification. Without this control, the administrator's mistake could have had serious consequences, including the potential loss of sensitive data or unauthorised system changes.\n\nTherefore, using this AWS Control is a constructive way of minimizing the risk of cyber threats and ensuring that your cloud-based systems maintain a high level of security at all times."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_22",
    "Title": "22 Unused EC2 security groups should be removed",
    "Description": "This AWS control checks that security groups are attached to Amazon Elastic Compute Cloud (Amazon EC2) instances or to an elastic network interface. The control will fail if the security group is not associated with an Amazon EC2 instance or an elastic network interface.",
    "QueryID": "aws_vpc_security_group_unused",
    "DocumentURI": "policies/aws_foundational_security_ec2_22.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "inventory"
      ],
      "foundational_security_item_id": [
        "ec2_22"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control is multi-faceted and can greatly impact your application or environment in several ways:\n\n**1. Loss of Data Protection:**\n   If security groups are not assigned to Amazon EC2 instances or to an elastic network interface, data flow would not be regulated and restricted. This can potentially lead to unwanted data exposure or data loss - leading to a direct impact on the business by compromising data integrity and confidentiality.\n\n**2. Increased Vulnerability To Attacks:**\n   Security groups act as a virtual firewall for your EC2 instances to control inbound and outbound traffic. Without associating a security group, your EC2 instaces are vulnerable to threats and might increase the risk of malicious attacks.\n\n**3. Regulatory and Compliance Issues:**\n   Unassigned security groups may cause compliance issues with various data protection regulations or laws, such as GDPR, HIPAA or CCPA. This could lead to hefty fines, penalties, or legal actions.\n\n**4. Increased Operational Cost:**\n   Without proper security measures in place, an attack could result in a significant amount of data transfer or resource usage, leading to unexpected and possibly quite high charges on your AWS bill.\n\n**5. Loss of Business Reputation:**\n   Any data breaches or successful attacks can result in loss of trust from customers and the public, which may impact the business reputation and future business prospects.\n\nTo minimize these risks, it is key to ensure that all EC2 instances or elastic network interfaces have associated security groups in place which are appropriately configured to meet your specific security and business requirements."
      ],
      "x-kaytu-usefulness-example": [
        "This AWS control is especially useful in a situation where a company is running several mission-critical applications on Amazon EC2 instances. Let's say a medium-sized retail company is running their e-commerce website, inventory management system, and customer relationship management system on different EC2 instances.\n\nThe IT department of the company must ensure that all these instances are well-protected from security breaches, wrong configurations, and accidental port openings which could expose sensitive data and cause loss of customer trust and fiscal penalties.\n\nBy using this control, the team can constantly check that all EC2 instances, as well as any elastic network interfaces, are properly associated with security groups. This ensures that only the necessary ports are open, according to the rules in the security group, and unrequired or potentially dangerous ones are kept closed.\n\nIf a security group is disassociated from any EC2 instance or elastic network interface, the control will immediately fail and alert the team to this potentially risky configuration. This helps with both proactive protection as well as quick reaction in case of any misconfigurations or breaches.\n\n```markdown\nExample:\n- Purpose: To maintain security and integrity of company's e-commerce website running on EC2 instances.\n- AWS Control: Constantly checks that all EC2 instances are properly associated with security groups.\n- Useful Scenario: If a security group disassociates from an EC2 instance, the control will fail and alert the IT team for immediate action.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_23",
    "Title": "23 EC2 Transit Gateways should not automatically accept VPC attachment requests",
    "Description": "This control checks if EC2 Transit Gateways are automatically accepting shared VPC attachments. This control fails for a Transit Gateway that automatically accepts shared VPC attachment requests.",
    "QueryID": "aws_ec2_transit_gateway_auto_cross_account_attachment_disabled",
    "DocumentURI": "policies/aws_foundational_security_ec2_23.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "ec2_23"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control can result in significant cost due to heightened security risks. \n\n1. **Increased vulnerability to unauthorized access:** If EC2 Transit Gateways automatically accept shared VPC attachment requests, there's a potential for unauthorized access to your VPC resources. This can lead to unauthorized data access and potential for data loss or tampering.\n\n2. **Breaches in compliance mandates:** Depending on the nature of the business and the regulations applicable to it (like GDPR, HIPAA, PCI DSS, etc.), automatic acceptance of shared VPC attachments could lead to compliance breaches. This may result not only in financial penalties but also reputational damages and loss of client trust.\n\n3. **Network complexity and management issues:** When sharing across multiple VPCs is allowed without restrictions, it can lead to complex network configurations, data routing puzzles, and difficulties in managing network traffic. \n\n4. **Operational Cost:** In case of data breaches, the cost of identifying the breach, notifying customers, paying potential fines, rectifying the issue, and conducting a thorough post mortem to prevent future breaches could be quite significant. \n\n5. **Loss of Resources:** If an intruder gets access, they could potentially start, stop or terminate instances which might result in loss of resources as well as associated data. There might be a financial implication depending upon the number, type and size of the instances running.\n\nIn order to avoid these costs and maintain security in an AWS environment, it is highly recommended to restrict automatic acceptance of shared VPC attachments and have a robust manual approval process in place for any kind of resource sharing requests."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, a company is using AWS infrastructure to run its operations and plans to establish a private network to connect its various VPCs present across different regions. It decides to leverage AWS Transit Gateway to effectively manage this network and its subsequent connections.\n\nHowever, the company has a strict policy to not automatically accept shared VPC attachments due to security considerations. Each acceptance should be manually reviewed before approval.\n\nIn this case, with the AWS control functionality, the team could always verify if any Transit Gateways are set up to automatically accept VPC attachments. This way, the security team can ensure that no unauthorized or unintended connections are made between VPCs, thus reducing potential security risks.\n\n```\nExample:\n\n### Required Actions:\n- Change the AutoAcceptSharedAttachments to disable \n- Review the security policy \n\n```\nIn practice, the following example can be applied:  \n```markdown\n- Resource: Transit Gateway (tgw-1234567890)\n   - Check: EC2: Transit Gateways do **not** automatically accept shared VPC attachments\n   - Status: **Failed**\n   - Required Action: \n     - Change AutoAcceptSharedAttachments setting to \"disable\" for the Transit Gateway with the ID tgw-1234567890\n     - Review and update Security policies as necessary. \n```\nBy using this control, the company can follow best practices for cloud security, ensuring the safety of their digital assets."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_24",
    "Title": "24 Paravirtual EC2 instance types should not be used",
    "Description": "This control checks whether the virtualization type of an EC2 instance is paravirtual. The control fails if the virtualizationType of the EC2 instance is set to paravirtual.",
    "QueryID": "aws_ec2_instance_virtualization_type_no_paravirtual",
    "DocumentURI": "policies/aws_foundational_security_ec2_24.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "vulnerability_patch_and_version_management"
      ],
      "foundational_security_item_id": [
        "ec2_24"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Compliance to controls related to the virtualization type of the EC2 instance is very crucial in a cloud environment like AWS. The potential costs of non-compliance are:\n\n1. **Security risks:** Paravirtualization could expose the system to potential vulnerabilities because it allows host and guest OS to communicate with each other, making it easier for an attacker to exploit one to breach the other. Non-compliance, therefore, could lead to security breaches and compromise the integrity of the system.\n\n2. **Performance issues:** Depending on the use case, paravirtualization can lead to potential performance concerns as guest OS needs to be tinkered for the paravirtualization to work smoothly. The system's performance may not meet the organization's or user's expectations, thereby affecting the efficiency of business operations.\n\n3. **Maintenance challenges:** The maintenance of paravirtualized instances can be complex and require more effort, which could lead to increased operational costs. Any changes to the operating system would require changes to the paravirtualized drivers.\n\n4. **Monetary Costs:** In case a security breach does occur, there could be a potential loss of sensitive data, which, in turn, could lead to financial losses due to regulatory fines, penalties, and loss of business reputation.\n\nTo avoid these potential costs, organizations should check this control and ensure that the virtualization type of their EC2 instances is not set to paravirtual, unless absolutely necessary. Regular audits and compliance checks can help detect and resolve any non-compliance.\u003c/AI\u003e,."
      ],
      "x-kaytu-usefulness-example": [
        "In most modern applications, the use of hardware virtual machines (HVMs) is preferred over paravirtualization due to their superior performance and advanced features. However, some legacy systems might still be using paravirtual EC2 instances on the AWS platform because they were launched before HVMs became the standard.\n\nFor instance, let's consider a situation where you've taken over an already existing AWS setup previously managed by another team. You want to ensure that all the EC2 instances are optimized for best performance, which means they should be using HVMs and not paravirtual instances. In this case, you would use the control to identify and flag any EC2 instances that are still running under paravirtualization. \n\nOnce you know which instances are running on paravirtualization, you can make a plan to transition them to HVMs. This might involve considerations such as downtime, data migration, or compatibility testing. Thus, this control allows you to optimize your AWS resources for performance and cost. \n\n```markdown\n**Control:** Checks whether the virtualization type of an EC2 instance is paravirtual. \n\n**Use:** Identifying EC2 instances running on the less efficient paravirtualization type, to plan and execute a transition to more efficient HVMs.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_15",
    "Title": "15 EC2 subnets should not automatically assign public IP addresses",
    "Description": "This control checks whether the assignment of public IPs in Amazon Virtual Private Cloud (Amazon VPC) subnets have MapPublicIpOnLaunch set to FALSE. The control passes if the flag is set to FALSE.",
    "QueryID": "aws_vpc_subnet_auto_assign_public_ip_disabled",
    "DocumentURI": "policies/aws_foundational_security_ec2_15.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "network_security"
      ],
      "foundational_security_item_id": [
        "ec2_15"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance with this AWS control can be significant both from a security and financial standpoint. \n\n## Security Penalty\n\nHaving the MapPublicIpOnLaunch set to TRUE means that each instance that you launch in a specified subnet gets a public IP address, making your instance directly reachable from the internet. This increases the potential threat surface from external sources. Without the proper security measures in place, such as stringent Security Groups, Network ACLs, or firewalls, it could lead to unauthorized access or potential breaches of your systems. \n\n## Financial Penalty  \n\nEach public IP address in AWS has its associated costs. If you have many instances that are unnecessarily assigned a public IP, you may incur additional expenses. Furthermore, if a security breach occurs due to non-compliance, the cost of addressing the breach and potential data loss, as well as any damage to the company's reputation, can be substantial. \n\n## Operational Penalty \n\nIf all the instances in a VPC subnet are assigned public IPs, maintaining and managing these can be difficult and can also add to the overall operational overhead. \n\nIn summary, if the MapPublicIpOnLaunch attribute is not set to FALSE, it could directly compromise the security, increase operational overhead, and financially burden your Amazon VPC subnets and the resources within it. Compliance with AWS controls ensures that you can reap the benefits of the cloud in a safe and cost-effective manner."
      ],
      "x-kaytu-usefulness-example": [
        "This control can be considered useful in scenarios where strict security measures are mandated.\n\n**Example:**\n\nConsider an organization, ABC Corp, which maintains highly sensitive client data and operates within strict security guidelines in all its infrastructures, even in the cloud. ABC Corp uses AWS to host its applications and stores data. It uses Amazon VPC for launching resources in a virtual network. \n\nTo minimize any security risks and protect their client information, ABC Corp has decided to control the assignment of direct public IPs to instances at launch. Therefore, they should assure that these instances are not directly accessible over the internet upon launch.\n\nIn this context, the control check to ensure MapPublicIpOnLaunch set to FALSE is very useful. This allows ABC Corp to limit any potential risks of unauthorized access by only assigning access through a NAT Gateway or VPN, thereby adhering to their strict security measures. \n\nThis control, thus aids in preventing uncontrolled exposure of instances to the public internet right upon launch, making it a valuable safeguard in maintaining the security posture of the organization."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_16",
    "Title": "16 Unused network access control lists should be removed",
    "Description": "This control checks whether there are any unused network access control lists (ACLs). The control checks the item configuration of the resource AWS::EC2::NetworkAcl and determines the relationships of the network ACL.",
    "QueryID": "aws_vpc_network_acl_unused",
    "DocumentURI": "policies/aws_foundational_security_ec2_16.md",
    "ManualVerification": false,
    "Severity": "Low",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "network_security"
      ],
      "foundational_security_item_id": [
        "ec2_16"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "Low"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can be considered from various perspectives- financial, operational, security, and reputational.\n\n**1. Financial:** Unused network access control lists (ACLs) may seem harmless, but they can add up to the cost. These costs come in the form of AWS service costs for unused resources that can contribute to the overall AWS service bill, causing unnecessary financial burden.\n\n**2. Operational:** Unused ACLs can take up space, resources, and add to the complexity of the AWS environment. It also makes for inefficient resource management and requires unnecessary maintenance work in potentially reviewing, updating or checking these unused ACLs. This detracts from the efficiency of IT operations.\n\n**3. Security:** Unused ACLs can inadvertently create security loopholes if not appropriately managed. They may act as potential gateways or exploit points for malicious actors if they contain lax or incorrect rules. \n\n**4. Reputational:** If an unused ACL leads to a security incident or data breach and publicizes, it may cause reputational damage that can cost customer trust, leading to potential loss of business.\n\nTherefore, it’s essential to comply with the AWS control that checks for unused network ACLs, as doing so can avoid unnecessary expenses, improve operational efficiency, enhance security, and protect the organization's reputation.\n"
      ],
      "x-kaytu-usefulness-example": [
        "This AWS config rule is useful in managing and optimizing the network resources in your AWS infrastructure. It helps ensure that you only retain the Network ACL that are necessary for your applications while eliminating the unused ones, thus maintaining a clean and efficient networking system. \n\nFor instance, consider an organization that is managing hundreds or thousands of network entities across multiple AWS accounts or regions. It may be challenging to manually track, validate, and clean up every Network ACL, especially in dynamic cloud environments where resources are constantly created and removed.\n\nHere is an example of a scenario where this control is useful:\n\n```markdown\n1. An organization deploys a new VPC with multiple subnets for a new project. Each subnet has its associated Network ACL for managing traffic.\n\n2. After a few months, the project ended, and the EC2 instances within those subnets are terminated. However, the Network ACLs have not been deleted.\n\n3. AWS Config rule helps by automatically detecting these unused Network ACLs. The organization can then review them and decide if they should be removed or kept.\n\n4. This cleanup process, driven by the AWS Config rule, is highly beneficial for refining the organization's networking infrastructure. It also helps inform the organization of unutilized resources, potentially leading to cost savings.\n```\n\nBy eliminating unused Network ACLs, you can reduce potential attack vectors by simplifying your network configuration, improving the overall security posture."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_25",
    "Title": "25 Amazon EC2 launch templates should not assign public IPs to network interfaces",
    "Description": "This control checks if Amazon EC2 launch templates are configured to assign public IP addresses to network interfaces upon launch. The control fails if an EC2 launch template is configured to assign a public IP address to network interfaces or if there is at least one network interface that has a public IP address.",
    "QueryID": "aws_ec2_launch_template_not_publicly_accessible",
    "DocumentURI": "policies/aws_foundational_security_ec2_25.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resources_not_publicly_accessible"
      ],
      "foundational_security_item_id": [
        "ec2_25"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this particular AWS Control entails a potential loss of sensitive data, increased vulnerability to cyber-attacks, financial costs, and damage to the company's reputation.\n\n1. **Data Leak and Security Threats:** If an EC2 instance is assigned a public IP address, it becomes directly reachable from the internet, potentially exposing company data to external threats. Unauthorized individuals can exploit vulnerabilities to gain access to stored data, possibly leading to substantial data loss or leakage.\n\n2. **Increased Vulnerability to Cyber-attacks:** Continuous exposure of EC2 instances to the web can increase the probability of cyber-attacks like DDoS (Distributed Denial of Service) attacks.\n\n3. **Financial Costs:** A breach from a non-compliance violation can impose financial penalties and incur significant costs for the user. This cost can stem from both the direct penalties for non-compliance and from the need to remediate vulnerabilities or recover from attacks.\n\n4. **Reputation Damage:** Data breaches and other types of security incidents that arise from improper security management can significantly affect a company's reputation, eroding customer trust, which can be especially damaging if the company operates in a heavily-regulated industry or handles sensitive customer information.\n\nIn summary, the control's compliance ensures the company's infrastructure is not unnecessarily exposed to the public internet thereby mitigating the risks of external threats, potential data loss, or leak, and most importantly upholds the company's security posture."
      ],
      "x-kaytu-usefulness-example": [
        "Running a private network on AWS comes with various advantages - low latency, improved security, proprietary access, to mention a few. However, while running such a private network, it becomes important to maintain that all the instances running on the network do not have a public IP, in order to maintain privacy and avoid public access.\n\nFor example, consider an organization that runs its IT operations on a private network on AWS. They regularly spin up new EC2 instances using EC2 launch templates. However, they need assurances that these instances will default to private IP addressing, preserving the security and integrity of the network.\n\nSo, in this case, the organization can use AWS control to check each EC2 launch template and ensure that none is configured to assign a public IP address to network interfaces. If such a configuration is found, the control would flag or fail the deployment, allowing the IT team to rectify the issue. \n\nThis control thus enhances the security measures and keeps the network safer by preventing unintended public exposure of the instances. It also helps organizations to remain compliant with the rules or regulations that restrict the use of public IP addresses."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_17",
    "Title": "17 EC2 instances should not use multiple ENIs",
    "Description": "This control checks whether an EC2 instance uses multiple Elastic Network Interfaces (ENIs) or Elastic Fabric Adapters (EFAs). This control passes if a single network adapter is used. The control includes an optional parameter list to identify the allowed ENIs.",
    "QueryID": "aws_ec2_instance_not_use_multiple_enis",
    "DocumentURI": "policies/aws_foundational_security_ec2_17.md",
    "ManualVerification": false,
    "Severity": "Low",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "network_security"
      ],
      "foundational_security_item_id": [
        "ec2_17"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "Low"
      ],
      "x-kaytu-noncompliance-cost": [
        "If an organization fails to comply with this AWS control, it can lead to various costs:\n\n1. **Security Costs**: This control is an important component of maintaining a secure environment. An EC2 instance with multiple ENIs or EFAs may increase the risk of security breach if not properly controlled. A security breach not only breaks customer trust, but may also result in financial penalties depending on the nature of the data compromised.\n\n2. **Performance Costs**: Overuse of multiple ENIs or EFAs can lead to unpredictable instance behavior and performance degradation. This could lead to decreased productivity and eventual financial loss if essential tasks and operations are slowed or disrupted.\n\n3. **Maintenance Costs**: Without this control, identification and management of ENIs or EFAs could become complex and difficult to handle especially within a large number of instances. This may increase the time and resources required to maintain network interfaces, leading to higher costs.\n\n4. **Non-Compliance Costs**: If the organization has to comply with specific regulations pertaining to data security, non-compliance to this control may result in heavy financial penalties from regulatory bodies.\n\n```\nOverall, this control assists in managing network interface usage per EC2 instance efficiently and securely. Non-compliance can significantly increase the risk exposure and eventual costs.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n```markdown\nOur company is hosting its main website using Amazon EC2 instances, and for security reasons, we've decided to separate the traffic between the web and application tier and database tier. To implement this, we've leveraged multiple Elastic Network Interfaces(ENIs). \n\nOur security team decided to apply AWS controls to monitor our EC2 instances to ensure only specified ENIS are used for better network traffic management and security. \nBelow is how we integrated the monitoring control:\n\n- Use AWS Lambda and CloudWatch to trigger the control check every hour.\n- In Lambda function, with the help of AWS SDK we fetch all running EC2 instances.\n- For each instance, we fetch the details of attached ENIs and EFA.\n- If more than one ENI or EFA is being used, the control flags that instance for review.\n- The optional parameter list of allowed ENIs is used to whitelist the approved ENIs, and an instance is ignored if it is using an ENI from the approved list.\n- An alert is sent via SNS to the network security management team to review flagged instances.\n\nThis implementation has significantly reduced the effort and time to review each EC2 network interfaces and ensures that our network traffic remains separated and secure. It automatically flags potential network misconfigurations, providing us with a chance for quick resolution.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_acm_1",
    "Title": "1 Imported ACM certificates should be renewed after a specified time period",
    "Description": "This control checks whether ACM certificates in your account are marked for expiration within 30 days. It checks both imported certificates and certificates provided by AWS Certificate Manager.",
    "QueryID": "aws_acm_certificate_expires_30_days",
    "DocumentURI": "policies/aws_foundational_security_acm_1.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transit"
      ],
      "foundational_security_item_id": [
        "acm_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ACM"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance with this AWS control can be multi-faceted, involving both financial and non-financial aspects:\n\n1. **System downtime:** If the ACM certificates used by your AWS services expire without renewal, it might cause system downtime. Applications or services that depend on these certificates may stop functioning correctly. This can lead to a loss of business operations, impacting productivity and revenue.\n\n2. **Loss of trust and credibility:** Expired certificates can lead to warnings or error messages displayed to end users. This can impact the trust and credibility of your application or website from a user's perspective.\n\n3. **Security risks:** Expired certificates can expose the system to serious security risks like data theft, Man-in-the-middle (MITM) attacks or other potential cyber-security threats. This can lead to unauthorized access to sensitive data leading to violation of privacy laws and regulations.\n\n4. **Penalties and fines:** If your business operates in a highly regulated industry (like finance, healthcare etc.) or under stringent data protection laws (like GDPR or HIPAA), non compliance to keeping certificates updated can lead to heavy penalties and fines.\n\nBy regularly monitoring certificate expiration and ensuring their renewal within the stipulated time, you can prevent these potential issues and maintain the secure and smooth operation of your services. \n\nThis control helps in achieving that by alerting you when any ACM certificate in your account is due for expiration within 30 days. This gives you ample time to renew the certificates thus preventing any possible downtime, loss of trust, security breaches, or potential penalties due to non-compliance with relevant regulations."
      ],
      "x-kaytu-usefulness-example": [
        "Example Instance:\n\nIn a scenario, let's say you run an e-commerce website. Security is one of the utmost priorities to protect confidential user data and transaction information. Using SSL/TLS certificates is a part of that security protocol. The team has deployed several certificates using AWS Certificate Manager and some are imported. \n\nAs these certificates have a certain lifespan, they need to be renewed before they expire to avoid website downtime or security issues. In this scenario, AWS Control checks if any ACM certificates in the account are set to expire within the next 30 days, both for imported certificates and those provided by the AWS Certificate Manager.\n\nThis functionality is extremely useful because it helps to keep the certificates up-to-date, ensuring uninterrupted and secure operation of the website, without the need for manual tracking of each certificate's expiration date. It prevents potential breaches or loss of reputation due to accidentally allowing a certificate to lapse. Without this control, you could potentially lose business due to an expired certificate, which could cause your site to be flagged as insecure by web browsers."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_18",
    "Title": "18 Security groups should only allow unrestricted incoming traffic for authorized ports",
    "Description": "This control checks whether the security groups that are in use allow unrestricted incoming traffic. Optionally the rule checks whether the port numbers are listed in the authorizedTcpPorts parameter. The default values for authorizedTcpPorts are 80 and 443.",
    "QueryID": "aws_vpc_security_group_allows_ingress_authorized_ports",
    "DocumentURI": "policies/aws_foundational_security_ec2_18.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "security_group_configuration"
      ],
      "foundational_security_item_id": [
        "ec2_18"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can have significant security and financial implications. \n\n1. **Security Risk**: Allowing unrestricted incoming traffic to your AWS instances can expose your systems to various vulnerabilities. If your security groups aren't correctly configured, an attacker could exploit this to gain unauthorized access, modify, or destroy your data, install malicious software, or perform a Denial-of-Service (DoS) attack.\n\n2. **Data Breach**: If a security breach occurs, hackers might gain access to sensitive customer data, thereby, violating data privacy laws. This can result in lawsuits, fines, and can tarnish the reputation of the company which will result in loss of customer trust.\n\n3. **Regulatory Fines \u0026 Legal Fees**: Non-compliance to security controls might violate various compliances such as GDPR, CCPA, HIPAA, PCI DSS, etc., which might lead to hefty fines being levied by regulatory bodies.\n\n4. **Resource Consumption \u0026 Added Expenses**: In the event of a successful attack, the intruder might use your AWS instances for activities like crypto-mining or hosting of illegal content, leading to increased resource consumption and thus ballooning expenses.\n\n5. **Disruption of Service**: In case of a DoS attack, your services might be unavailable to your customers. This can result in business losses.\n\n6. **Remediation Cost**: Post security breach, the cost of remediation such as system recovery, data recovery, engaging cybersecurity professionals to identify vulnerabilities and secure the system, and the cost of implementing stricter security measures can be significant.\n\nIn summary, the cost of non-compliance to this AWS control isn't just financial. It can have significant strategic and operational implications, potentially disrupting your business, damaging your reputation, and incurring significant costs to remediate."
      ],
      "x-kaytu-usefulness-example": [
        "This control can be particularly useful in ensuring that your AWS resources are not exposed to potential security threats. For instance, if you have an EC2 instance that is running a web application, you'd typically want to allow incoming traffic on ports 80 (HTTP) and 443 (HTTPS). However, you wouldn't want to allow unrestricted incoming traffic on all ports, as this could potentially expose your instance to malicious attacks.\n\nNow suppose that the security group associated with your EC2 instance is mistakenly configured to allow unrestricted incoming traffic. The AWS Control checks your configuration and flags this because it's a security risk. By alerting you to this misconfiguration, the Control gives you an opportunity to rectify the issue and hence aids in maintaining the security posture of your AWS resources.\n\nHere's how it might look in markup format:\n\n```markdown\nAWS Control Check: Unrestricted Incoming Traffic\n\nStatus: Failed\n\nDetails:\n- Resource: EC2 instance (i-0abcdef1234567890)\n- Security Group: sg-0abcdef1234567890\n- Current configuration: Allows unrestricted incoming traffic\n- Expected configuration: Only allow incoming traffic on ports 80 and 443\n```\n\nThis provides a visual and clear report about what the control checked for, the result of the check, and the specifics it disclosed during the inspection. This also supports in maintaining robust compliance reporting for cybersecurity audits and frameworks."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ec2_19",
    "Title": "19 Security groups should not allow unrestricted access to ports with high risk",
    "Description": "This control checks whether unrestricted incoming traffic for the security groups is accessible to the specified ports that have the highest risk. This control passes when none of the rules in a security group allow ingress traffic from 0.0.0.0/0 for those ports.",
    "QueryID": "aws_vpc_security_group_restricted_common_ports",
    "DocumentURI": "policies/aws_foundational_security_ec2_19.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "security_group_configuration"
      ],
      "foundational_security_item_id": [
        "ec2_19"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EC2"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control can lead to various costs including:\n\n**1. Security Breach Costs:** With unrestricted access, malicious actors can easily gain access to your systems which could lead to unauthorized data access, data breaches, or downtime. The cost of dealing with a security breach can include not only the financial loss from stolen data, but also substantial costs in terms of system repair, strengthened security measures, and potential fines for non-compliance with data protection regulations.\n\n**2. Regulatory Compliance Penalties:** Many industries, like healthcare and finance, have strict regulatory requirements for data protection. Non-compliance could result in hefty fines, penalties and legal liabilities.\n\n**3. Damaged Reputation:** If your company experiences a security incident due to non-compliance, your company's reputation could take a significant hit. In some cases, this could even lead to a loss of business, negatively affecting your bottom line.\n\n**4. Business Continuity:** Without proper access restrictions in place, critical systems and data could be compromised which could halt business operations. A halt in operations or severe system compromise could result in financial loss or, in severe cases, business closure.\n\nHere's a simple way to markup the above explanation in HTML format:\n\n```html\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003eSecurity Breach Costs:\u003c/strong\u003e With unrestricted access, malicious actors can easily gain access to your systems which could lead to unauthorized data access, data breaches, or downtime. The cost of dealing with a security breach can include not only the financial loss from stolen data, but also substantial costs in terms of system repair, strengthened security measures, and potential fines for non-compliance with data protection regulations.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eRegulatory Compliance Penalties:\u003c/strong\u003e Many industries, like healthcare and finance, have strict regulatory requirements for data protection. Non-compliance could result in hefty fines, penalties and legal liabilities.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eDamaged Reputation:\u003c/strong\u003e If your company experiences a security incident due to non-compliance, your company's reputation could take a significant hit. In some cases, this could even lead to a loss of business, negatively affecting your bottom line.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eBusiness Continuity:\u003c/strong\u003e Without proper access restrictions in place, critical systems and data could be compromised which could halt business operations. A halt in operations or severe system compromise could result in financial loss or, in severe cases, business closure.\u003c/li\u003e\n\u003c/ul\u003e\n```"
      ],
      "x-kaytu-usefulness-example": [
        "For example, assume you have an EC2 instance running a web server with a security group that only needs traffic on ports 80 (HTTP) and 443 (HTTPS) from anywhere (0.0.0.0/0). However, due to a misconfiguration, a rule has been added that allows all incoming traffic to port 22 (SSH) from anywhere.\n\nThis is a risky configuration because it exposes your server to potential SSH brute force attacks from any IP address. The AWS Control would monitor for such misconfigurations and alert when found, thus enabling the user to promptly rectify the issue and ensure the security of the server.\n\n```\n- Resource: AWS::EC2::SecurityGroup\n  Filters:\n    - Property: IpPermission.IpProtocol\n      Value: '-1'\n    - Or:\n      - Property: IpPermission.IpRanges\n        Value: '0.0.0.0/0'\n      - Property: IpPermission.IPv6Ranges\n        Value: '::/0'\n  Rationale: \"Open to the world security groups have a potential to make your system vulnerable. Monitoring and taking necessary precautions should be a priority.\"\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elb_1",
    "Title": "1 Application Load Balancer should be configured to redirect all HTTP requests to HTTPS",
    "Description": "This control checks whether HTTP to HTTPS redirection is configured on all HTTP listeners of Application Load Balancers. The control fails if any of the HTTP listeners of Application Load Balancers do not have HTTP to HTTPS redirection configured.",
    "QueryID": "aws_elb_application_lb_redirect_http_request_to_https",
    "DocumentURI": "policies/aws_foundational_security_elb_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_item_id": [
        "elb_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ELB"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control can potentially result in the following:\n\n1. **Security Risks:** Without HTTP to HTTPS redirection, sensitive data (e.g. usernames, passwords, credit card numbers) transmitted between the user's browser and the server is not encrypted and can be easily intercepted by attackers on the web. This lack of encryption is especially risky when your application requires the transmission of sensitive data. \n\n2. **Privacy Breaches:** Unencrypted data transmission between the user's browser and the server can lead to opportunistic privacy invasions. Information such as the contents of the user's requests, responses from your servers, cookies and other headers, is open to inspection by anyone who can capture the traffic.\n\n3. **Loss of Customer Trust:** Organizations that do not protect their users' data by enforcing HTTPS can lose their credibility and trust from users or customers. In worst case scenarios, this could result in loss of business.\n\n4. **Non-Compliance Penalties:** If your organization operates in an industry or location where there are legal or statutory requirements to protect user data (such as the GDPR in the European Union), then failure to enforce HTTPS can lead to substantial financial penalties or other legal consequences.\n\n5. **Negative SEO Impact:** Search engines tend to favor secure websites. Hence, not redirecting HTTP to HTTPS could negatively impact your website's Search Engine Optimization (SEO), potentially leading to lower traffic and loss of business.\n\n6. **Potential AWS Service Interruptions:** AWS periodically conducts checks to ensure compliance with their services. If non-compliance with this control is detected, AWS may take actions such as sending notifications, restricting certain features, or even suspending the service until the issue is rectified. This could disrupt your business operations.  \n\nIn conclusion, non-compliance to this AWS Control can expose your organization to several risks and costs, primarily around data security, privacy, reputation, legal consequences, and potential Service interruptions. Therefore, it's recommended to always enforce HTTP to HTTPS redirection, to help ensure the security and privacy of your users' data, improve SEO, and maintain compliance with AWS and regulatory requirements."
      ],
      "x-kaytu-usefulness-example": [
        "For example, suppose you are running an e-commerce business. You have a web application hosted on AWS and use an Application Load Balancer to distribute incoming application traffic across multiple targets, such as EC2 instances.\n\nYour application involves handling sensitive client information including credit/debit card details, addresses, and personal data. This sensitive data needs to be protected from eavesdropping or interception during transmission over the Internet. \n\nOne of the techniques employed is to use HTTPS (HTTP Secure), a protocol for secure communication over a computer network which is widely used on the Internet. HTTPS consists of communication over Hypertext Transfer Protocol (HTTP) within a connection encrypted by Transport Layer Security (TLS).\n\nThis is where this control comes into action. This control ensures that even if any request is initiated as HTTP, it is redirected to HTTPS for secure communication. If the HTTP listener of Application Load Balancers is not configured to automatically redirect to HTTPS, the control fails.\n\nThis configuration is especially important to pass various security audits and compliance checks. It can prevent potential breaches and maintains the security and privacy of your customer's sensitive information. \n\n`Example Instance in Markup Format:`\n```yaml\nResources:\n  MyLoadBalancer:\n    Type: \"AWS::ElasticLoadBalancingV2::LoadBalancer\"\n    Properties:\n      ...\n      DefaultActions:\n        - Type: redirect\n          RedirectConfig:\n            Protocol: HTTPS\n            Port: 443\n            StatusCode: HTTP_301\n```\nIn this example, any HTTP request to the load balancer is redirected to HTTPS using HTTP status code 301 (permanent redirect). The YAML file shows the configuration for the LoadBalancer resource that ensures the HTTP to HTTPS redirection is set up."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elb_2",
    "Title": "2 Classic Load Balancers with SSL/HTTPS listeners should use a certificate provided by AWS Certificate Manager",
    "Description": "This control checks whether the Classic Load Balancer uses HTTPS/SSL certificates provided by AWS Certificate Manager (ACM). The control fails if the Classic Load Balancer configured with HTTPS/SSL listener does not use a certificate provided by ACM.",
    "QueryID": "aws_elb_classic_lb_use_ssl_certificate",
    "DocumentURI": "policies/aws_foundational_security_elb_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transit"
      ],
      "foundational_security_item_id": [
        "elb_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ELB"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this control may incur various financial, reputational, and technical costs.\n\n1. **Financial Costs:** Non-compliance may lead to financial penalties imposed by regulatory authorities or even a data breach that can result in financial losses. Since AWS Certificate Manager (ACM) manages certificates' renewals automatically, if you are using a third-party service, it may potentially lead to additional costs.\n\n2. **Reputational Costs:** Non-use of certificates provided by ACM may mean the use of less reliable certificates and could expose your organization to security threats such as data breaches. Data breaches could damage your organization's reputation and lead to customer loss.\n\n3. **Technical Costs:** Failure to use ACM certificates can lead to technical problems such as browser warnings or errors for your customers. These could cause customer frustration and loss of business. If you are not using ACM, automated certificate renewal processes may not be in place, resulting in expired certificates and interrupted service due to improper encryption.\n\n4. **Compliance Cost:** If your organization is subject to regulations that require certain levels of data security, this violation could risk your compliance status. The cost of non-compliance could be much higher than the cost of becoming compliant, including penalties and future compliance auditing expenses.\n\n5. **Remediation Costs:** In case of a security incident due to a subpar certificate, the cost of addressing the incident, implementing additional security measures, and potentially enhancing your infrastructure security landscape can have significant costs.\n\nRemember, employing secure HTTPS/SSL connections are crucial in assuring the communication between your customers and your business is secure. It not only helps you avoid unnecessary costs but can also instill trust within your customer base."
      ],
      "x-kaytu-usefulness-example": [
        "```markdown\nExample:\n\nConsider an online shopping website 'ShopNow' that handles a high volume of user traffic and sensitive information including customer personal details and credit card information. The website uses AWS Classic Load Balancer to distribute incoming application traffic across multiple Amazon EC2 instances for efficient handling of requests.\n\nIn this case, the AWS control that checks whether the Classic Load Balancer uses HTTPS/SSL certificates provided by AWS Certificate Manager (ACM) becomes extremely crucial to ensure highly secure, end-to-end encrypted connections for the traffic between the load balancer and the clients accessing the website. \n\nIf 'ShopNow' did not use an HTTPS/SSL certificate from ACM for the Classic Load Balancer, the control would fail, alarming the organization about a lack of necessary security measure. Not only would this ensure encryption and protect sensitive information, but it also helps in establishing trust with customers, as a secure connection is typically expected by users for e-commerce platforms.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elb_3",
    "Title": "3 Classic Load Balancer listeners should be configured with HTTPS or TLS termination",
    "Description": "This control checks whether your Classic Load Balancer listeners are configured with HTTPS or TLS protocol for front-end (client to load balancer) connections. The control is applicable if a Classic Load Balancer has listeners. If your Classic Load Balancer does not have a listener configured, then the control does not report any findings. The control passes if the Classic Load Balancer listeners are configured with TLS or HTTPS for front-end connections. The control fails if the listener is not configured with TLS or HTTPS for front-end connections.",
    "QueryID": "aws_elb_classic_lb_use_tls_https_listeners",
    "DocumentURI": "policies/aws_foundational_security_elb_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transit"
      ],
      "foundational_security_item_id": [
        "elb_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ELB"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can be categorized into two main areas: security and potential financial implications.\n\n# Security Implications\n\nUsing unencrypted protocols for front-end connections exposes your network traffic to potential interception and data breach. If this traffic contains sensitive data like user credentials or confidential business data, attackers can leverage this vulnerability leading to:\n\n- **Data Breaches**: Unencrypted requests can lead to user's data being exposed to unauthorized entities leading to infringement of privacy and potential misuse.\n- **Loss of Integrity**: External entities may intercept and modify unencrypted data, introducing potentially harmful data into your systems.\n- **Non-Compliance Penalties and Reputational Damage**: If your business has compliance obligations (like GDPR, HIPAA, PCI-DSS etc.), non-compliance could lead to financial penalties, possible legal ramifications and reputational damage.\n\n# Financial Implications\n\n- **Data Breach Responding Cost**: Responding to data breaches can be costly. This includes the cost of investigating the breach, data recovery costs, potential payouts to affected clients, possible legal fees, among other costs.\n- **Loss of Business Opportunities**: Data breaches can lead to a loss in customers' faith, resulting in loss of business.\n- **Fines**: As mentioned above, insecure data transmission can potentially violate compliance requirements resulting in hefty fines.\n\n# Bottom Line\n\nIn conclusion, the cost of non-compliance to this AWS control could range from a reputational damage to financial losses. Thus, encrypting front-end connections of a Classic Load Balancer is not just a best practice but an essential aspect for maintaining security in AWS environments."
      ],
      "x-kaytu-usefulness-example": [
        "Instance of Usefulness:\n\nAn example of usefulness for this AWS control pertains to e-commerce websites or any online platform that processes sensitive client information (like credit card details etc). Any online business aims to secure its customer data and user experience, and one fundamental aspect of this is ensuring enabled HTTPS or TLS protocol in load balancer listeners.\n\nFor instance, an online store \"Fashion World\" uses AWS Classic Load Balancer to manage its incoming traffic. To secure the client-side data during transit, front-end connections need to be using HTTPS or TLS protocols. By setting up this AWS control, the IT department of \"Fashion World\" would be instantly notified if any listener is not properly configured, thus preventing any potential data breaches. \n\nTherefore, the AWS control would ensure an optimal level of security by automatically verifying that the Load Balancer listeners meet the security standards required, offering peace of mind to the business and its customers."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elb_4",
    "Title": "4 Application load balancers should be configured to drop HTTP headers",
    "Description": "This control evaluates AWS Application Load Balancers (ALB) to ensure they are configured to drop invalid HTTP headers. The control fails if the value of routing.http.drop_invalid_header_fields.enabled is set to false. By default, ALBs are not configured to drop invalid HTTP header values. Removing these header values prevents HTTP desync attacks.",
    "QueryID": "aws_elb_application_lb_drop_http_headers",
    "DocumentURI": "policies/aws_foundational_security_elb_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "network_security"
      ],
      "foundational_security_item_id": [
        "elb_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ELB"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS Control that assesses if AWS Application Load Balancers (ALB) are configured to discard invalid HTTP headers can lead to several risks, including:\n\n- **Security Vulnerabilities:** Invalid HTTP headers can be used a part of HTTP Desync Attacks which can compromise your system's security. Lack of compliance can expose your system to Cyber Criminals who might       exploit these loopholes to initiate various cyber-attacks.\n\n- **Data Breaches:** Non-compliance can lead to potential data breaches which might hurt your service's trustworthiness, leading to both financial and reputational damage.\n\n- **Inconsistent Traffic Management:** As load balancers play an essential role in managing and routing traffic, invalid header fields can disrupt traffic flow leading to inconsistent user experiences.\n\n- **Regulatory Penalties:** If your organization falls under certain regulations or standards such as GDPR or PCI-DSS, non-compliance to secure header fields handling can lead to violation fines.\n\nIn conclusion, the cost of non-compliance to this AWS control is potentially substantial combining both direct financial losses, reputational damage, and potential regulatory infringements. Hence ensuring that `routing.http.drop_invalid_header_fields.enabled` is set to `true` is crucial."
      ],
      "x-kaytu-usefulness-example": [
        "```markdown\nScenario: An eCommerce company is running an online store application across multiple AWS EC2 instances and is using an AWS Application Load Balancer (ALB) to balance the traffic between these instances.\n\nProblem: The company's security auditors have detected several potential http desync attack attempts on their application. They recommend that the company strengthen their security measures by configuring the ALB to drop invalid HTTP headers.\n\nSolution: The company adopts AWS Control's feature to evaluate if ALBs are configured to drop invalid HTTP headers. They carefully set the value of `routing.http.drop_invalid_header_fields.enabled` to true for their ALB configuration, thus enabling the ALB to disallow invalid header fields and rejecting was harmful or malformed requests that could lead to http desync attacks. \n\nResult: With the help of this AWS control, the eCommerce company is able to significantly reduce the risk of HTTP desync attacks. The online store benefits from increased security, stability, and customer trust.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elb_5",
    "Title": "5 Application and Classic Load Balancers logging should be enabled",
    "Description": "This control checks whether the Application Load Balancer and the Classic Load Balancer have logging enabled. The control fails if access_logs.s3.enabled is false.",
    "QueryID": "aws_elb_application_classic_lb_logging_enabled",
    "DocumentURI": "policies/aws_foundational_security_elb_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "elb_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ELB"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can be very significant due to several possibilities including:\n\n1. **Nested Security Risks**: Without access logs, it becomes virtually impossible to track user activity and response times, which can lead to potential security risks and low performance. If there's a breach or attempted unauthorized access, the lack of logs could make it difficult to understand the sequence of actions carried out, making it cumbersome, if not impossible to patch the security loophole.\n\n2. **Troubleshooting Difficulty**: When it comes to diagnosing, isolating, and resolving system or application errors, access logs are invaluable. Without them, the troubleshooting process can become a nightmare, potentially leading to system downtimes, and consequently, impacting business continuity.\n\n3. **Noncompliance with Regulatory Standards**: Especially in regulated industries (like healthcare, finance, etc.), certain standards require enabling log activities. Non-compliance could result in fines and other regulatory actions, and could pose reputational risks. For instance, standards like HIPAA, PCI DSS, and GDPR insist on a robust audit trail that includes logging and monitoring activities.\n\n4. **Insufficient Capacity Planning**: Access logs provide essential information for effective capacity planning and predictive analysis. Without them, it might result in inefficient resource distribution, which could lead to poor application performance or unwanted costs.\n\n5. **Cost**: Lastly, turning on access logging after running your resources can consume a significant amount of manual labor, time resources, and auditing capabilities, which incurs unexpected cost."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nConsider a case where an organization uses AWS to run their web applications. The organization experiences high traffic, thus they utilize Application Load Balancer and Classic Load Balancer to distribute incoming traffic across multiple resources to ensure better availability and reliability of their applications.\n\nIn this context, enabling logging for these load balancers is highly critical for the organization to monitor their traffic for anomalies, debug issues, and optimize application performance.\n\nSuppose an unexpected spike in traffic happens, causing performance issues or a crash. Without logging, it would be extremely hard to find the root cause. But if logging is enabled, they can analyze the logs to identify what caused the surge, which host it originated from, what requests were made etc. \n\nFor security reasons as well, logging is crucial. If there's ever a breach or a potential DOS attack, logs will help trace back the attacker and provide a better understanding of the breach.\n\nThe AWS Control which checks whether 'access_logs.s3.enabled' is set to true or not, helps in ensuring that logging is enabled for the load balancers. If it is false, it means logging is not enabled and the control will indicate a fail, highlighting a gap in the security and operational effectiveness of the organization. This prompts the administrators to immediately address this issue and ensure logging is enabled, thereby ensuring the smooth operation and security of their applications."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_iam_1",
    "Title": "1 IAM policies should not allow full '*' administrative privileges",
    "Description": "This control checks whether the default version of IAM policies (also known as customer managed policies) has administrator access that includes a statement with 'Effect': 'Allow' with 'Action': '*' over 'Resource': '*'. The control only checks the customer managed policies that you create. It does not check inline and AWS managed policies.",
    "QueryID": "aws_iam_policy_custom_attached_no_star_star",
    "DocumentURI": "policies/aws_foundational_security_iam_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "iam_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can result in significant risks and costs to your organization.\n\n1. **Potential Security Risks**: Non-compliant IAM policies might potentially allow unauthorized access to your AWS resources, potentially causing data violations, unauthorized data alteration, and deletion of important information. Also, granting '*' permissions to IAM roles or users means they have unrestricted access to all AWS services and resources which is a great security risk.\n\n2. **Regulatory Fines**: If your company operates in a regulated field (healthcare, finance, etc), non-compliance could result in hefty fines and legal penalties.Laws such as GDPR, HIPPA demand that companies secure customer data they handle, and not following the IAM best practices could be seen as violating these laws.\n\n3. **Loss of Customer Trust**: Frequent security lapses and data leaks can cause loses to brand image and loss of customer trust. Once this trust is broken, it is incredibly difficult (and costly) to win back.\n\n4. **Financial Loss**: Data breaches can impose great financial loss in terms of the cost involved in incident response, data recovery or any possible ransom that might have to be paid to the attacker.\n\n5. **Reputational damage**: Data breaches can lead to serious damage to an organization's reputation which can result in the loss of customers and business partners in both the short term and the long term.\n   \nIn summary, the cost of non-compliance to this AWS control can range from security breaches, financial losses, reputational damages and regulatory fines. Therefore, it is highly recommended to comply with the AWS IAM policy standard benchmarks."
      ],
      "x-kaytu-usefulness-example": [
        "An example instance where this AWS control becomes useful is when managing worker roles within your organization. \n\nLet's assume that you're the CTO of a mid-sized company and have recently onboarded a batch of new interns. In order to get them up to speed, you decide to give them hands-on experience working with AWS services you use for your company's application hosted on AWS. However, you also want to ensure the integrity and security of your AWS resources. Granting administrator access to these new interns might risk accidental misconfigurations that could leave the system vulnerable or significantly increase costs.\n\nFor this purpose, you decide to create custom IAM policies (customer managed policies) that provide necessary permissions for the interns to learn and contribute, but without administrational access to all your AWS resources. \n\nBefore applying these new policies to your interns, you can use this AWS control to confirm that these new customer managed policies do not grant administrator access that includes 'Effect': 'Allow' with 'Action': '*' over 'Resource': '*'. This helps you ensure that the new policies provide necessary permissions only and does not inadvertently grant expansive access that you intended to avoid.\n\nBy utilizing this control, you improve your AWS security posture by diligently managing user permissions, reducing risks and maintaining a more secure and efficient AWS environment."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_iam_2",
    "Title": "2 IAM users should not have IAM policies attached",
    "Description": "This control checks that none of your IAM users have policies attached. Instead, IAM users must inherit permissions from IAM groups or roles.",
    "QueryID": "aws_iam_user_no_inline_attached_policies",
    "DocumentURI": "policies/aws_foundational_security_iam_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "iam_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can include:\n\n* **Security Risk**: Directly attaching policies to IAM users may lead to excessive permissions, which could put your resources at serious security risk. An attacker who compromises an overprivileged IAM user could gain access to sensitive data or resources.\n\n* **Inefficient Management**: It can potentially lead to inconsistent permission assignment and inefficient management. If an organization has a significant number of IAM users, managing permissions on an individual level becomes impractical.\n\n* **Increased Operational Cost**: An improperly managed IAM environment can result in additional efforts to redress and unnecessary costs associated with potential breaches or mistakes.\n\n* **Auditing Difficulties**: Directly attaching policies may complicate auditing efforts. It's easier to verify policy compliance of a group or a role than hundreds of individual IAM users.\n\n* **Regulatory Non-compliance**: If your business is subject to industry regulations such as GDPR, HIPAA, etc., non-compliance with AWS Controls could result in hefty fines or sanctions.\n\nBy enforcing this control, businesses can ensure that IAM users only have the minimum required permissions, thus abiding by the principle of least privilege. Besides, it simplifies permission management and auditing, and reduces the likelihood of accidental misconfigurations. It's always recommended to manage permissions at group or role levels to reduce the associated risks and costs."
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider a large organization that has hundreds of AWS IAM users. Managing permissions for each user individually can be a challenging task for the administrators. Moreover, if permissions are attached directly to the users, it can lead to inconsistency and unwanted access to some critical AWS resources, which can potentially pose a security risk.\n\nThis AWS control is useful as it enforces a policy in which IAM users should not have policies attached directly to them. They should instead inherit permissions from IAM groups or roles. This helps in streamlining the permission management process. Permissions can now be controlled at a group level rather than at individual user level, resulting in better control and lesser security risks.\n\nFor instance, instead of giving 'EC2 Full Access' to each user individually, an 'EC2 Administrators' group can be created with 'EC2 Full Access'. Any user who needs this access can be added to this group. If at any point, a user no longer needs this access, they can be simply removed from the group. This is an efficient way to manage access control as compared to updating policies for individual users.\n\nExample:\n```markdown\n# IAM Users No Policy Check\n\nThis control verifies that none of your IAM users have policies attached. Instead, IAM users must inherit permissions from IAM groups or roles. \n\n## Usefulness\nFor organizations managing a large number of IAM users, manually assigning and managing individual permissions can pose a significant challenge and security risk. This control ensures that policies are not directly attached to users, mitigating the risk of unintended access to AWS resources.\n\nFor instance, instead of assigning 'EC2 Full Access' directly to individual users, an 'EC2 Administrators' group can be created with assigned 'EC2 Full Access'. Users requiring access can be added to this IAM group, ensuring streamlined and effective management of access permissions.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elb_6",
    "Title": "6 Application Load Balancer deletion protection should be enabled",
    "Description": "This control checks whether an Application Load Balancer has deletion protection enabled. The control fails if deletion protection is not configured. Enable deletion protection to protect your Application Load Balancer from deletion.",
    "QueryID": "aws_elb_application_lb_deletion_protection_enabled",
    "DocumentURI": "policies/aws_foundational_security_elb_6.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "elb_6"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ELB"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "AWS Application Load Balancer is a robust and critical element in the infrastructure of many businesses running web applications. Its primary role is to distribute incoming application traffic across multiple targets in multiple Availability Zones, thereby increasing the availability of your application.\n\nNon-compliance to deletion protection control can lead to several costly implications:\n\n1. **Data Loss**: If the Application Load Balancer is accidentally or maliciously deleted without any backup, all connected application data might be lost forever.\n\n2. **Application Downtime**: Deleting an Application Load Balancer that's actively serving traffic can lead to immediate and unexpected downtime for your applications.\n\n3. **Recovery Costs**: If the ALB is deleted, it might need to be recreated and reconfigured, which will consume time and resources.\n\n4. **Potential Revenue Loss**: If the Application Load Balancer serves applications that are vital to your business operations, such as e-commerce or customer-facing apps, any downtime can directly result in loss of revenue and customer trust.\n\n5. **Compliance and Legal Consequences**: For businesses operating in regulated industries (like health, finance etc.), loss of vital application data can result in regulatory violations, possible legal actions, penalties, and damage to business reputation.\n\nThus, not enabling deletion protection for an Application Load Balancer could potentially cost a business in terms of data, revenue, compliance, and overall business operations. This highlights the importance of complying with this AWS control to mitigate such risks."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, consider you are running an e-commerce site that uses an Application Load Balancer to evenly distribute incoming traffic to your website. Your team assigns new developers to manage these resources and accidentally, one of them tries to delete your Load Balancer.\n\nIf you have deletion protection enabled, Amazon will prevent the load balancer from being deleted, ensuring that there won't be any disruption in traffic distribution. Your website can continue running smoothly without any unforeseen downtime, which could otherwise result in revenue loss and a negative customer experience. Hence, this control proves to be useful in protecting your key resources from unintentional deletion."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_iam_3",
    "Title": "3 IAM users' access keys should be rotated every 90 days or less",
    "Description": "This control checks whether the active access keys are rotated within 90 days.",
    "QueryID": "aws_iam_user_access_key_age_90",
    "DocumentURI": "policies/aws_foundational_security_iam_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "iam_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control can lead to several potential issues, which can even indirectly cost monetary damage to the company:\n\n1. **Security risk**: Unused and unrotated keys pose a significant threat, as they could be used by malicious actors to gain unauthorized access to your AWS resources. The longer an access key remains active, the higher risk of it being compromised.\n\n2. **Data Breaches**: Breaches can lead to loss of business-critical and sensitive data. Apart from the monetary damage, this could also impact reputation, customer trust, and further lead to regulatory implications.\n\n3. **Regulatory fines**: If the company operates in a regulated industry (like healthcare, finance, etc.), failure to maintain proper key rotation might be in violation of compliance regulations(like HIPAA, PCI-DSS, GDPR, etc.). This can lead to huge financial penalties.\n\n4. **Remediation Costs**: In case of a security breach due to such negligence, the organization would also have to bear additional costs in terms of system repair, further investigations, and implementation of more robust security measures.\n\nTherefore, non-compliance to this AWS control, which checks whether active access keys are rotated within 90 days, can cause serious damage both in terms of security and cost to the organization.\n"
      ],
      "x-kaytu-usefulness-example": [
        "AWS Control \"Rotate access keys every 90 days\" is a security measure to protect your account and resources. This policy helps to prevent unauthorized access to your AWS resources.\n\nExample:\n\nSuppose, you are running a large scale application on AWS with multiple developers and DevOps engineers having access to your AWS resources. There is a chance that access keys might get leaked or compromised over the time through code repositories, logs or phishing attacks.\n\nIn such cases, if you have a policy of rotate access keys every 90 days, even if a key is compromised, it won't be valid for more than 90 days. Thus, limiting the potential damages an attacker could do. \n\n```\nresources:\n  Users:\n    - name: Check Access Key Rotation\n      aws:iam:accessKeysLastUsed\n      filters:\n        - type: value\n          key: 'accessKeysNotRotated'\n          op: lt\n          value: 90\n```\n\nIn the above CloudFormation markup, the control checks the value of 'accessKeysNotRotated' for all the IAM access keys and if the value is less than 90, it raises a flag. This is an excellent way of ensuring your keys are regularly being rotated and thus, securing your AWS resources."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elb_7",
    "Title": "7 Classic Load Balancers should have connection draining enabled",
    "Description": "This control checks whether Classic Load Balancers have connection draining enabled.",
    "QueryID": "aws_ec2_classic_lb_connection_draining_enabled",
    "DocumentURI": "policies/aws_foundational_security_elb_7.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resilience"
      ],
      "foundational_security_item_id": [
        "elb_7"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ELB"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control could lead to several potential costs and issues such as:\n\n1. **Disruption in Service**: Disabling connection draining can cause abrupt termination of connections when deregistering instances or when backend instances fail, possibly causing disruptions in service.\n\n2. **Data Loss**: Due to the sudden termination of connections, it can also lead to potential loss of data which was in transit, raising data integrity issues.\n\n3. **Impaired Performance and Increased Errors**: It can cause an increase in terminated connections that can potentially impair application performance and increase HTTP errors for end-users which ultimately impacts user experience.\n\n4. **Increased Operational Costs**: Resolving the aforementioned issues, recovering lost data, reestablishing abruptly closed connections, or troubleshooting performance issues could add to your operational costs.\n\n5. **Non-compliance Penalties**: If this control is a part of a legal or contractual requirement, non-compliance can lead to penalties or fines.   \n\n6. **Ruined Reputation**: Disruption in service or data loss could ruin your organization's reputation which could indirectly lead to a loss in business and increased customer churn rate. \n\nTherefore, it's essential to ensure Classic Load Balancers have connection draining enabled to provide seamless, trouble-free service to your end-users."
      ],
      "x-kaytu-usefulness-example": [
        "The following is an instance where the AWS control for checking whether `Classic Load Balancers` have connection draining enabled can be significantly useful:\n\n```\nLet's assume a scenario where a tech company, TechX, manages multiple highly-trafficked websites. They rely on AWS' Elastic Load Balancing (ELB) services to distribute incoming application or network traffic across multiple targets to ensure efficient handling of workload.\n\nIn such a high-load scenario, it is possible that some requests might get lost or dropped during a deregistration or system failure event. These failures can degrade the user experience, or lead to temporary unavailability of websites or services which can damage TechX's reputation and even result in financial loss.\n\nTo safeguard against this, TechX uses 'connection draining', a feature provided by AWS Classic Load Balancer. Connection draining causes the load balancer to stop sending new requests to the backend instances when they are deregistering or unhealthy, while still ensuring that in-flight requests are completed.\n\nIn order to make sure this feature is always enabled, TechX uses the AWS control that checks whether connection draining is activated on all Classic Load Balancers. This control helps TechX ensure the smooth functioning of their web services by enabling active management of deregistering instances and reducing the likelihood of abrupt termination of requests, thereby delivering a seamless user experience for their customers.\n```\n\nThis example demonstrates how this AWS control is useful in maintaining consistent performance and availability of services. It is particularly beneficial for businesses that rely heavily on high-load web services."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ecr_1",
    "Title": "1 ECR private repositories should have image scanning configured",
    "Description": "This control checks whether a private ECR repository has image scanning configured. This control fails if a private ECR repository doesn't have image scanning configured.",
    "QueryID": "aws_ecr_repository_image_scan_on_push_enabled",
    "DocumentURI": "policies/aws_foundational_security_ecr_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "vulnerability_patch_and_version_management"
      ],
      "foundational_security_item_id": [
        "ecr_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ECR"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS Control may result in the potential risks and costs:\n\n1. **Security Risk**: Without image scanning configuration on private ECR repositories, undetected vulnerabilities in your container images may exist. This can lead to potential security risks that attackers can exploit to gain unlawful access to your data or perform malicious activities.\n\n2. **Operational Risk**: Failure to identify vulnerabilities could lead to operational failures. These could range from applications not functioning as expected to critical issues like system outages.\n\n3. **Financial Cost**: If a security breach occurs due to a vulnerability that was not detected, you could incur significant financial losses. This could be from the cost of incident response, forensics, or from financial penalties and lawsuits in the event of sensitive data being compromised.\n\n4. **Reputation Cost**: If a breach does occur and it becomes public knowledge, your organization could suffer reputational damage. This could impact customer trust and result in lost business.\n\n5. **Regulatory Non-compliance**: If your business is required to adhere to certain regulatory standards, failure to properly secure your environments may result in non-compliance fines or penalties.\n\nTo avoid these potential risks and costs, it's crucial to ensure that private ECR repositories have image scanning configured. This can help in identifying and addressing vulnerabilities before they can be exploited by malicious actors."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nJohn Smith is the lead developer for a tech company. This company utilizes AWS services, including the Elastic Container Registry (ECR), to manage their Docker container images. To ensure the security of their applications, they need to regularly scan their container images for software vulnerabilities.\n\nAWS offers an image scanning feature for ECR. However, John Smith needs a way to make sure all private ECR repositories have image scanning enabled. This is where the AWS control checking whether private ECR repositories have image scanning configured becomes useful.\n\nFor instance, one of his teams forgot to enable image scanning for their newly created repository. The control caught this lax and flagged it as a failure. The team was then able to go back and enable image scanning, ensuring that they are constantly checking for and addressing any possible vulnerabilities. Thus, John Smith could ensure a routine and automatic check for any repositories that might have been unintentionally overlooked when configuring image scanning.\n\n```\nResource 'aws_ecr_repository' 'example' {\n  name                 = 'bar'\n  image_tag_mutability = 'MUTABLE'\n\n  image_scanning_configuration {\n    scan_on_push = true\n  }\n}\n```\n\nThe above instance assures that image vulnerabilities will be scanned on every new image push to the ECR repository. This way, an extra layer of security is added to make sure the applications running in these containers are free from known issues. This provides leverage to the continuous deployment (CI/DC) pipelines and decreased instances of security breaches."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_iam_4",
    "Title": "4 IAM root user access key should not exist",
    "Description": "This control checks whether the root user access key is present. The root account is the most privileged user in an AWS account. AWS access keys provide programmatic access to a given account.",
    "QueryID": "aws_iam_root_user_no_access_keys",
    "DocumentURI": "policies/aws_foundational_security_iam_4.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "iam_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can be quite high and include the following:\n\n1. **Security Risk**: The biggest cost is the security risk that arises due to potential misuse of the root user access key. With root user access key, an attacker would have full access to all of your resources on AWS, potentially allowing them to steal data, shutdown services, or leverage your resources for their own use.\n\n2. **Financial Loss**: An attacker with access to the root user access key can spin up the largest, most expensive services leading to high costs on your AWS bill.\n\n3. **Data Loss**: If an attacker gains root access, they could potentially delete vital data or configurations.\n\n4. **Damage to Reputation**: If your AWS account is compromised and it negatively affects your clients or customers, this can cause irreparable damage to your company's reputation.\n\n5. **Regulatory Fines**: If your business operates in a regulated industry (like healthcare or finance), non-compliance can result in significant fines.\n\nTo prevent these costs, AWS recommends securing your root user access key following best practices such as not using the root account for day-to-day tasks, enabling MFA on your root account, and routinely rotating access keys."
      ],
      "x-kaytu-usefulness-example": [
        "An example of where this AWS control could be useful is in the management of a business's cloud infrastructure. \n\nLet's assume that an online retail company is using AWS for their database management and storage solutions. The company has a dedicated team of engineers who look after the organization's cloud infrastructure, making sure the databases are running smoothly, the storage is reliable, and the backups are being done in a timely manner. \n\nIt's important for this team to make sure that the root user access key of their AWS account is not present or being used, because if it falls into the wrong hands, that person would have ultimate control over that account, potentially leading to data leakage, system breakdown, or even a complete business disruption. \n\nBy regularly checking the root access key, the company ensures that their system remains secure and only authorized personnel have the required access to the AWS account. \n\nFurther, the company may have automated processes that need programmatic access to AWS services. These processes should use individual IAM user access keys rather than the root access keys to maintain security. \n\nSo, the usage of such control could look like:\n\n```\nCompany X performed an access review and identified that root user access keys were present. Using the AWS IAM control, they were able to swiftly delete the root access keys and avoid potential security threats. Now, they continue to monitor and enforce the absence of root access keys to maintain high levels of security.\n```\n\nThis control therefore helps in maintaining the security and integrity of the AWS account belonging to the company, thereby contributing to the overall cybersecurity posture of the organization."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_iam_5",
    "Title": "5 MFA should be enabled for all IAM users that have a console password",
    "Description": "This control checks whether AWS multi-factor authentication (MFA) is enabled for all IAM users that use a console password.",
    "QueryID": "aws_iam_user_console_access_mfa_enabled",
    "DocumentURI": "policies/aws_foundational_security_iam_5.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "iam_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can have significant impact on both financial aspects and also the credibility and performance of the operations. Here are few potential risks and costs associated with not implementing this control:\n\n1. **Security Breach:** Without MFA, it's much easier for malicious actors to gain access to your AWS accounts. If they successfully breach your security, the bad actors could potentially access sensitive data, alter your infrastructure, or perform other malicious activities.\n\n2. **Financial Charges:** If a data breach occurs and unauthorized individuals gain access to your account, they could spin up high powered, and therefore high-cost, instances for cryptocurrency mining or other nefarious purposes. This could quickly lead to significant unexpected charges.\n\n3. **Data Loss:** In the event of a security breach, the intruder could delete or manipulate critical data within the compromised account, leading to potential data loss.\n\n4. **Compliance Fines:** If you're subject to a regulatory body that requires certain security measures, like MFA, you could face hefty fines and repercussions for non-compliance. \n\n5. **Brand Reputation**: After a security incident, there's often loss of trust from customers which could harm your brand reputation and, in the worst case, could end up losing clients.\n\n6. **Operational Cost**: After a security breach, you will need to spend resources (time, people, and money) on investigating the breach, recovering lost data or rebuilding the broken system, and strengthening the security measures.\n\nTo avoid these potential costs, ensure MFA is enabled for all IAM users that use a console password. It's a simple step that greatly enhances the security of your AWS environment."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nAlice is a System Admin in a company that heavily relies on Amazon Web Services for their business operations. All the teams in the company, from tech to HR, access AWS to perform different functions. In order to protect the AWS resources like EC2 instances, customer data in S3 buckets, or sensitive documents saved on their AWS accounts, Alice makes sure to enable AWS multi-factor authentication (MFA) for all IAM users that use a console password. \n\nBy implementing this control, Alice further secures these resources by requiring all users to not only input their username and password, but also respond to a second method of authentication, the MFA challenge. This protects critical data and resources even in case someone's password gets compromised.\n\nAlice uses the AWS control that checks if MFA is enabled for all IAM users with a console password to verify that all users have MFA enabled. If the control returns any users who don’t have MFA enabled, Alice can promptly set up MFA devices for these users or train them on how to set it up themselves, therefore strengthening their security posture."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ecs_1",
    "Title": "1 Amazon ECS task definitions should have secure networking modes and user definitions",
    "Description": "This control checks whether an Amazon ECS task definition that has host networking mode also has 'privileged' or 'user' container definitions. The control fails for task definitions that have host network mode and container definitions where privileged=false or is empty and user=root or is empty.",
    "QueryID": "aws_ecs_task_definition_user_for_host_mode_check",
    "DocumentURI": "policies/aws_foundational_security_ecs_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "ecs_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ECS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control can lead to increased security vulnerabilities and potential financial and operational costs. \n\n## Security Vulnerabilities\n\n1. **Privileged Control:** If the \"privileged\" attribute is set to 'false' or left empty, it means that the containers do not have full access to all the devices on the host, which can limit their capabilities, indicating a potential security vulnerability. \n\n2. **Root User:** Similarly, if the 'user' attribute is set to 'root' or left empty, it means that the ECS tasks are running with root permissions. This can lead to situations where malicious attacks can have a higher impact, as they can potentially gain access to the root user.\n\nFor both cases, the task would have essentially unfettered access to the host machine's resources, potentially allowing a compromise of the task to escalate into a compromise of the underlying host.\n\n## Financial Costs:\nNon-compliance can lead to direct financial impacts as well. This might be through fines or penalties imposed for not following industry standards or regulations. In the most extreme case, if a security vulnerability were to be exploited, it could lead to a data breach. The cost of a data breach can be significant, including both the direct costs of remediation and indirect costs such as reputation damage and lost business.\n\n## Operational Effects:\nNon-compliance might impact the efficiency and effectiveness of the operations performed by the ECS tasks. If tasks don't have the necessary privileges or are running as the wrong user, they may not be able to perform their intended operations, leading to operational failures. \n\nTherefore, to reduce such vulnerabilities and potential costs, it is recommended to properly set the 'privileged' and 'user' attributes in the Amazon ECS task definition. A 'privileged' attribute should be set to 'true' to enable full access to the host's resources, and a 'user' attribute should be set to a non-root user to minimize the potential impact of breaches."
      ],
      "x-kaytu-usefulness-example": [
        "Amazon ECS task definitions with host networking mode share the network stack with the host instance, which provides them high networking performance and useful features, like the ability to establish local DNS servers for service discovery. However, this means that if a task has privileged permissions or is running as root, it gets unnecessary permissions on the host instance which pose a security risk. \n\nFor instance, consider a company using host networking mode for their ECS task definitions, with a service that needs to handle sensitive customer data. If this service is compromised and has privileged permissions or is running as root, the attacker would gain full access to the entire host, being able to access or alter other services or data running on the same host. \n\nThis AWS Control is extremely useful in such a case. It will ensure that no Amazon ECS task definitions that have host network mode are running with 'privileged' permissions or as 'root', thereby reducing the potential attack surface and providing an added layer of security. \n\nFor cloud administrators and DevOps engineers, this control allows them to have confidence in the security of the instances that they are managing, comply with best practices for least privilege, and align with various industry security regulations and standards. \n\n```markdown\nExample:\n- AWS Control: Check ECS task definitions for 'privileged' or 'root' permissions. \n- Scenario: A company using AWS ECS to manage their containers with host network mode for high performance. \n- Usefulness: Ensures that no task with potential security vulnerabilities is given unnecessary access to the host instance. Helps to prevent potential attacks and data breaches, ensuring the company's services and customer data remains secure.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ecr_2",
    "Title": "2 ECR private repositories should have tag immutability configured",
    "Description": "This control checks whether a private ECR repository has tag immutability enabled. This control fails if a private ECR repository has tag immutability disabled. This rule passes if tag immutability is enabled and has the value IMMUTABLE.",
    "QueryID": "aws_ecr_repository_tag_immutability_enabled",
    "DocumentURI": "policies/aws_foundational_security_ecr_2.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "tagging"
      ],
      "foundational_security_item_id": [
        "ecr_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ECR"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Tag immutability in a private Amazon Elastic Container Registry (ECR) ensures that image tags cannot be overwritten or deleted, making it easier to track and control the usage of different versions of containers in your deployments. \n\nThe cost of non-compliance to this control includes:\n\n1. **Risk of an Accidental Update or Deletion of Container Images**: Without tag immutability, a team member could accidentally overwrite or delete a crucial container image by re-using its image tag. Such accidental errors could lead to disruptions in deployments, and depending on the extent, potentially significant service downtime.\n\n2. **Difficulty in Audit and Version Control**: Tag immutability enhances auditability by ensuring that each tag directly correlates to a single point in time or version of an image, allowing for better version control and history tracing. Without it, accurate auditing and version tracking becomes challenging.\n\n3. **Increased Vulnerability to Attacks**: If an attacker gains access to your AWS account credentials, they could exploit the lack of tag immutability to replace existing container images with malicious ones, leading to potential security breaches.\n\n4. **Potential Compliance Violations**: For organizations under strict regulatory environments, the lack of tag immutability could directly lead to compliance violations as auditors may view the overwriting or deleting of image tags as a failure to maintain a secure and auditable application environment.\n\n5. **Increased Operational Overhead**: Tracking different versions of images and resolving issues created due to overwritten or deleted tags may lead to increased operational effort and costs.\n\nTo avoid these potential costs and risks, it's best to abide by the control and keep tag immutability ENABLED in private ECR repositories."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nCompany XYZ is a software company that uses AWS ECR as its main cloud-based container registry. The developers in the company frequently push new Docker images to this repository.\n\nHowever, company policy states that once a tag is assigned to a docker image (Ex. Production V1.0, Testing V2.1 etc.), it should not be overwritten by updated docker revisions to avoid confusion and accidental deletion or overwriting. They needed a system that ensures all tags are immutable hence aligning with the company policy.\n\nTherefore, they enable tag immutability in the ECR which ensures that once a docker image tag is created, it cannot be overwritten by any subsequent image pushes. A separate and distinct tag is required for every new push to avoid tampering with any previously tagged image revisions.\n\nThe AWS control that checks whether a private ECR repository has tag immutability enabled is immensely useful to Company XYZ. This control helps them ensure adherence to the company policy, thereby preventing accidental overwrites or deletion, and maintaining organization and clarity among their numerous docker images across multiple ECR repositories. \n\nThe compliance team of the company regularly uses this control to audit their ECR repositories, this control fails if tag immutability is disabled thus making it easy for the team to identify and rectify non-compliant repositories. Hence, AWS control serves as a means of proactive compliance monitoring for the company."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elb_9",
    "Title": "9 Classic Load Balancers should have cross-zone load balancing enabled",
    "Description": "This control checks if cross-zone load balancing is enabled for the Classic Load Balancers (CLBs). This control fails if cross-zone load balancing is not enabled for a CLB.",
    "QueryID": "aws_elb_classic_lb_cross_zone_load_balancing_enabled",
    "DocumentURI": "policies/aws_foundational_security_elb_9.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "elb_9"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ELB"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance with this AWS control can be explained in both the technical and financial perspectives.\n\n## Technical Cost\n\nNon-compliance with this control primarily exposes operations to unnecessary risks and limitations:\n\n1. **Increased Latency**\n    - If cross-zone load balancing is not enabled, all requests will be directed to instances in the same Availability Zone (AZ) as the Classic Load Balancer. This could lead to increased latency and lower operational efficiency if certain AZs are more congested than others.\n\n2. **Uneven Distribution of Requests**\n    - Without cross-zone load balancing, all requests in an AZ will route to instances within the same AZ. If the instances are not evenly distributed across AZs, it could lead to an uneven distribution of the load, potentially overloading some instances while others remain underutilized.\n\n3. **High Availability Risks**\n    - Load balancing across multiple AZs is a key factor in building high availability architectures. Without cross-zone load balancing, the service would be more vulnerable to potential interruptions in the event of an AZ-level outage.\n\n## Financial Cost\n\nThe financial cost can be viewed from two main perspectives:\n\n1. **Potential Increase in Operational Costs**\n    - If traffic is not distributed evenly across instances due to the lack of cross-zone load balancing, it could lead to the need for additional or larger instances in certain AZs to handle the added load, thus driving up costs.\n\n2. **Loss of Revenue**\n    - In addition, the increased latency and potential service interruptions resulting from non-compliance could negatively impact the user experience, potentially resulting in lost customers and revenue.\n\nTherefore, compliance with this control is essential for efficient, cost-effective, and reliable operations."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nConsider a scenario where a global content streaming platform deploys web servers across different AWS Availability Zones in a region to ensure customer requests are served even if one zone fails. Here Classic Load Balancers are used to distribute incoming application traffic across their deployed Amazon EC2 instances for optimal performance.\n\nHowever, if cross-zone load balancing is not enabled for these Classic Load Balancers, incoming traffic will be unequally distributed, causing a distinct imbalance in the load across zones. This might result in specific Availability Zones running at high load while others are still underutilized, causing a decrease in efficiency and risks server overload.\n\nTherefore, having a control to check if cross-zone load balancing is enabled becomes particularly integral to ensure efficient resource utilization and continuous availability of services across all targeted Availability Zones. If the control fails, the streaming platform can take immediate action to rectify the issue and attain optimal load balancing."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ecr_3",
    "Title": "3 ECR repositories should have at least one lifecycle policy configured",
    "Description": "This control checks whether an Amazon ECR repository has at least one lifecycle policy configured. This control fails if an ECR repository does not have any lifecycle policies configured.",
    "QueryID": "aws_ecr_repository_lifecycle_policy_configured",
    "DocumentURI": "policies/aws_foundational_security_ecr_3.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_configuration"
      ],
      "foundational_security_item_id": [
        "ecr_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ECR"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control could have potential costs:\n\n1. **Increased Costs**:\n    If a lifecycle policy isn't configured, you may end up retaining unnecessary images or old and unused versions of the application. This takes up storage and hence costs you money, which could be avoided.\n\n2. **Operational Inefficiency**:\n   Without these policies, older and unused versions of different images would remain and accumulate over time. Regularly cleaning up these images manually could lead to a significant use of resources and time.\n\n3. **Security Risks**:\n   Unwanted or outdated images may pose a security risk if they have known vulnerabilities, and cyber attackers could potentially exploit these vulnerabilities.\n\n4. **Storage Limits**:\n   Amazon ECR has per-region service quotas. If you do not delete unused image versions, you might hit these storage limits, which could limit your ability to deploy new versions and thus impact business continuity.\n\nTo summarize, non-compliance with this control could lead to an increase in costs, operational inefficiencies, potential security risks, and could potentially hinder business continuity."
      ],
      "x-kaytu-usefulness-example": [
        "This AWS control would be useful in an instance where an organization maintains a large number of Docker images on Amazon ECR for their various applications. Over time, old versions of images may no longer be necessary and might just consume storage space, leading to unnecessary costs. A lifecycle policy can be used to automate the clean up of these old Docker images. \n\nFor example:\n\n ```\n{\n   \"rules\": [\n      {\n         \"rulePriority\": 1,\n         \"description\": \"Expire images older than 14 days\",\n         \"selection\": {\n            \"tagStatus\": \"untagged\",\n            \"countType\": \"sinceImagePushed\",\n            \"countNumber\": 14,\n            \"countUnit\": \"days\"\n         },\n         \"action\": {\n            \"type\": \"expire\"\n         }\n      }\n   ]\n}\n```\n\nIn this instance, the lifecycle policy is set to expire any untagged images that were pushed more than 14 days ago. This can help to keep the repository clean and organized, while also saving on storage costs. By running this control, the organization can ensure that all ECR repositories are adhering to best practices for resource management."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ecs_2",
    "Title": "2 Amazon ECS services should not have public IP addresses assigned to them automatically",
    "Description": "This control checks whether Amazon ECS services are configured to automatically assign public IP addresses. This control fails if AssignPublicIP is ENABLED. This control passes if AssignPublicIP is DISABLED.",
    "QueryID": "aws_ecs_service_not_publicly_accessible",
    "DocumentURI": "policies/aws_foundational_security_ecs_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resources_not_publicly_accessible"
      ],
      "foundational_security_item_id": [
        "ecs_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ECS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can largely be categorized into three main areas - security, cost, and efficiency.\n\n- Security: When `AssignPublicIP` is `ENABLED`, your Amazon ECS services are directly exposed to the internet, which increases the vulnerability to attacks. If your services are compromised, it could lead to data breaches, unauthorized access to sensitive data, and potentially reputational damage to your business.\n\n- Cost: If your Amazon ECS services are exposed to the internet, it may result in unnecessary data transfer costs. When services communicate over the internet, AWS data transfer rates apply. Therefore, it might add to your AWS data transfer bill incrementally.\n\n- Efficiency: By not adhering to this control, your services might have unnecessary exposure to the internet. This could potentially throttle the network performance overall, reducing the efficiency of your services. Additionally, it might also add to the administrative overhead, as this will require you to spend extra time managing network access control lists and firewall rules for protection.\n\nTo sum up, non-compliance with the AWS control that requires disabling of automatic assignment of public IP addresses to Amazon ECS services can pose security risks, increase costs, and reduce efficiency. \n\nAdhering to this control not only helps in protecting your services but also in managing your AWS resource usage cost-effectively, and ensuring the optimal performance of your services."
      ],
      "x-kaytu-usefulness-example": [
        "Here's an example instance of this AWS control and why it could be useful:\n\nConsider a company that deploys services on Amazon ECS and has strict security settings to prevent data leakage. They need to ensure that all their services are not reachable from the internet and only accessible within their private network. In this case, they are using security groups and network access control lists (NACLs) to enforce these security policies.\n\nHowever, if an Amazon ECS service is configured to automatically assign public IP addresses, it could potentially bypass these security policies, exposing the service to the internet and putting sensitive data at risk.\n\nTherefore, the AWS control which checks whether Amazon ECS services are configured to automatically assign public IP addresses is beneficial in this context, as it helps the company to adhere to its strict security settings. It will alert the company when this configuration (AssignPublicIP) is ENABLED and could potentially lead to security breaches.\n\n```markdown\nExample:\n- Control : Checks whether Amazon ECS services are configured to automatically assign public IP addresses\n- Instance : A company that deploys services on Amazon ECS and requires strict security settings.\n- Usefulness : Helps in maintaining security by alerting if any ECS service is exposed to the internet due to auto-assigning of public IP addresses.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_iam_6",
    "Title": "6 Hardware MFA should be enabled for the root user",
    "Description": "This control checks whether your AWS account is enabled to use a hardware multi-factor authentication (MFA) device to sign in with root user credentials.",
    "QueryID": "aws_iam_root_user_hardware_mfa_enabled",
    "DocumentURI": "policies/aws_foundational_security_iam_6.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "iam_6"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control carries several potential costs:\n\n1. **Security Risks and Breaches**:\n    Not using a hardware MFA device for logging in with root user credentials significantly increases the risk of unauthorized access and security breaches. Should a breach occur, the costs can be substantial, including data loss, reputation damage, and potential financial liabilities.\n\n2. **Regulatory Non-Compliance**:\n    Many industries and jurisdictions have regulations that require the use of MFA. Non-compliance could result in sanctions, fines, or legal challenges.\n\n3. **Loss of Trust from Customers**:\n    Protecting customers' data is critical to gaining their trust. If customers learn that you're not taking all possible security measures, such as implementing MFA, they might take their business elsewhere.\n\n4. **Financial Costs**:\n    Resolving security breaches can be expensive. The company might have to pay for a security audit, system restoration, data recovery services, and more. In addition, any downtime caused by the breach could result in lost revenue.\n\nTo summarize, non-compliance to this AWS control could potentially expose your AWS account, data, and resources to malicious activities, result in regulatory repercussions, loss of customer trust, and impose significant financial burdens."
      ],
      "x-kaytu-usefulness-example": [
        "```\n- **For Security Management**: The AWS control that checks for hardware multi-factor authentication (MFA) device can be extremely useful for implementing efficient security management practices. For example, a company managing sensitive user data on AWS can ensure that unauthorized access to its AWS root account is prevented by enforcing MFA sign-in.\n\n  ```\n  Resource \"aws_iam_user_mfa\" \"user\" {\n    user = \"an_example_user_name\"\n  }\n  ```\n\n  This snippet from a Terraform script ensures that a hardware MFA device is associated with the given user account, thus increasing its account security. \n\n- **For Protecting Against Attacks**: By using this control, businesses can protect their AWS accounts from being attacked by hackers attempting to gain control over important resources. \n\n  ```\n  provider \"aws\" {\n      profile = \"default\"\n      region = \"us-west-2\"\n      mfa_serial = \"arn:aws:iam::123456789012:mfa/user\"\n  }\n  ```\n\n  This configuration would require MFA authentication for all AWS API requests within the \"default\" AWS profile, effectively protecting this AWS setup from potentially malicious attacks.\n\n- **For Audit and Compliance**: Enforcing hardware MFA for the root user is also beneficial for meeting regulatory and internal audit requirements. Many compliance standards require strong authentication methods.\n\n  ```\n  provider \"aws\" {\n      alias  = \"root\"\n      region = \"us-west-2\"\n      assume_role {\n        role_arn     = \"arn:aws:iam::123456789012:role/role_name\"\n        session_name = \"session_name\"\n        external_id  = \"external_id\"\n        mfa_serial   = \"arn:aws:iam::123456789012:mfa/user\"\n      }\n  }\n  ```\n\n  By setting the `mfa_serial` value in an assume_role block within the AWS provider configuration, you can ensure an MFA authenticated session is used. This can help demonstrate to auditors that strong controls are in place over privileged AWS operations.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ecs_3",
    "Title": "3 ECS task definitions should not share the host's process namespace",
    "Description": "This control checks if Amazon ECS task definitions are configured to share a host’s process namespace with its containers. The control fails if the task definition shares the host's process namespace with the containers running on it.",
    "QueryID": "aws_ecs_task_definition_no_host_pid_mode",
    "DocumentURI": "policies/aws_foundational_security_ecs_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_configuration"
      ],
      "foundational_security_item_id": [
        "ecs_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ECS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the control checking if Amazon ECS task definitions are sharing a host's process namespace with its containers can result in several potential damages including:\n\n- **Security Risks:** When containers share process namespaces, any process in any container can potentially interact with or exploit any other process running on the host. This can lead to unauthorized access or actions. This is especially concerning for containers running with elevated (root level) privileges.\n\n- **Unintentional Interference:** Processes in different containers could interfere with each other if they share the same namespace. This could cause unexpected behavior and complicate troubleshooting and debugging of applications.\n\n- **Privacy Concerns:** Applications running in different containers typically should not be able to analyze each other's processes. Namespace sharing could leak private information about what the container or application is doing.\n\n- **Regulatory Compliance:** If your organization operates in a regulated industry (like healthcare or finance), sharing process namespaces might be a violation of data privacy or segregation of duties requirements.\n\n- **Cost Implications:** Incidents resulting from issues related to container privacy or interference could result in additional costs related to incident response, system downtime, and potential legal actions in case of data breaches.\n\nIt is typically recommended that users restrict namespace sharing for most containerized applications to reduce the attendant risks associated with this practice."
      ],
      "x-kaytu-usefulness-example": [
        "In the development of scalable applications, it's crucial to ensure that processes running in individual containers do not interfere with each other. For instance, if Process A from Container A gets access to or manipulates Process B from Container B due to namespace sharing between containers and host, it may cause unwanted outcomes such as process failures or data breaches.\n\n```markdown\nExample Instance:\n\nConsider an AWS E-commerce application environment where different microservices, such as user authentication, order processing, inventory management, etc., are deployed using Amazon ECS task definitions. Each microservice runs in its own container. \n\nIf the ECS task definitions are configured to share the host's process namespace with the containers, microservices might interfere with each other leading to potential data breaches or system failures. For example, the authentication microservice could unintentionally get access to the inventory microservice's processes, affecting the integrity of the inventory data.\n\nThe application of this AWS Control in this instance would ensure proper isolation of resources and safeguard them from unintentional access. Consequently, it would protect the system from unwanted software behavior and potential security incidents.\n```\nThus, this AWS Control plays an essential role in maintaining the system's stability, integrity, and security."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_iam_7",
    "Title": "7 Password policies for IAM users should have strong configurations",
    "Description": "This control checks whether the account password policy for IAM users uses the recommended configurations.",
    "QueryID": "aws_iam_account_password_policy_strong_min_length_8",
    "DocumentURI": "policies/aws_foundational_security_iam_7.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "iam_7"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can result in the following costs:\n\n1. **Security Breach:** Not having a robust IAM password policy exposes the business to threats from cybercriminals and hackers. They may gain unauthorized access to sensitive information and manipulate or steal it, leading to financial loss and damage to the company's reputation.\n\n2. **Loss of Data Integrity:** Without a strong password policy, the integrity of data can become compromised, leading to potential inaccuracies and inconsistencies in the company’s operations and decision-making processes.\n\n3. **Regulatory Fines:** Depending on the jurisdiction, there might be regulations governing the protection of sensitive information. Non-compliance with such regulations can result in hefty fines and penalties.\n\n4. **Loss of Customers' Trust:** If a security breach occurs and customers' sensitive information is compromised, it can lead to a loss of trust and have long-term impacts on the company's customer base and revenue.\n\n5. **Operational Delays:** Incident response and recovery after a security breach can consume significant resources and time, diverting them from income-generating activities."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA company, XYZ Corp., uses AWS for its cloud infrastructure. They have several IAM users who access their AWS services for various projects. They want to ensure that all the account passwords for these IAM users are secure enough following the AWS recommendations.\n\nThey use the AWS Control to check the account password policy. The control checks the following:\n\n- All the passwords have a minimum length of 14 characters.\n- There is a requirement for at least one uppercase letter from the Latin alphabet (A – Z).\n- There is a requirement for at least one lowercase letter from the Latin alphabet (a – z).\n- There should be the requirement for at least one number (0 – 9).\n- There should be the requirement for at least one non-alphanumeric character (~!@#$%^\u0026*()-_=+[]{}|;:,.\u003c\u003e/?).\n- If there are any IAM users who are allowed to change their password.\n- There need to be enforced a password rotation policy where IAM users are required to change their passwords every 90 days.\n\nThis control helps XYZ Corp. to ensure that all the IAM user passwords adhere to these recommendations, improving the security of their AWS resources. The IT security team can then enforce these rules to enhance their data protection and comply with both internal and regulatory standards. By using this control, they can minimize the risk of unauthorized access to their AWS accounts and services."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ecs_4",
    "Title": "4 ECS containers should run as non-privileged",
    "Description": "This control checks if the privileged parameter in the container definition of Amazon ECS Task Definitions is set to true. The control fails if this parameter is equal to true.",
    "QueryID": "aws_ecs_task_definition_container_non_privileged",
    "DocumentURI": "policies/aws_foundational_security_ecs_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "root_user_access_restrictions"
      ],
      "foundational_security_item_id": [
        "ecs_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ECS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control could have several potential costs:\n\n1. ###### Security Vulnerabilities:\n    When the privileged parameter in the container definition of Amazon ECS Task Definitions is set to true, it allows the processes within the container to have unrestricted access to all devices on the host instance. This can potentially expose the host instance to security risks and threats. In case of any attack, this can lead to data breach or loss, resulting in direct financial loss and compromising confidential and sensitive information.\n\n2. ###### Legal and Compliance Fines:\n    Non-compliance to this control can result in potential violations of data protection and data privacy laws, standards and regulatory requirements. This may lead to substantial potential legal and compliance fines, penalties, compliance audit failures, and the potential loss of certifications, all of which can incur significant expenses.\n\n3. ###### Reputational Damage:\n    Noncompliance to this control could negatively affect the organization’s reputation in case of a security incident. This could lead to loss of customer or client trust, which can significantly impact the financial situation of the organization.\n   \n4. ###### Remediation Costs:\n    If the violation is detected, substantial costs could be involved in carrying out the remediation process, which can include system updates or patches, personnel time, and potential system downtime.\n\n5. ###### Intellectual Property Loss:\n    If a malicious user were to gain access to the host instance, there is potential for loss or theft of proprietary information or intellectual property, which could have long-term financial implications.\n\nIn conclusion, ensuring that the privileged parameter is not set to true is a critical part of maintaining a secure AWS environment. The cost of non-compliance can be significant and multi-faceted. Hence, it is highly recommended to comply with this control."
      ],
      "x-kaytu-usefulness-example": [
        "In an example where a company wishes to implement a secure environment in their AWS resources, this control would be very helpful. If you've an application running on Amazon ECS, a task definition is needed for scheduling, which includes parameters for containers. \n\nLet's say, the application has a requirement where no container should have more privileges than it needs, to prevent security threats such as privilege escalation. \n\nIn such case, the control that checks if the privileged parameter in the container definition of Amazon ECS Task Definitions would be used. If the control identifies that any container runs with the \"privileged\" parameter set to true, meaning it has unrestricted access to all the device capabilities, the control fails. It means ECS tasks do not follow the principle of least privilege, which increases the potential risk of malicious activities. This allows the company to promptly identify and address any excessively privileged containers, thereby enhancing the security of their applications. \n\n```markdown\nFor instance:\n- [AWS Control]: Check privileged parameter in ECS Task Definition\n    - [Task Definition]: my-task-definition\n        - [Container]: my-container\n            - [Privileged]: True\n            - [Control Result]: Fail\n     - [Task Definition]: my-other-task\n        - [Container]: my-other-container\n            - [Privileged]: False\n            - [Control Result]: Pass\n```    \nThis control helps the company maintain a robust and secure infrastructure by ensuring no task is given more access permissions than it needs on AWS ECS."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_waf_1",
    "Title": "1 AWS WAF Classic Global Web ACL logging should be enabled",
    "Description": "This control checks whether logging is enabled for an AWS WAF global web ACL. This control fails if logging is not enabled for the web ACL.",
    "QueryID": "aws_waf_web_acl_logging_enabled",
    "DocumentURI": "policies/aws_foundational_security_waf_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "waf_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/WAF"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control that ensures logging is enabled for AWS WAF (Web Application Firewall) global web ACL (Access Control List) can lead to several negative implications, including:\n\n1. **Lack of Visibility and Auditability**: Without logging, you won't have a record of past requests. You thus lose the ability to learn from the past to improve your security in the future. An inability to audit past actions and events restricts your capacity to identify and respond to suspicious or malicious behavior.\n\n2. **Inadequate Incident Response**: Without logs, it can be significantly more challenging to perform root cause analyses or to respond to security incidents, if they occur. \n\n3. **Difficulty in Troubleshooting**: Logs play an essential role while troubleshooting connectivity or application issues. Without them, it's harder to understand why something went wrong.\n\n4. **Non-Compliance to Regulatory and Compliance Mandates**: Many industries are bound by regulations that require certain logs to be kept for a certain amount of time. Non-compliance of such regulations could lead to penalties or even legal issues.\n\n5. **Increased Vulnerability to Security Threats**: Logging allows for the early detection of suspicious activities. Without it, your network becomes significantly more vulnerable.\n\nIn terms of tangible cost, consequences may include regulatory fines, the financial expense of recovering from security incidents (e.g., data breaches), potential downtime due to difficulty in troubleshooting, and reputational impact due to data security issues, among others."
      ],
      "x-kaytu-usefulness-example": [
        "In the case of an e-commerce company named XYZ, they use AWS as a cloud service provider and have implemented AWS WAF(global web ACL) to secure their web application from various web exploits. \n\nXYZ has been experiencing a series of web exploits including SQL injection and Cross-site scripting that are affecting the performance of their website. In order to investigate the issue, their security team needs to review the logs which contain important details like the source, time, type of request, and potential threat that is causing the issue. \n\nHowever, if logging is not enabled for their AWS WAF, it impedes their ability to conduct a thorough investigation. Hence, applying the AWS Control to check if logging is enabled is highly useful for them to ensure their capacity to troubleshoot issues, enhance their security strategy, and protect their web application from future exploits. \n\nThis control would flag if logging is turned off, prompting immediate action from AWS administrators to enable logging, ensuring that all necessary data is being captured for future analysis and security improvements. So, the control is very crucial for ensuring the proper security monitoring of AWS WAF."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_efs_1",
    "Title": "1 Amazon EFS should be configured to encrypt file data at rest using AWS KMS",
    "Description": "This control checks whether Amazon Elastic File System is configured to encrypt the file data using AWS KMS.",
    "QueryID": "aws_efs_file_system_encrypt_data_at_rest",
    "DocumentURI": "policies/aws_foundational_security_efs_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "efs_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EFS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The non-compliance to the AWS control that checks whether Amazon Elastic File System (EFS) is configured to encrypt the file data using AWS Key Management Service (KMS) could potentially incur multiple costs such as:\n\n1. **Security Risks**: Without encryption, your sensitive data stored in Amazon EFS is exposed to potential unauthorized access or breach. This can harm your business operation and reputation.\n\n2. **Financial Implications**: In the event of a security breach, you might incur additional costs related to incident response, investigation, potential fines, and recovery process.\n\n3. **Regulatory Compliance Violations**: If your business is required to comply with data protection regulations (e.g., GDPR, HIPAA), non-compliance with encryption requirements could result in penalties or legal issues.\n\n4. **Loss of Customer Trust**: If customers find out that their data isn't away from unwanted access, it could erode their trust, resulting in loss of business and revenue.\n\nIn order to avoid these costs, it is recommended to encrypt data at rest in Amazon EFS using AWS KMS. This adds an additional layer of security to protect your data and helps you to meet your organizational and regulatory compliance requirements."
      ],
      "x-kaytu-usefulness-example": [
        "For example, a healthcare company stores sensitive patient information on the AWS Elastic File System. Complying with HIPAA and other privacy regulations, they must ensure this data is securely protected, especially when at rest. By enabling AWS KMS encryption for their Elastic File System, they can add an additional layer of security to their data, ensuring it is undecipherable to unauthorized users. The AWS control to check if this encryption is enabled helps the company validate their cloud security setup, maintain regulatory compliance, and keep their patient information secure."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_iam_8",
    "Title": "8 Unused IAM user credentials should be removed",
    "Description": "This control checks whether your IAM users have passwords or active access keys that have not been used for 90 days.",
    "QueryID": "aws_iam_user_unused_credentials_90",
    "DocumentURI": "policies/aws_foundational_security_iam_8.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "iam_8"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS (Amazon Web Services) control can have several costs:\n\n1. **Security Risks:** Unused access keys and passwords are potential security risks. If a malicious actor gains access to these unused credentials, they could gain unauthorized access to the AWS environment, potentially leading to data breaches or other security incidents.\n\n2. **Financial Costs:** If these credentials are used to gain unauthorized access, there could be substantial financial costs. These could range from misuse of resources (for example, spinning up large or numerous instances) to the costs associated with a data breach (such as fines for non-compliance to regulations, cost of remediation, notifying affected parties, and potential lawsuits).\n\n3. **Regulatory Non-Compliance:** Many regulations require that businesses take reasonable steps to secure data and limit access to necessary parties only. Unused credentials that could provide access to this data might not pass a regulatory audit, which could lead to fines or penalties.\n\n4. **Reputation Damages:** If unused keys are exploited leading to a breach, it could have significant impact on a company's reputation, resulting in loss of clients, partners, and affecting the overall business outcomes.\n\n5. **Efficiency Costs:** Having inactive users with privileges can clutter your IAM, which can make managing active users and their permissions more difficult and time-consuming.\n\nTo avoid these potential costs, it is recommended to regularly review and deactivate unused IAM users’ passwords or access keys. Regular compliance checks with AWS controls can help detect and mitigate these risks efficiently."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, we have a company XYZ which follows strict protocols for managing their data security on AWS. They have several IAM users access their AWS cloud infrastructure for different purposes like development, testing, database administration, etc. \n\nNow, they follow a periodic user access review policy where they want to ensure that no inactive users are allowed to have access to the services. It is important to them because sometimes, employees leave the organiztion or switch roles and their AWS access becomes redundant. If such credentials are left unchecked, they can pose a potential security risk. \n\nThis AWS control, which checks whether the IAM users have passwords or active access keys that have not been used for 90 days, helps them identify such inactive users. For instance, if it discovers a user whose credentials haven't been used within the last 90 days, AWS alerts the security team at XYZ. The team can then investigate and decide whether the inactive account should be suspended or removed, thereby ensuring that the firm's AWS access remains secure and up-to-date. \n\n```markdown\nCompany XYZ's case\n-------------------\n1. Company XYZ has numerous IAM users who access AWS services for varied purposes.\n2. They follow a strict user access review policy to ensure optimal security.\n3. The AWS control helps by alerting the security team of any IAM users who haven't used their credentials for over 90 days.\n4. Through alert notification, the security team can investigate and take necessary actions like suspending or removing the unused account.\n5. This maintains their strict security protocol and keeps their access secure and up-to-date.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ecs_5",
    "Title": "5 ECS containers should be limited to read-only access to root filesystems",
    "Description": "This control checks if ECS containers are limited to read-only access to mounted root filesystems. This control fails if the ReadonlyRootFilesystem parameter in the container definition of ECS task definitions is set to false.",
    "QueryID": "aws_ecs_task_definition_container_readonly_root_filesystem",
    "DocumentURI": "policies/aws_foundational_security_ecs_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "ecs_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ECS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control could lead to serious security risks and potential financial impacts. The implications of remaining non-compliant to this control include:\n\n1. **System Integrity**: If the ECS containers are not limited they can potentially write or modify the mounted root filesystems, interrupting system operations, corrupting data, or injecting malicious content that can compromise the entire system.\n\n2. **Infrastructure Vulnerability**: This might expose vulnerabilities in your system where attackers can escalate their privileges, gain unauthorized access, or deploy harmful software. It's like leaving your system's door ajar for any ill-intentioned entity.\n\n3. **Data Breach Penalties**: If such a vulnerability is exploited, this can lead to a data breach of sensitive information. Depending on the severity of the breach and the jurisdiction, the penalties can range from heavy fines to lawsuits.\n\n4. **Loss of Trust**: Breaches or service interruptions resulting from non-compliance can lead to the loss of trust from customers, affecting future business and brand reputation.\n\n5. **Resource Consumption**: Depending on what an attacker does after gaining write access, you could end up dealing with unnecessary usage and consumption of resources, leading to increased financial costs.\n\nHence, it's essential to ensure that the `ReadonlyRootFilesystem` parameter in the container definition of ECS task definitions is set to `true` to maintain compliance and avoid these potential threats and costs."
      ],
      "x-kaytu-usefulness-example": [
        "The usefulness of this AWS Control can be illustrated with the following example:\n\n```markdown\n- Company ABC deploys their production level application using Amazon's Elastic Container Service (ECS). They use task definitions to configure the different aspects of their application, including aspects related to the security of the application.\n\n- One of the security best practices is to limit the access level of ECS containers to the root filesystems of the host machines. By default, containers can write to the root filesystems, posing potential risks for unwanted modifications or data corruption.\n\n- To ensure maximum security, ABC Company decides to restrict write access to the root file system by setting the ReadonlyRootFilesystem parameter in the container definition to true. This practice restricts the application running in the container from making changes to the root filesystems, thereby enhancing overall security.\n\n- AWS Control comes into play by regularly checking whether the ReadonlyRootFilesystem parameter is set to true in all current and newly launched ECS task definitions. If it detects the parameter is set to false, the control triggers an alert, enabling the security team to promptly investigate the issue. \n\n- This way, AWS Control ensures that high security levels are maintained in the production environment of ABC Company, and the potential for unauthorized file system modifications is reduced.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_waf_2",
    "Title": "2 A WAF Regional rule should have at least one condition",
    "Description": "This control checks whether an AWS WAF Regional rule has at least one condition. The control fails if no conditions are present within a rule.",
    "QueryID": "aws_waf_regional_rule_condition_attached",
    "DocumentURI": "policies/aws_foundational_security_waf_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "waf_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/WAF"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can be significant and comes in various forms:\n\n- *Security Risks*: If AWS WAF Regional rules don't have at least one condition, they will not be effective in identifying and blocking malicious web traffic. This can expose applications to various security threats and risks, including unauthorized access, data breaches, and more.\n\n- *Operational Interruptions*: Potential attacks due to non-compliance could lead to system failures or interruptions, impacting system availability and business continuity.\n\n- *Financial Loss*: These security incidents could result in financial losses due to data theft, system downtime, cost of incident response, and potential fines or penalties for non-compliance with regulations.\n\n- *Reputation Damage*: A security incident also risks damaging an organization's reputation, which can have long-term impacts on customer trust and business relationships.\n\nHere is a breakdown in markup format:\n\n1. **Security Risks**: Failure to comply with this control opens a door for malicious web traffic which can lead to unauthorized access or data breaches.\n2. **Operational Interruptions**: The attacks arising from non-compliance can result in system failures that may disrupt business operations.\n3. **Financial Loss**: Breaches can lead to data theft, system downtime, cost of restoring systems, and potential regulatory fines, which all contribute to financial losses.\n4. **Reputation Damage**: Finally, security incidents can damage an organization's reputation and result in loss of trust from customers and business partners."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA company develops a web application and uses AWS to host it. They decide to use AWS WAF Regional for their application security. However, they create a rule without any conditions. This means the rule will not have any prerequisites to follow, thus making it useless. \n\nBy failing the control check, it prevents the scenario of having unprotected areas in the application. This control check alerts them to their mistake and allows them to rectify it, ensuring their WAF Regional rule functions as intended to provide maximum security coverage. \n\n```markdown\nAWSControl{\n  Name: (Check AWS WAF Regional rule has at least one condition)\n  Description: (This control checks whether an AWS WAF Regional rule has at least one condition. The control fails if no conditions are present within a rule.)\n  Importance: (Critical)\n  RecommendedAction: (Create at least one condition in AWS WAF Regional rule to ensure protective functioning.)\n  Status: (Fail)\n}\n```\n\nDue to the failed status, the IT department can act swiftly to add conditions to the rule in AWS WAF Regional, potentially protecting the company's web application from vulnerability."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_efs_2",
    "Title": "2 Amazon EFS volumes should be in backup plans",
    "Description": "This control checks whether Amazon Elastic File System (Amazon EFS) file systems are added to the backup plans in AWS Backup. The control fails if Amazon EFS file systems are not included in the backup plans.",
    "QueryID": "aws_efs_file_system_automatic_backups_enabled",
    "DocumentURI": "policies/aws_foundational_security_efs_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "backup"
      ],
      "foundational_security_item_id": [
        "efs_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EFS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control means that your Amazon Elastic File System (Amazon EFS) file systems are not mitigated against potential data loss, which can result in both operational and financial consequences. Here are the possible costs:\n\n1. **Data Loss**: This control purpose is to ensure your Amazon EFS data is protected through scheduled backups. Non-compliance implies a higher risk of losing valuable data during unexpected incidents like system failures, disasters, or human errors.\n\n2. **Operational Disruptions**: In case of data loss, getting your system back online and restoring data may result in significant operational downtime. While you are attempting to replace lost data, your system's functionality could be severely compromised, leading to disruptions in customer service and productivity. \n\n3. **Financial Costs**: Data recovery can be time-consuming and costly, especially if you don't have a proper backup or the backup is outdated. The downtime also creates additional costs, not just in terms of manpower and resources spent in recovery, but possibly also lost revenue and customers. \n\n4. **Compliance Violations**: Depending on your industry and the nature of your data, failure to backup Amazon EFS data may also lead to non-compliance with regulations like GDPR, HIPAA etc. which can result in heavy fines, legal actions and damage to your organization's reputation.\n\n5. **Security Vulnerabilities**: Without proper backup plans, you're also more vulnerable to security breaches and threats. An effective data backup plan is also an essential part of data security.\n\nIn summary, non-compliance with this AWS Control could cause significant operational, financial, compliance, and security costs. Therefore, it's crucial to ensure that Amazon EFS file systems are included in AWS Backup plans."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nAssume you have a production environment on AWS that utilizes Amazon Elastic File System (EFS) to store and share files across multiple Amazon EC2 instances. You also have an AWS Backup plan in place to protect your data from accidental deletion, system failures, or any unforeseen issues.\n\nOne day, an unintentional mistake by a team member results in the deletion of critical files in the EFS file system. If this EFS file system was not included in your AWS Backup plan, you would lose those files permanently which could result in significant business impact, like downtime, lost sales, or damaged reputation.\n\nHowever, if the AWS control - that checks whether Amazon EFS file systems are added to backup plans - was effectively implemented, this catastrophic event could have been avoided. The deleted files could be quickly restored from the backup, ensuring minimal disruption to your business operations.\n\nFor this reason, this control is incredibly useful as it guarantees that your Amazon EFS file systems are protected and can be restored if needed, thereby reducing the risk of substantial data loss and its associated impacts."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_efs_3",
    "Title": "3 EFS access points should enforce a root directory",
    "Description": "This control checks if Amazon EFS access points are configured to enforce a root directory. The control fails if the value of Path is set to / (the default root directory of the file system).",
    "QueryID": "aws_efs_access_point_enforce_root_directory",
    "DocumentURI": "policies/aws_foundational_security_efs_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "efs_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EFS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can lead to several potential issues. Here's a breakdown in markup format:\n\n1. **Security Risk**: If the configuration isn't enforcing a root directory and instead, the access point is set to the root directory of the file system (/), then files within the entire file system could potentially be accessed. This poses a major security risk as unauthorized users or applications could access sensitive data.\n\n    ```markdown\n    - Risk: High\n    - Impact: Potential data breaches and unauthorized access to sensitive data\n    ```\n\n2. **Data Integrity**: Without enforcing specific root directories for different access points, the management of data within the filesystem could become chaotic and complex. This could be leading to potential issues with data integrity.\n\n    ```markdown\n    - Risk: Medium\n    - Impact: Possible data corruption, data inconsistency, and difficulties in data management\n    ```\n\n3. **Compliance Violations**: If your organization must comply with data handling regulations (e.g., GDPR, HIPAA, etc.) and the auditors find this non-compliance, your organization could face penalties or fail the audit. \n\n    ```markdown\n    - Risk: High\n    - Impact: Regulatory fines, penalties or failed audits\n    ```\n\n4. **Operational Disruptions**: If applications are dependent on this setting, and it's not configured correctly, potential disruptions could occur.\n\n    ```markdown\n    - Risk: Variable\n    - Impact: Potential downtime or application failure\n    ```\n\nIn conclusion, non-compliance with this AWS control could lead to significant security risks, potential compliance violations, and possibly affect your data's integrity and operational efficiency."
      ],
      "x-kaytu-usefulness-example": [
        "This AWS control can be critically useful for enhancing security measures within an AWS environment. An example of its usefulness could be in an organization where there are multiple departments, each needing access to different sets of data stored in the Amazon EFS file system. \n\nFor instance, your organization may have separate departments for Finance, Human Resources, and IT, all of which require access to various parts of the EFS file system. Setting a root directory with this control can ensure that each department only has access to its own data. \n\nIf the control finds an access point set to the default root directory `/`, it would indicate that potentially sensitive data in the EFS is not properly segregated. This control helps prevent unauthorized access or accidental deletion of critical data by limiting the scope of access points.\n \nMoreover, this control can help comply with industry data standards and regulations by ensuring that data is accessible only to authorized users or systems.\n\n```markdown\nExample Scenario:\n- Control Check: Enforcement of EFS root directory\n- Organization: XYZ Corp\n- AWS Service: Amazon EFS\n- Enforcement of EFS root directory Status: Fail (Root directory set to /)\n\nXYZ Corp has an Amazon EFS file system with critical data segregated for the Finance, HR, and IT departments. The AWS control flagged an issue where an access point was found to be set to the default root directory /. \n\nThis raised a security concern because it could allow users to access all data on the file system, rather than only the specific data they need. The finance report data could accidentally be accessed or deleted by an HR staff member, for instance.\n\nIn accordance to the control check, XYZ Corp modified the access point configuration to ensure each access point enforces a unique root directory for each department. Now, their EFS environment is secure, and each department can only access its own necessary data on the EFS file system. \n\nBy doing so, this AWS control helped XYZ Corp not only in mitigating a potentially severe internal data breach situation, but also in maintaining their data handling compliance with industry standards.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_waf_3",
    "Title": "3 A WAF Regional rule group should have at least one rule",
    "Description": "This control checks whether an AWS WAF Regional rule group has at least one rule. The control fails if no rules are present within a rule group.",
    "QueryID": "aws_waf_regional_rule_group_rule_attached",
    "DocumentURI": "policies/aws_foundational_security_waf_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "waf_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/WAF"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can result in several negative implications which can have associated costs for an organization. \n\n1. **Security Risks**: If there are no rules present within a WAF Regional rule group, it means there are no filtering or screening controls in place. Potential malicious traffic are not filtered or blocked, leading to potential attacks such as SQL injection and Cross-Site Scripting (XSS). These can lead to breaches and loss of sensitive data, leading to financial losses.\n\n2. **Compliance Penalties**: For organizations that have regulatory and audit requirements, any incident of non-compliance like this one could potentially lead to heavy fines and penalties.\n\n3. **Reputational Damage**: Security breaches often result in damage to an organization's reputation which can decrease your customer's trust in your organization, this could affect customer retention and acquisition thus leading to cost implications.\n\n4. **Operational Impacts**: An attack could potentially bring down your production environment or part of it, causing service degradation or even outages. This may lead to a potential loss in terms of business revenues.\n\n5. **Remediation Costs**: After a breach occurs, an organization will incur significant costs to repair vulnerabilities, recover lost data, and restore systems. \n\nTherefore, ensuring that AWS WAF Regional rule groups always have at least one rule is very important not just from an AWS control perspective but also from a business operations and security perspective."
      ],
      "x-kaytu-usefulness-example": [
        "```markup\nFor example, you run an e-commerce website where you use varying security policies for different aspects of your website. You use AWS WAF Regional rule groups to segment these policies effectively. \n\nYou might have one AWS WAF rule group for protecting your login page, another for your checkout page and so on. \n\nIf you accidentally forgot to add a rule to your login page rule group, your login page could potentially be unprotected, inviting security breaches. \n\nBy leveraging this control, it will check for this vulnerability. If this control fails, it means no rules are present within a rule group. As this can potentially create security risks, it's important to rectify this as soon as possible. This check ensures you are correctly using AWS WAF regional rule group by reminding you to put at least one rule in each group for robust security. \n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_waf_4",
    "Title": "4 A WAF Regional web ACL should have at least one rule or rule group",
    "Description": "This control checks whether an AWS WAF Classic Regional web ACL contains any WAF rules or WAF rule groups. This control fails if a web ACL does not contain any WAF rules or rule groups.",
    "QueryID": "aws_waf_regional_web_acl_rule_attached",
    "DocumentURI": "policies/aws_foundational_security_waf_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "waf_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/WAF"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS Control can result in significant costs:\n\n1. **Security Risks**: The most substantial cost is the potential security risk. Without any WAF rules or rule groups, your web ACL (Access Control List) will not be able to filter and block malicious traffic. This exposes your applications and services to various threats, such as SQL injection, cross-site scripting (XSS), and brute force attacks.\n\n2. **Data Breaches**: If your systems are compromised due to lack of WAF rules or rule groups, sensitive customer data may be stolen. This can result in severe financial penalties as well as damage to your company's reputation.\n\n3. **Regulatory Compliance Fines**: Many industries are under stringent regulatory requirements concerning data security. Non-compliance with such regulations due to inadequate security measures could result in hefty fines and penalties.\n\n4. **Loss of Business**: If your systems are compromised or if customer data is breached, it can result in loss of trust and business continuity, leading to financial loss.\n\n5. **Remediation Costs**: In the event of a breach or attack, the cost of identifying the breach, closing the security gaps, and restoring the systems can be quite high.\n\nTherefore, ensuring compliance with this AWS Control by including WAF rules or rule groups in your web ACL is crucial to securing your applications hosted in AWS, avoiding financial penalties, and maintaining your company's reputation."
      ],
      "x-kaytu-usefulness-example": [
        "For example, a company has deployed multiple AWS WAF Classic Regional web ACLs to protect its numerous AWS-based web applications. Due to administrative oversight, some of these ACLs may have been deployed without any WAF rules or rule groups, making those applications vulnerable to various web attacks. To ensure proper security, the company uses this control to quickly identify these unsecured ACLs.\n\nBy using this control, the company is able to identify the oversight rapidly before any potential complications arise. Companies save resources and time while preventing vulnerabilities that could be exploited by threats. Thus, it is an example of how useful this AWS control may be for organizations focusing on improving their cloud security strategy."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_efs_4",
    "Title": "4 EFS access points should enforce a user identity",
    "Description": "This control checks whether Amazon EFS access points are configured to enforce a user identity. This control fails if a POSIX user identity is not defined while creating the EFS access point.",
    "QueryID": "aws_efs_access_point_enforce_user_identity",
    "DocumentURI": "policies/aws_foundational_security_efs_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "efs_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EFS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control is high due to various reasons:\n\n1. **Security Risk:** Not enforcing a specific user identity for EFS access points can lead to unauthorized access to your EFS filesystems. This can increase the risk of data breaches, data corruption, or ransomware attacks.\n\n2. **Audit Failure:** Non-compliance with this control can cause your organization to fail in regulatory audits as it is a requirement for many data protection and privacy regulations to restrict and control access to sensitive datasets.\n\n3. **Increased Operational Costs:** In case of a security incident due to uncontrolled access, the remediation effort including data recovery, system restoration, legal costs, and PR damage control can be very high. \n\n4. **Data Loss:** There's a higher risk of data loss due to accidental deletion or alteration by unauthorized users.\n\n5. **Regulatory Fines:** Depending on the jurisdiction and regulations applicable to your data, non-compliance can result in heavy fines and penalties imposed by regulatory bodies.\n  \nSo not defining a POSIX user identity while creating the EFS access point can lead to operational, financial, and reputational costs for an organization."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, a company is using Amazon Elastic File System (EFS) to manage and store its large volume of data. The data ranges from internal operation information to customers' sensitive details. To ensure data security and regulate access, Amazon EFS access points are created for users. To enforce stricter controls, the organization has enabled a setting which requires a POSIX user identity to be assigned while creating these access points.\n\nThis AWS control can then verify the setup for each EFS access point to make sure it enforces user identity. By enforcing a specific identity for each user (in form of POSIX user id), the company can ensure that only authorized personnel can access certain data in the EFS. This will ensure data access is regulated and security is maintained. Additionally, in the event that an EFS access point doesn't have a defined POSIX user identity, the control will fail, alerting the engineering team for a rectification step to be implemented. \n\nSo, the usefulness of this AWS Control in this context is ensuring data security, and safeguarding sensitive information thereby maintaining an organization's reputation and compliance with data protection laws."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ecs_8",
    "Title": "8 Secrets should not be passed as container environment variables",
    "Description": "This control checks if the key value of any variables in the environment parameter of container definitions includes AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, or ECS_ENGINE_AUTH_DATA. This control fails if a single environment variable in any container definition equals AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, or ECS_ENGINE_AUTH_DATA. This control does not cover environmental variables passed in from other locations such as Amazon S3.",
    "QueryID": "aws_ecs_task_definition_container_environment_no_secret",
    "DocumentURI": "policies/aws_foundational_security_ecs_8.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "credentials_not_hard_coded"
      ],
      "foundational_security_item_id": [
        "ecs_8"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ECS"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control is primarily related to security and privacy risks, potential data breaches, and financial losses. \n\n1. Security Risk: Hard coding or exposing `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, or `ECS_ENGINE_AUTH_DATA` in an environment variable is a poor practice that can expose your AWS resources to unauthorized access. Attackers could potentially misuse these to gain unauthorized access to your AWS resources, leading to data breaches or loss of control over resources.\n\n2. Data Breach: A data breach could expose sensitive customer data, damaging your company's reputation and trust. Moreover, it could lead to legal repercussions, as businesses are required to protect customer data under laws such as the GDPR and CCPA.\n\n3. Financial Loss: A malicious entity with your access keys could potentially initiate operations that cost you money. For example, they could increase resources, launch new services, or manipulate data leading to a financial impact.\n\n4. Compliance Violation: If your business is subject to regulations that mandate certain security practices, failing this control could also lead to being in violation of those regulations, which could result in fines and penalties.\n\nTherefore, it is essential to store confidential information like `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, or `ECS_ENGINE_AUTH_DATA` in secure and encrypted storage and not in plain text or environmental variables. These should be securely fetched in real-time using secure mechanisms when needed. One useful AWS service for this is AWS Secrets Manager."
      ],
      "x-kaytu-usefulness-example": [
        "For example, there is a company XYZ Corp which uses AWS to manage its various applications across different environments. They have a policy of not storing sensitive AWS access credentials in the environment parameters for each container. This policy is set to prevent any unintended exposure of these important keys which can potentially lead to a security risk.\n\nIn the daily operations, sometimes developers at XYZ Corp may forget to follow this policy and unintentionally include AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, or ECS_ENGINE_AUTH_DATA in the environment parameter for a container definition. \n\nHere, the AWS Control would be extremely useful. When their AWS environment is scanned, this control would run a check on all the containers. If it detects any of these keys in the environment parameters, the control fails, thereby revealing that sensitive credentials have been exposed in the environment parameters. \n\nThis control is useful in helping to maintain security compliance and ensure safety of sensitive data, as it provides an automated way to check for unintentional mistakes which could otherwise go unnoticed.\n\nPlease take a note, this control does not cover environmental variables passed in from other locations such as Amazon S3. So, it may still be necessary to use different scanning or checking process over those environments.\n\nMarkup:\n\n```\n- **AWS Control Usefulness Example**: AWS Control is used to check if AWS access keys have been accidentally exposed in container environment parameters. This control fails if it detects that any variable in the environment parameter for container definitions equals `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, or `ECS_ENGINE_AUTH_DATA`. However, it does not cover variables passed in from other locations such as Amazon S3.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_eks_1",
    "Title": "1 EKS cluster endpoints should not be publicly accessible",
    "Description": "This control checks whether an Amazon EKS cluster endpoint is publicly accessible. The control fails if an EKS cluster has an endpoint that is publicly accessible.",
    "QueryID": "aws_eks_cluster_endpoint_restrict_public_access",
    "DocumentURI": "policies/aws_foundational_security_eks_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "eks_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EKS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control is typically related to the risk of security breaches and unauthorized access to your EKS (Elastic Kubernetes Service) clusters. This could result in the following potential costs:\n\n1. **Data Breaches:** If your EKS endpoints are publicly accessible, then malicious actors may be able to breach your database and gain unauthorized access to sensitive information. The cost of a data breach can run into millions of dollars when you account for expenses related to damage control, customer notification, legal issues, fines, and company reputation damage.\n\n2. **Loss of Control:** With public access, anyone can access and interact with your EKS clusters. This could allow malicious actors to take control of your EKS assets and manipulate them, leading potentially to a loss of resource and huge costs in recovery and damage repair.\n\n3. **Regulatory Fines**: Non-compliance with regulations like GDPR, CCPA, or HIPAA due to exposing sensitive data can result in heavy fines. The cost of these fines can range from thousands to millions of dollars depending on the scale of non-compliance.\n\n4. **Resource Over-usage and Associated Cost:** Unwanted traffic or resource usage by malicious actors may lead to increased costs for usage of the service.\n\nTherefore, it's highly recommended to ensure that EKS cluster endpoints are not publicly accessible, even in test and development environments. They should be properly restricted and guarded to prevent unauthorized access."
      ],
      "x-kaytu-usefulness-example": [
        "For example, suppose a company X has deployed their microservices architecture on an Amazon EKS cluster. These services are crucial to the company's operations and should only be accessed internally. The AWS Control can be used to monitor whether the EKS cluster persistent endpoint is publicly accessible. \n\nIf the control identifies a public endpoint, it could suggest that the EKS cluster is vulnerable to attackers who could gain direct unauthorized access to these systems. As such, the control would issue a warning, and company X can act swiftly to secure this endpoint and hence protect their applications and data. This aspect makes the AWS control a vital component in enhancing and maintaining the security of company X's infrastructure on the AWS cloud platform. \n\nThe above instances underscore the significance of this AWS control in enhancing data security by ensuring only authorized access to the EKS clusters. Therefore, it is useful in the context of cloud security management, especially for companies that use AWS as part of their technology stack. \n\n```markdown\n## Use Case: Protect EKS clusters in Company X\n\n- **Scenario**: Company X has a microservices architecture deployed on an Amazon EKS cluster. The access to these services should be internal-only.\n- **Action**: The AWS Control is used to check if the EKS cluster endpoint is publicly accessible.\n- **Result**: The control identifies that the endpoint is public and sends a warning.\n- **Impact**: Company X instantly works to secure the identified endpoint, thereby preventing potential unauthorized access and breaches. In addition, it reinforces the security of their infrastructure on AWS.\n- **Conclusion**: The AWS Control plays a crucial role in boosting data security by enforcing authorized access to the EKS clusters. \n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_waf_6",
    "Title": "6 A WAF global rule should have at least one condition",
    "Description": "This control checks whether an AWS WAF global rule contains any conditions. The control fails if no conditions are present within a rule.",
    "QueryID": "aws_waf_rule_condition_attached",
    "DocumentURI": "policies/aws_foundational_security_waf_6.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_configuration"
      ],
      "foundational_security_item_id": [
        "waf_6"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/WAF"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control could have several costs, including:\n\n1. **Security Vulnerabilities:** If no conditions are present within an AWS WAF (Web Application Firewall) rule, it could mean that the system is not adequately protected against specific web requests that could potentially harm the application or be a security threat. This might make the system vulnerable to attacks such as SQL injection, cross-site scripting (XSS), or Distributed Denial-of-Service (DDoS).\n\n2. **Potential Data Breach:** The absence of specific conditions within the WAF rule may allow unauthorized access or expose sensitive data to attackers. This could lead to data breaches, causing significant financial losses and damage to the company's reputation.\n\n3. **Increased Operational Costs:** Without specific conditions in the WAF rules, your infrastructure could be processing irrelevant or harmful requests, which may lead to increased operational costs like bandwidth and processing power.\n\n4. **Non-Compliance Penalties:** Depending on the regulations and standards your business must adhere to (like PCI DSS, HIPAA, or GDPR), failure to properly configure security controls such as WAF rules could result in hefty fines or penalties for non-compliance.\n\n5. **Loss of Customer Trust:** If security vulnerabilities lead to a data breach or system downtime, it could result in the loss of trust from your customers, harming your business reputation and customer relationships.\n\nTo avoid these costs, it's crucial to ensure that your AWS WAF rules contain appropriate conditions to protect your web applications from threats."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, a multinational company that handles highly sensitive data might be using AWS infrastructure to manage their operations. To ensure the security of the data, they would undoubtedly use AWS WAF (Web Application Firewall) to protect their web applications from common web exploits.\n\nLet's say they set up several global rules as part of their security configuration to secure their infrastructure. However, they might overlook and forget to set up specific conditions for some rules.\n\nIn that case, this specific AWS control would be very useful. It helps in identifying these overlooked global rules that do not contain any conditions. This prompts the security team to take immediate action to define necessary conditions, hence ensuring no rules are left ineffective.\n\n```\nExample:\n\n- Control: AWS WAF Global Rule Condition Check\n  - company-x-webapp-global-rule-1: Pass (Conditions Present)\n  - company-x-webapp-global-rule-2: Fail (No Conditions Present)\n\nThe security team would thus be alerted of the lack of conditions for 'company-x-webapp-global-rule-2', which they can promptly rectify. \n```\n\nThis control ensures stringent security by avoiding any loopholes, hence reducing their data vulnerability and maintaining the integrity and confidentiality of their sensitive business information."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_emr_1",
    "Title": "1 Amazon EMR cluster master nodes should not have public IP addresses",
    "Description": "This control checks whether master nodes on Amazon EMR clusters have public IP addresses. The control fails if the master node has public IP addresses that are associated with any of its instances. Public IP addresses are designated in the PublicIp field of the NetworkInterfaces configuration for the instance. This control only checks Amazon EMR clusters that are in a RUNNING or WAITING state.",
    "QueryID": "aws_emr_cluster_master_nodes_no_public_ip",
    "DocumentURI": "policies/aws_foundational_security_emr_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "emr_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EMR"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can lead to significant costs, some of which include:\n\n1. **Security Risks**: By assigning public IP addresses to master nodes of Amazon EMR clusters, these nodes become accessible from the internet. This increases the risk of unauthorized access, data breaches, and potential data loss. The financial cost incurred due to such incidents could be massive. In addition, there is a possible reputational damage which could lead to loss of customer trust and associated future revenue.\n\n2. **Regulatory Non-Compliance**: Depending on the industry, non-compliance with data privacy regulations such as GDPR, HIPAA etc. could lead to hefty fines.\n\n3. **Data Transfer Costs**: Data transfers into and out of AWS often incurs a cost and these costs can increase if significant traffic is directed to or from public IPs. \n\nHere is a markup summary:\n\n```\n- **Security Risks**: Exposing master nodes to public increases chances of unauthorized access, data breaches and potential data loss. \n\n- **Regulatory Non-Compliance**: Non-Compliance with data privacy regulations can lead to significant fines.\n\n- **Data Transfer Costs**: Data transfers to or from public IPs can be significantly high.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "For example:\n\nA company XYZ is actively using AWS for its data processing needs and one of their key services deployed is Amazon EMR (Elastic Map Reduce). They run sensitive operations that involve proprietary data. The security policy of the company mandates that no publicly accessible IP addresses should be allocated to any services, especially those handling sensitive data.\n\nAn AWS auditor, making use of this AWS Control, will be able to verify whether Amazon EMR clusters follow the necessary security practices for the company. By running this control, they determine whether any master nodes of the EMR clusters have been inadvertently or mistakenly assigned public IP addresses. If the control flags that a master node does indeed have a public IP address, immediate and appropriate actions could be taken to rectify the situation. This will help in preventing any potential security breaches, guaranteeing the company's data remains secure and ensuring compliance with their security policy."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_waf_7",
    "Title": "7 A WAF global rule group should have at least one rule",
    "Description": "This control checks whether an AWS WAF global rule group has at least one rule. The control fails if no rules are present within a rule group.",
    "QueryID": "aws_waf_rule_group_rule_attached",
    "DocumentURI": "policies/aws_foundational_security_waf_7.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_configuration"
      ],
      "foundational_security_item_id": [
        "waf_7"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/WAF"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control carries several potential costs:\n\n1. **Security Risk**: If there's no rule in a global WAF rule group, that means the related AWS resources are not under the protection of AWS WAF. This can pose a threat to resources exposed to the open internet, leading to greater vulnerability to security breaches such as a DDoS attack, SQL injection, or cross-site scripting. This can ultimately result in data breaches, system downtime, or loss of sensitive information.\n\n2. **Financial Cost**: The direct consequence of security breaches is often financial loss. This can be due to lost business from system downtime, cost incurred in forensics and breach investigation, recovery cost, compensations for potential data compromise, or increased insurance premiums.\n\n3. **Non-compliance penalties**: Depending on various regulatory standards (e.g. GDPR, PCI DSS, HIPAA), not having rules in AWS WAF rule group can lead to non-compliance, which can result in penalties and fines.\n\n4. **Reputational Damage**: Security breaches as a result of non-compliance can damage a company's reputation. This can lead to loss of customers and partners, which can have long-term financial implications.\n\n5. **Legal and Liability Issues**: If sensitive customer data is compromised due to a lack of adequate security measures, businesses may face lawsuits which can result in further financial and reputational damage. \n\nOverall, it is critical to ensure compliance with this specific AWS control to maintain security, trust, and robust operations for the AWS environment and the business it supports."
      ],
      "x-kaytu-usefulness-example": [
        "In an instance where a large multinational company handles sensitive customer data across various continents, they must abide by numerous regulations to keep this data secure. They use AWS to host their online platforms and services. To maintain a high level of security, they implement AWS WAF (Web Application Firewall) to protect their web applications from common web exploits that may affect availability, security or consume excessive resources.\n\nTo efficiently manage this, they group associated firewall rules into rule groups. They've created a global rule group to apply certain rules to all their applications across various geographic locations. An example of a rule within this group may be one that prevents SQL injection attacks.\n\nThe AWS control checks for at least one rule within this global rule group, ensuring that the company has, at minimum, a form of cybersecurity in place for its applications. If this control fails, it indicates that the rule group doesn't contain any rules, which could expose their applications to cyber risks. This control is crucial in the company's overall cybersecurity strategy to protect its applications and its customers' data."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_dms_1",
    "Title": "1 AWS Database Migration Service replication instances should not be public",
    "Description": "This control checks whether AWS DMS replication instances are public. To do this, it examines the value of the PubliclyAccessible field. A private replication instance has a private IP address that you cannot access outside of the replication network. A replication instance should have a private IP address when the source and target databases are in the same network. The network must also be connected to the replication instance's VPC using a VPN, AWS Direct Connect, or VPC peering. To learn more about public and private replication instances, see Public and private replication instances in the AWS Database Migration Service User Guide.",
    "QueryID": "aws_dms_replication_instance_not_publicly_accessible",
    "DocumentURI": "policies/aws_foundational_security_dms_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "dms_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/DMS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS (Amazon Web Services) control could potentially lead to hefty financial, operational, and reputational costs. It is crucial to evaluate these areas:\n\n1. **Security Breaches and Data Leaks:** DMS replication instances being public might expose your data, making it accessible from the internet. This considerably increases the risk of security breaches and data leaks. If sensitive or regulated data is exposed, it could lead to substantial financial penalties and loss of client trust.\n\n2. **Regulatory Non-Compliance Penalties:** If your organization operates under certain compliance regulations like GDPR, HIPAA etc., non-adherence to this control could lead to violations. Regulatory bodies could impose heavy fines for such non-compliance. \n\n3. **Increased Vulnerability to Cyberattacks:** Publicly-accessible instances may increase your system's vulnerability to malicious attacks such as DDoS attacks, data theft, or insertion of malicious code. This could hamper system performance, incur cost for system restoration, and if customer data is affected, there may be further financial burdens due to legal liabilities. \n\n4. **Operational Disruption:** If a security breach occurs due to this non-compliance, it could disrupt your business operations leading to financial losses and damage to reputation.\n\n5. **Reputation Damage:** Public instances can become targeted by hackers causing serious breaches. The resultant negative press coverage could harm your organization's reputation, leading to loss of business and trust from customers and partners. \n\nIn summary, maintaining compliance with this AWS control helps reduce the risk of data breaches, ensures regulatory compliance, mitigates the threat of cyberattacks, and helps maintain trust with your stakeholders."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA large organization is planning to migrate their database from on-premises data center to Amazon RDS. In order to facilitate smooth data migration, they utilize AWS Database Migration Service (DMS) which offers a replication instance that connects to the source database, reads the source data, formats the data for consumption by the target database and loads the data into the target database.\n\nThe organization integrates AWS Control to check if AWS DMS replication instances are public or private. The tool checks the 'PubliclyAccessible' field to determine this. If it's public, it means the instance can be accessed outside of the replication network, which can be a major security issue. On the other hand, if it's private, it ensures that the instance is only accessible within the network. \n\nEnsuring that their DMS replication instance is private is critical for this organization, because both their source and target databases are within the same network, hence they don't need to expose the replication instance to public internet. This ensures that the data migration is secure, and prevents unauthorized access to their database. \n\nMoreover, their network is also connected to the replication instance's VPC using AWS Direct Connect. This allows them to establish a dedicated network connection from their network to AWS, which can be more reliable, faster, and more secure than a standard internet connection. This example demonstrates the importance of AWS Control in maintaining security during database migration."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_eks_2",
    "Title": "2 EKS clusters should run on a supported Kubernetes version",
    "Description": "This control checks whether an Amazon EKS cluster is running on a supported Kubernetes version. The control fails if the EKS cluster is running on an unsupported version. If your application doesn't require a specific version of Kubernetes, we recommend that you use the latest available Kubernetes version that's supported by EKS for your clusters.",
    "QueryID": "aws_eks_cluster_with_latest_kubernetes_version",
    "DocumentURI": "policies/aws_foundational_security_eks_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "vulnerability_patch_and_version_management"
      ],
      "foundational_security_item_id": [
        "eks_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EKS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance with this AWS control can be broken down into two major areas: \n\n1. **Operational risks** - Running an Amazon EKS cluster on an unsupported Kubernetes version can lead to operational issues. An unsupported version may have known bugs, security vulnerabilities, or performance issues that can affect your cluster's reliability, availability, and efficiency. If a fault in the unsupported version causes an outage, it can lead to downtime for your services, which can translate into a loss of business.\n\n2. **Security risks** - Unsupported versions of Kubernetes are not patched for known vulnerabilities. This exposes your clusters to potential attacks that could compromise the integrity, confidentiality, and availability of your data, resulting in data breaches. The cost of such breaches can be devastating due to financial penalties, reputational damage, and loss of customer trust.\n\n3. **Maintenance and Support costs** - Troubleshooting and resolving issues in unsupported Kubernetes versions can be more complex and time-consuming, leading to increased operational costs. Besides, AWS support may not provide help for issues related to unsupported versions, which could lead to additional costs if outside expertise is required.\n\nTherefore, it's critical to comply with this AWS control to ensure your EKS clusters are running efficiently, securely, and with proper support available."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, there's a company called XYZ corp. They have several EKS clusters running on AWS for their various applications. The DevOps team periodically updates these clusters to maintain the latest functionalities, improved performance and security fixes that come with newer versions. \n\nHowever, updating Kubernetes version is not always straightforward and might lead to complications if not done properly. This is where the AWS control becomes useful. Any time the DevOps team performs updates, the control verifies if the EKS clusters are running on a version supported by AWS. \n\nFor example, suppose the team unwillingly try to install a version not supported by EKS, the control alerts the team through a failure message, preventing potential downtime or issues in the running application. This saves XYZ corp from costly mistakes that could otherwise lead to downtime, potential security vulnerabilities, or a loss in functionality."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_waf_8",
    "Title": "8 A WAF global web ACL should have at least one rule or rule group",
    "Description": "This control checks whether an AWS WAF global web ACL contains at least one WAF rule or WAF rule group. The control fails if a web ACL does not contain any WAF rules or rule groups.",
    "QueryID": "aws_waf_web_acl_rule_attached",
    "DocumentURI": "policies/aws_foundational_security_waf_8.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_configuration"
      ],
      "foundational_security_item_id": [
        "waf_8"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/WAF"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can be broken down into two key areas - Security Risks and Financial Impacts:\n\n1. **Security Risks:** AWS WAF Global Web ACL is an integral part of any application's security strategy in the AWS environment. If a Web ACL does not contain any WAF rules or rule groups, it leaves the application vulnerable to a variety of attacks such as SQL Injection, Cross-Site Scripting (XSS), and other application layer attacks. These attacks can lead to data breaches, unauthorized access and control of the application.\n\n2. **Financial Impacts:** The aftermath of a security breach or cyber attack can be incredibly costly. These costs can arise from data recovery efforts, regulatory fines for data breaches, damage to the company's reputation resulting in loss of business, and the potential for lawsuits from affected clients or users.\n\nTherefore, non-compliance with this control can lead to serious security incidents and financial liabilities due to a lack of effective barrier to cyber threats."
      ],
      "x-kaytu-usefulness-example": [
        "Consider the following situation:\n\nYou are running an e-commerce website that is set up on AWS and you are using AWS WAF to protect your web application from common web threats. These could potentially harm your business and even lead to loss of sensitive user data.\n\n```markdown\nAWS global web ACL that ensures all your AWS resources, distributed across multiple regions, are protected by at least one AWS WAF rule or rule group. This control is designed to prevent any holes in your security by ensuring that at least some level of threat detection and protection is applied. \n\nIf your AWS WAF web ACL check fails, it could imply that there are unguarded entry points to your application that could potentially be exploited. One example would be a scenario where your application is susceptible to SQL injection attacks because the relevant AWS WAF rule to prevent this is missing.\n\n    - AWS Control: Check if AWS WAF web ACL has at least one rule or rule group\n    - AWS Control States:\n        - Pass: AWS WAF web ACL contains at least one rule or rule group.\n        - Fail: AWS WAF web ACL does not contain any rules or rule groups.\n\n```\n\nIn this scenario, it becomes immediately clear why this AWS Control is useful. It helps ensure that every section of your application is protected against common web attacks. A failure in this control prompts an immediate investigation and resolution to ensure that your application security is tight."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_1",
    "Title": "1 RDS snapshots should be private",
    "Description": "This control checks whether Amazon RDS snapshots are public. This control is intended for RDS instances. It can also return findings for snapshots of Aurora DB instances, Neptune DB instances, and Amazon DocumentDB clusters, even though they are not evaluated for public accessibility. If these findings are not useful, you can suppress them.",
    "QueryID": "aws_rds_db_snapshot_prohibit_public_access",
    "DocumentURI": "policies/aws_foundational_security_rds_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "rds_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can be significant and pose potential risks, including:\n\n**1. Data Breach**: Unrestricted access to your RDS snapshots could lead to unauthorized access to your data, including critical and sensitive information. This could result in a possible data breach, causing financial loss, reputational damage, and potentially lead to lawsuits and penalties.\n\n**2. Loss of Intellectual Property**: If your RDS snapshots contain proprietary information related to your organizations Intellectual Property, public exposure could lead to theft or misuse of this information.\n\n**3. Regulatory Non-compliance**: If your organization is subject to regulations like GDPR, HIPAA or other compliance requirements, making your RDS snapshots public could result in non-compliance, leading to fines and penalties.\n\n**4. Unwanted Charges**: If your RDS snapshot is public, there can be unauthorized usage bringing additional and potentially significant AWS charges.\n\n**5. Exposure of Private Data**: If the snapshots contain PII (Personal Identifiable Information), making it publicly accessible could lead to severe privacy concerns and legal implications.\n\nTo avoid these risks, it's essential to ensure that your RDS snapshots are not publicly accessible or shared only in a controlled and secure manner."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA team of developers at XYZ Corporation is using Amazon Relational Database Service (RDS) to manage their databases for an application. In order to ensure security, it's critical to ensure that their RDS snapshots are not publicly accessible, preventing any unauthorized access to sensitive information. \n\nAmong the resources they're using, they also have Aurora DB instances, Neptune DB instances, and Amazon DocumentDB clusters. Even though these are not evaluated for public accessibility, the control can still return findings for their snapshots. \n\nHowever, since XYZ Corporation is more focused on their RDS instances and else data is not sensitive, they find the findings regarding the other instances not useful, thus they decide to suppress them. \n\nUsing AWS control in this way, XYZ Corporation can maintain the security of their RDS, making sure that no snapshots are publicly accessible, and tailors their security measures to their specific needs by suppressing unneeded outcomes. \n\n```\n\u003cExample\u003e\n   \u003cCompany\u003eXYZ Corporation\u003c/Company\u003e\n   \u003cServices\u003e\n      \u003cService\u003eAmazon RDS\u003c/Service\u003e\n      \u003cService\u003eAurora DB instances\u003c/Service\u003e\n      \u003cService\u003eNeptune DB instances\u003c/Service\u003e\n      \u003cService\u003eAmazon DocumentDB clusters\u003c/Service\u003e\n   \u003c/Services\u003e\n   \u003cControl\u003eCheck Public Accessibility of snapshots\u003c/Control\u003e\n   \u003cSuppressedFindings\u003eAurora DB, Neptune DB, DocumentDB\u003c/SuppressedFindings\u003e\n   \u003cImportance\u003eMaintaining security of sensitive data\u003c/Importance\u003e\n\u003c/Example\u003e\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_2",
    "Title": "2 RDS DB instances should prohibit public access, determined by the PubliclyAccessible configuration",
    "Description": "This control checks whether Amazon RDS instances are publicly accessible by evaluating the PubliclyAccessible field in the instance configuration item. Neptune DB instances and Amazon DocumentDB clusters do not have the PubliclyAccessible flag and cannot be evaluated. However, this control can still generate findings for these resources. You can suppress these findings. ",
    "QueryID": "aws_rds_db_instance_prohibit_public_access",
    "DocumentURI": "policies/aws_foundational_security_rds_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "rds_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control may result in several costs:\n\n1. **Security Cost**: If Amazon RDS instances are explicitly marked as publicly accessible, it essentially means that they can be accessed from any source on the internet, and increases the surface area for attacks. While AWS provides robust security features, leaving databases publicly accessible can potentially offer an entry point to malicious actors who may exploit vulnerabilities or weak passwords to gain unauthorized access. \n\n2. **Data Breach Cost**: The unauthorized access could lead to a data breach, resulting in not just loss of data, but also financial penalties, legal liabilities, and a blow to the reputation of the organization.\n\n3. **Regulatory Cost**: Non-compliance could also result in penalties due to failure to adhere to data protection legislations such as GDPR (General Data Protection Regulation) in Europe, or CCPA (California Consumer Privacy Act) in the United States. \n\n4. **Operational Cost**: In the event of a data breach due to non-compliance, companies might also have to bear operational costs related to rectifying the breach, such as data recovery, system repairs, increased customer service support, and potential business interruption.\n\nIt is therefore highly advised to comply with this AWS Control to ensure your RDS instances are not publicly accessible and reduce chance of unnecessary risks and subsequent costs."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, consider a company X that has sensitive customer data stored in their Amazon RDS instances. An AWS administrator erroneously makes some of these instances publicly accessible while setting them up, unintentionally exposing potentially sensitive information to anyone on the internet. \n\nThis AWS control would evaluate the PubliclyAccessible field in the instance configuration item and generate findings for these resources, alerting the security teams. They can quickly fix the misconfiguration and prevent any data exposure or potential breaches. \n\nThis control is useful because it helps maintain data privacy standards by ensuring that only authorized users and processes can access RDS instances. It also supports compliance with regulations that require data to be stored securely and not exposed to public internet. \n\n```markdown\nExample:\nCompany X uses AWS control to check the accessibility of their Amazon RDS instances. The control noticed that few instances were publicly accessible, which could risk exposure of sensitive data. Upon receiving the findings, their AWS administrators quickly made the necessary changes, preventing a potential data breach and ensuring compliance with their strict data privacy standards.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_3",
    "Title": "3 RDS DB instances should have encryption at rest enabled",
    "Description": "This control checks whether storage encryption is enabled for your Amazon RDS DB instances. This control is intended for RDS DB instances. However, it can also generate findings for Aurora DB instances, Neptune DB instances, and Amazon DocumentDB clusters. If these findings are not useful, then you can suppress them.",
    "QueryID": "aws_rds_db_instance_encryption_at_rest_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "rds_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The consequences of non-compliance to this AWS Control can be grave financially, legally, and in terms of reputation. \n\n1. **Financial Costs**: If data breaches occur because of unencrypted data, organizations may face heavy fines. Data breaches can also lead to expensive remedial measures such as notification of affected parties, offering identity protection services, and more. Furthermore, long-term damages might include loss of business due to consumer mistrust.\n\n2. **Legal Costs**: Non-compliance can leave an organization open to lawsuits from affected parties. In many jurisdictions, it is required by law to protect personal data, with penalties for failure to do so. \n\n3. **Reputation Damage**: If data is compromised due to unencrypted storage, it can harm the reputation of a company. Loss of trust can result in a loss of customers, which can adversely affect the company's bottom line.\n\nTo avoid these consequences, it is vital to ensure that storage encryption is enabled for all Amazon RDS DB instances. It not only secures the data at rest and in transit but also satisfies several compliance regulations. Suppressing findings of unencrypted instances is not advisable unless there is a valid reason."
      ],
      "x-kaytu-usefulness-example": [
        "```\nExample:\n\nA healthcare company that stores patient personal and medical data in Amazon RDS DB instances needs to observe HIPAA compliance regulations. In this context, this AWS control can verify whether storage encryption is enabled in those instances, which is crucial to protect the sensitive data from unauthorized access or breaches. If encryption is not enabled, it will warn the security team, triggering the necessary steps to rectify the situation. This helps the company maintain compliance, ensure data security, and prevent potential legal and financial consequences.\n\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_kms_1",
    "Title": "1 IAM customer managed policies should not allow decryption actions on all KMS keys",
    "Description": "Checks whether the default version of IAM customer managed policies allow principals to use the AWS KMS decryption actions on all resources. This control uses Zelkova, an automated reasoning engine, to validate and warn you about policies that may grant broad access to your secrets across AWS accounts. This control fails if the kms:Decrypt or kms:ReEncryptFrom actions are allowed on all KMS keys. The control evaluates both attached and unattached customer managed policies. It does not check inline policies or AWS managed policies.",
    "QueryID": "aws_kms_key_decryption_restricted_in_iam_customer_managed_policy",
    "DocumentURI": "policies/aws_foundational_security_kms_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "kms_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/KMS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can have several ramifications:\n\n## Security Risks\n\n1. **Unauthorized Access:** The most immediate risk is that of unauthorized access. If IAM policies allow all principals to use AWS KMS decryption actions on all resources, it can potentially lead to unauthorized users gaining access to sensitive data. Encryption is used to safeguard data and unauthorized decrypting means the safeguard is compromised.\n\n2. **Data Breach:** Moreover, if unauthorized users can access KMS keys and decrypt data, it could lead to a data breach. Data breaches can damage a company's reputation, result in valuable data been stolen, and may also involve major legal and financial consequences.\n\n## Financial Consequences\n\n3. **Remediation Cost:** A company might have to invest heavily in identifying the vulnerability, rectifying it, and restoring the compromised systems. \n\n4. **Regulatory Fines:** Depending on legislation where the company operates, a data breach could result in significant fines. For example, under GDPR (General Data Protection Regulation), penalties can be as high as €20 million or 4% of the company's annual global turnover, whichever is higher.\n\n5. **Damage to Reputation and Trust:** A company might also suffer from damage to its reputation which might result in loss of customers, thus impacting the bottom line. Trust, once lost, can be hard to regain and might also deter potential customers from engaging with the company.\n\n## Operational Disruptions\n\n6. **Operational Disruption:** Depending on the severity of the unauthorized access, there might be disruptions in the operations of the company. These disruptions can result in the stoppage of critical services, impacts on delivery timelines, customer disappointments, and overall business impacts. \n\nFor these reasons, compliance with this AWS Control ensures that only authorized principals have access to perform sensitive operations such as decryption. By ensuring least privilege access, companies can ensure that they are protected against potential unauthorized access and the associated costs."
      ],
      "x-kaytu-usefulness-example": [
        "This AWS control is useful in securing the AWS Key Management Service (KMS). \n\nFor instance, consider a large enterprise that operates with multiple AWS accounts and IAM roles. This organization requires strict control over who can decrypt sensitive data. In order to ensure that only specific principals have access, this control would flag any IAM customer managed policies that allow any principal to use the AWS KMS decrypt action on all resources. \n\nUsing this, the organization can identify policies with potentially risky configurations and adjust them as necessary to tighten security. \n\nThis control is beneficial in preventing any unwanted or unauthorized access to decrypt sensitive data that could lead to potential data breaches. Also, being automated by using Zelkova, it saves significant time and resources in manually checking and validating policy configurations."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_kms_2",
    "Title": "2 IAM principals should not have IAM inline policies that allow decryption actions on all KMS keys",
    "Description": "Checks whether the inline policies that are embedded in your IAM identities (role, user, or group) allow the AWS KMS decryption actions on all KMS keys. This control uses Zelkova, an automated reasoning engine, to validate and warn you about policies that may grant broad access to your secrets across AWS accounts. This control fails if kms:Decrypt or kms:ReEncryptFrom actions are allowed on all KMS keys in an inline policy.",
    "QueryID": "aws_kms_key_decryption_restricted_in_iam_inline_policy",
    "DocumentURI": "policies/aws_foundational_security_kms_2.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "kms_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/KMS"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can result in several significant consequences:\n\n1. **Data Breaches**: If any entity within your IAM has broad access to decrypt all keys, it becomes a singular point of failure wherein if it's compromised, all your encryption keys and subsequently, all data protected by these keys, can be decrypted and stolen by malicious actors, leading to data breaches.\n\n2. **Non-Compliance with Data Laws**: The lack of proper controls over who can access and decrypt data can lead to violations of data regulations such as GDPR, CCPA, HIPAA, etc. This can lead to fines and penalties.\n\n    ``\n    GDPR can levy fines up to €20 million (~$22 million) or 4% of annual global turnover.\n    ```\n\n3. **Financial Losses**: Data breaches can result in substantial financial losses. The average cost of a data breach was $3.86 Million worldwide in 2020.\n\n4. **Legal liabilities**: Depending on the data being encrypted, allowing unauthorized access could open you up to legal liabilities.\n\n5. **Reputational Damage**: A data breach or non-compliance with data laws can cause significant damage to your company's reputation, which can have long-term effects on business's profitability and sustainability. \n\nOverall, ensuring compliance with this control not only helps in maintaining the security of your data but can also save you from potential financial losses, legal issues and reputational damage."
      ],
      "x-kaytu-usefulness-example": [
        "Having such an AWS control can be particularly useful in instances where organizations wish to maintain strict security protocols and limit access to encryption keys to specific roles or individuals. \n\nFor example, suppose you're running an eCommerce business with hundreds of employees. To ensure secure transactions and protect sensitive customer information, your system encrypts this data using AWS Key Management Service (KMS). However, you want only specific employees, say your security team, to have access to decrypt this data.\n\nBy using this AWS control, you can check if there are any inline policies attached to your IAM identities that may inadvertently grant unrestricted decryption actions to all KMS keys. If found, you can then take necessary actions to update such policies, thereby preventing unwanted access and potential data breaches. This provides an added layer of security to your encryption keys and hence, your encrypted data."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_4",
    "Title": "4 RDS cluster snapshots and database snapshots should be encrypted at rest",
    "Description": "This control checks whether RDS DB snapshots are encrypted. This control is intended for RDS DB instances. However, it can also generate findings for snapshots of Aurora DB instances, Neptune DB instances, and Amazon DocumentDB clusters. If these findings are not useful, then you can suppress them.",
    "QueryID": "aws_rds_db_snapshot_encrypted_at_rest",
    "DocumentURI": "policies/aws_foundational_security_rds_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "rds_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control that checks the encryption of RDS DB snapshots can be multidimensional. Here are few possible consequences if the RDS DB snapshots are not encrypted:\n\n1. **Security Risks**: If the snapshots are not encrypted, they are highly vulnerable to unauthorized access. Encryption is key in protecting sensitive data at rest. It ensures that even if the data falls into the wrong hands, it can't be read without the decryption keys.\n\n2. **Regulatory Non-Compliance**: Many regulations such as GDPR, CCPA, and HIPAA mandate data encryption. Non-compliance with these regulations can lead to substantial fines as well as legal actions against the organization. The fines can be severe and run high into several millions of dollars depending on the size of the breach and the data compromised.\n\n3. **Loss of Customer Trust**: If a data breach occurs and it becomes public knowledge, it can significantly damage the reputation of your company, leading to a loss of customer trust, which is often far more costly to recover.\n\n4. **Business Continuity Disruptions**: If non-encrypted snapshots were accessed or compromised, the business may need to halt operations to investigate the breach, implement countermeasures, and potentially notify affected parties. This can lead to business disruption which includes lost revenue, lower productivity, and impacts on share value. \n\n5. **Recovery Costs**: In the event of a data breach incident, entities may also be required to pay for notifying users of the breach, credit monitoring services, along with other related recovery, restoration, and litigation costs. \n\nIt’s therefore necessary for cloud data, including RDS DB snapshots, to be encrypted to avoid these potential costs."
      ],
      "x-kaytu-usefulness-example": [
        "If you have an eCommerce application storing sensitive customer data in an RDS DB instance, you may want to ensure that your backup snapshots are encrypted to provide an additional layer of protection. This AWS control will be useful in such scenario to regularly audit your environment and generate findings if any RDS DB snapshots are found unencrypted. For example, the control may alert you to an unencrypted snapshot of your Aurora DB instance, helping you identify a potential security issue and take corrective action in a timely manner."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_5",
    "Title": "5 RDS DB instances should be configured with multiple Availability Zones",
    "Description": "This control checks whether high availability is enabled for your RDS DB instances. RDS DB instances should be configured for multiple Availability Zones (AZs). This ensures the availability of the data stored. Multi-AZ deployments allow for automated failover if there is an issue with Availability Zone availability and during regular RDS maintenance.",
    "QueryID": "aws_rds_db_instance_multiple_az_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "rds_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control could include:\n\n1. **Data Loss**: If only one availability zone (AZ) is used and that AZ experiences a failure, it could result in data loss. \n\n2. **Downtime**: During regular RDS maintenance, if high availability isn't enabled, your DB instance could experience unavoidable downtime. \n\n3. **Disaster Recovery**: If high availability isn't enabled and an AZ goes down, automated failover cannot occur, impairing your disaster recovery process.\n\n4. **Performance Degradation**: During peak load times, single-AZ deployments might not be able to handle high traffic, causing potential latency and performance degradation. \n\n5. **Business Continuity Risk**: Non-compliance can put business continuity at risk if a single AZ fails, due to the lack of an automated failover mechanism. \n\nFinancially, it's hard to estimate an exact cost without specific business values, but any of these scenarios could have significant financial and reputational costs. Besides, note that setting up Multi-AZ deployments has higher costs than single AZ due to the replication of data and instances. But it provides added layers of redundancy and resilience, thus safeguarding businesses from unexpected incidents and avoiding potential business loss."
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider an online retail platform that heavily relies on its database management system for almost all of its operations. The database stores critical information such as customer details, product information, transaction data, etc. If single availability is enabled and there is an issue with the AZ, the services of the online retail platform will be disrupted, impacting sales and customer experience. However, if high availability is enabled for the RDS DB instances with multi-AZ deployments, in the event of an issue with one AZ, there will be an automatic failover to another AZ. The services of the platform will continue to operate without any disruption. \n\nNot only does this prevent potential revenue losses, but it also ensures the platform maintains a high level of customer service and satisfaction. Furthermore, during scheduled RDS maintenance, there will be no downtime, again ensuring smooth and continuous service. Thus, the AWS control provides a practical and effective solution for maintaining data availability and business continuity.\n \nHere is a potential markup for this scenario:\n\n```markup\n\u003ca href=\"https://aws.amazon.com/rds/details/multi-az/\"\u003eAWS RDS Multi-AZ\u003c/a\u003e High Availability solution has allowed our \u003ci\u003eOnline Retail Platform\u003c/i\u003e to maintain business continuity and seamless service. The automatic failover in the event of issues with an Availability Zone has prevented potential revenue losses and ensured uninterrupted customer experience. Additionally, scheduled RDS maintenance no longer causes downtime, further bolstering our commitment to providing efficient and continuous service.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_kms_3",
    "Title": "3 AWS KMS keys should not be unintentionally deleted",
    "Description": "This control checks whether AWS KMS customer managed keys (CMK) are scheduled for deletion. The control fails if a CMK is scheduled for deletion. CMKs cannot be recovered once deleted. Data encrypted under a KMS CMK is also permanently unrecoverable if the CMK is deleted. If meaningful data has been encrypted under a CMK scheduled for deletion,consider decrypting the data or re-encrypting the data under a new CMK unless you are intentionally performing a cryptographic erasure.",
    "QueryID": "aws_kms_key_not_pending_deletion",
    "DocumentURI": "policies/aws_foundational_security_kms_3.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "data_deletion_protection"
      ],
      "foundational_security_item_id": [
        "kms_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/KMS"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this control can have significant financial, operational, and reputational impact depending on the nature and sensitivity of the data secured by the CMK. \n\n1. **Data Loss**: The biggest cost of non-compliance is the risk of permanent loss of any data encrypted under the CMK. Once the CMK is deleted, you can no longer decrypt this data. If the data lost is critical to business operations this might lead to cessation of operations till a solution is found.\n\n2. **Operational Downtime**: If a key is deleted, any application or service that uses those keys for cryptographic operations will fail. The failure could lead to a standstill of operations leading to operational downtime.\n\n3. **Recovery Costs**: If your data is lost due to CMK deletion, you may have to expend resources to regenerate or recover that data. \n\n4. **Governance, Risk and Compliance Issues**: If the loss of controlled data puts you out of compliance with relevant industry standards or regulations (like GDPR, HIPAA), this could lead to severe fines, lawsuits and legal costs.\n\n5. **Reputation Damage**: A data loss event, especially one affecting customer data can cause loss of customer trust and damage to your business reputation that might result in loss of clients or lower acceptance in the market.\n\nIn order to avoid these costs, it is always important to ensure that not only are you not deleting keys unintentionally, but also that you have sufficient monitoring in place to detect any keys that are scheduled for deletion. You should also regularly rotate your keys and re-encrypt data with new keys as a best practice."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, consider a scenario where your organization is using CMKs for protecting sensitive business data in AWS. Over time, you've used a multitude of keys for encrypting and decrypting various files, and now there's a bulk of CMKs that you want to manage more efficiently.\n\nLet's say, by mistake, one of your team members schedules a CMK for deletion that contains critical data. If not caught in time, this could result in permanent data loss, as once a CMK is deleted, the data it protects becomes irrecoverable.\n\nBy using this AWS control that checks whether AWS KMS customer managed keys are scheduled for deletion, you can accurately monitor the status of your CMKs and prevent such catastrophic incidents. It can alert you if a CMK is scheduled for deletion, giving you the chance to avert potential data loss. Hence, this control is of great importance to ensure your data remains secure and intact in AWS."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_6",
    "Title": "6 Enhanced monitoring should be configured for RDS DB instances and clusters",
    "Description": "This control checks whether enhanced monitoring is enabled for your RDS DB instances. In Amazon RDS, Enhanced Monitoring enables a more rapid response to performance changes in underlying infrastructure. These performance changes could result in a lack of availability of the data. Enhanced Monitoring provides real-time metrics of the operating system that your RDS DB instance runs on. An agent is installed on the instance. The agent can obtain metrics more accurately than is possible from the hypervisor layer.",
    "QueryID": "aws_rds_db_instance_and_cluster_enhanced_monitoring_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_6.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "detection_services"
      ],
      "foundational_security_item_id": [
        "rds_6"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can result in several costly outcomes:\n\n1. **Performance Degradation**: If you do not have Enhanced Monitoring enabled for your RDS DB instances, you might not be aware of performance changes in underlying infrastructure. Early detection of these changes could help prevent a slowdown or even a shutdown of your services. A service degradation or interruption could damage your reputation and result in financial loss. \n\n2. **Increased Downtime**: During a service disruption, being able to quickly identify and troubleshoot underlying performance issues can significantly reduce downtime. Without Enhanced Monitoring, it may take longer to identify the cause of the issue, thus prolonging the disruption and potentially leading to higher downtime costs.\n\n3. **Delayed Decision Making**: Real-time metrics provided by Enhanced Monitoring can be crucial in taking timely data-driven decisions. An absence of these metrics can lead to delayed decisions which could affect the smooth running of business operations.\n\n4. **Increased Overhead**: Enhanced Monitoring provides accurate metrics by installing an agent on your instance. Without this, you may have to integrate third-party tools or write custom scripts to monitor the performance of your RDS DB instances. This could potentially increase overhead costs.\n\n5. **Loss of Data**: In worst-case scenarios, unidentified performance changes might even lead to data corruption or loss. The cost of data recovery or the loss of irrecoverable data can be high.\n\n```\nOverall, non-compliance to this AWS Control could cause financial losses due to downtime, poor performance, increased overhead, and even potentially leading to data loss.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "For instance, you are operating an eCommerce website where a healthy database performance is crucial to maintain optimal user experience and uptime. Over time, your user base increases exponentially resulting in heavier database loads. \n\nIf enhanced monitoring isn't enabled on your AWS RDS, you could face unexpected database performance degradations which could cause slowdowns or even an outage of your eCommerce platform. Such incidents could affect your business reputation and result in revenue losses. \n\nBy enabling enhanced monitoring on your AWS RDS, you will gain access to more in-depth, real-time metrics of your database operating system. This allows you to anticipate any impending performance changes in your database infrastructure ahead of time. With these insights, your team can proactively take necessary actions to prevent any possible performance-related issues, thus ensuring your eCommerce platform runs seamlessly, providing optimal user experience."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_7",
    "Title": "7 RDS clusters should have deletion protection enabled",
    "Description": "This control checks whether RDS clusters have deletion protection enabled. This control is intended for RDS DB instances. However, it can also generate findings for Aurora DB instances, Neptune DB instances, and Amazon DocumentDB clusters. If these findings are not useful,then you can suppress them.",
    "QueryID": "aws_rds_db_cluster_deletion_protection_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_7.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "data_deletion_protection"
      ],
      "foundational_security_item_id": [
        "rds_7"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can be both financial and operational, here's why:\n\n1. **Unintentional Data Loss** : If deletion protection is not enabled, an accidental deletion of your RDS cluster could result in permanent data loss. This might require a recovery process which could be lengthy and costly.\n\n2. **Operational Disruption** : In case the crucial data is lost, this might disrupt operations until the system is restored causing unnecessary downtime impacting customer confidence and business.\n\n3. **Data Recovery Costs**: If a DB Instance is deleted, and a recovery is needed, there could be significant cost involved in terms of efforts, time and the resources because the deleted DB instance might not be recoverable or it might require significant resources to restore from backup (if available).\n\n4. **Business Continuity Risk**: Depending on the criticality of the data stored in the RDS DB or Aurora DB or Neptune DB or DocumentDB clusters, a deletion could pose a significant risk to the continuity of the business. \n\n5. **Compliance Violations**: Many industries are regulated and have compliance directives regarding data protection and preservation. If data protection measures like deletion protection is not enabled, it may cause to compliance violations and potential fines.\n\n6. **Reputation Damage**: In the event that a DB gets deleted and data is lost, there can be damage to the organization's reputation, particularly if the data loss affects customers or users.\n\nIn order to avoid such scenarios, AWS recommends enabling deletion protection and the cost of non-compliance to this control can be high in terms of time, effort, money, and trust."
      ],
      "x-kaytu-usefulness-example": [
        "AWS Control is a valuable tool, particularly in mitigating risks associated with accidental data loss. Here's an example scenario:\n\nFollowing AWS best practices, an organization has dozens of RDS instances running in the cloud. Without safeguards, there's a real potential for accidental deletion of these databases by users who may not fully understand the implications of their actions. The control that checks whether RDS clusters have deletion protection enabled can prevent unwanted loss of data, avoiding potential setbacks and disruptions in service.\n\nFor a more detailed case:\n\nAn E-Commerce company uses AWS RDS clusters to store all the data related to their product inventory, sales, and customer information. Continuity in operations is critical and any loss of data holds significant implications, impacting their business status and customer trust. \n\nBy implementing and using the AWS Control that checks the deletion protection status, the company ensures all their RDS instances are sufficiently protected from accidental deletions. Especially given the dynamic and often high-stress environment, teams working on product updates or database migrations are prone to making operational errors which could lead to unwanted deletions. In such situations, having this control and guaranteeing the deletion protection feature is enabled can provide immense benefits in terms of data security and operational continuity.\n\nFor Aurora DB instances, Neptune DB instances, and Amazon DocumentDB clusters, the AWS Control can provide added layers of security, especially when experimenting or running tests. Even if these particular findings might not always prove useful, having the capacity to suppress them demonstrates the flexible and customizable nature of this powerful control."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_8",
    "Title": "8 RDS DB instances should have deletion protection enabled",
    "Description": "This control checks whether your RDS DB instances that use one of the listed database engines have deletion protection enabled. DatabaseEngines: mariadb,mysql,oracle-ee,oracle-se2,oracle-se1,oracle-se,postgres,sqlserver-ee,sqlserver-se,sqlserver-ex,sqlserver-web.",
    "QueryID": "aws_rds_db_instance_deletion_protection_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_8.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "data_deletion_protection"
      ],
      "foundational_security_item_id": [
        "rds_8"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS (Amazon Web Services) control can be significant. Here's why:\n\n## Data Loss\n\nIf deletion protection is not enabled and a RDS DB instance is accidentally or maliciously deleted, all data stored in it could be lost. This could have catastrophic effects on business operations especially if the database contained vital information needed for day-to-day activities.\n\n## Financial Cost\n\nData loss due to non-compliance could necessitate expensive recovery measures. If the data cannot be recovered, reshooting, recompilation, or regeneration could come at a severe financial cost.\n\n## Legal Consequences\n\nFor some businesses, particularly those in heavily regulated industries (like healthcare, finance, etc), deletion of some types of data could lead to compliance issues with data protection laws and regulations. This can result in legal penalties and fines.\n\n## Reputation Damage\n\nData loss can also lead to reputation damage as customers or clients may lose trust in the organization's ability to secure their data effectively.\n\n## Downtime\n\nFinally, if a crucial database is deleted and no back-ups are available, it may lead to members of the organization not being able to conduct their duties until the issue is solved. This interruption can be a major cost in terms of productivity lost.\n\nSo the cost of non-compliance is not just financial but can have legal, operational, and reputation-related repercussions as well. Therefore it is highly recommended to enable deletion protection on RDS DB instances."
      ],
      "x-kaytu-usefulness-example": [
        "Let's imagine a scenario where a company named Tech Corp is using AWS RDS instances for various database engines such as mysql, postgres, and oracle-se for different purposes. All these databases contain sensitive and crucial data related to their business operations. \n\nOne day, an inexperienced admin accidentally tries to delete one of these RDS instances which could have led to data loss and a massive hiccup in their operations. But luckily, they had enabled the AWS Control for deletion protection. This control prevented the accidental deletion of the RDS DB instance in real-time. \n\nBy having this AWS Control in place, Tech Corp was able to save crucial and sensitive data loss, avoided a business downtime and further safeguarded its AWS RDS instances from accidental or unplanned deletions.\n\n```markdown\n**Instance:**\n\nCompany: Tech Corp\n\nApplication: AWS RDS instances (mysql, postgres, oracle-se)\n\nUsefulness of AWS Control: Saved Tech Corp from potential loss of crucial data and unplanned business downtime by preventing accidental deletion of AWS RDS DB instance.\n```\nAbove is an example instance illustrating the usefulness of the AWS Control that checks RDS DB instances for deletion protection."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_9",
    "Title": "9 Database logging should be enabled",
    "Description": "This control checks whether the logs of Amazon RDS are enabled and sent to CloudWatch Logs. RDS databases should have relevant logs enabled. Database logging provides detailed records of requests made to RDS. Database logs can assist with security and access audits and can help to diagnose availability issues.",
    "QueryID": "aws_rds_db_instance_logging_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_9.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "rds_9"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS control that checks whether Amazon RDS logs are enabled and sent to CloudWatch Logs can lead to the following costs:\n\n1. **Security Risks**: If database logs are not enabled, it can make it harder to trace any unauthorized access or security breaches in your RDS databases. This can result in a significant cost if confidential data gets leaked or if it causes a system breakdown.\n\n2. **Audit Challenges**: Database logs provide necessary details required for access audits. Without these enabled, it could potentially result in non-compliance during audits, which could attract fines or sanction by regulatory authorities.\n\n3. **Incident Response and Troubleshooting Delays**: Database logs assist in identifying and diagnosing any availability issues. Without these, the incident response time would be larger, leading to higher downtime for the database services. This could impact business services relying on these databases and result in financial loss.\n\n4. **Forensic Costs**: Forensic investigation of any security incident would be severely hampered, potentially increasing both the time and cost required to investigate and resolve the incident, and to determine the extent of any compromise of data.\n\n5. **Non-compliance Costs**: Not meeting industry-specific compliance requirements, such as HIPAA for healthcare or PCI DSS for payment card data, can result in significant penalties and loss of customer trust.\n\nComplying with such AWS controls or best practices not only represents a good security posture but also has potential implications for the overall financial health of an organization. Hence, it should be a part of any comprehensive risk management strategy."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, a financial company uses RDS (Relational Database Service) to handle its database workloads. They are regulated by compliance requirements which mandate rigorous security audits. A breach occurs, and the company must investigate. \n\nWith Amazon RDS logs enabled and sent to CloudWatch logs, they have a detailed record of all database requests. They can pinpoint unusual queries and unauthorized access leading up to the breach, identifying the source and method of the attack. This ability to audit helps the company meet its compliance requirements, address the breach, improve security, and prevent future attacks.\n\nIn addition, if their database experiences availability issues, the logs can assist in troubleshooting the cause. They can understand whether heavy database requests at certain times are causing the issues, or if there are other underlying aspects they need to address. Thus, these logs serve both a security and an operational advantage for the financial company."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ssm_1",
    "Title": "1 EC2 instances should be managed by AWS Systems Manager",
    "Description": "This control checks whether the EC2 instances in your account are managed by AWS Systems Manager. Systems Manager is an AWS service that you can use to view and control your AWS infrastructure. To help you to maintain security and compliance, Systems Manager scans your managed instances. A managed instance is a machine that is configured for use with Systems Manager. Systems Manager then reports or takes corrective action on any policy violations that it detects. Systems Manager also helps you to configure and maintain your managed instances.",
    "QueryID": "aws_ec2_instance_ssm_managed",
    "DocumentURI": "policies/aws_foundational_security_ssm_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "inventory"
      ],
      "foundational_security_item_id": [
        "ssm_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SSM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the AWS control that checks whether EC2 instances are managed by AWS Systems Manager can have several implications:\n\n1. **Increased Risk of Security Breaches:** Without using AWS Systems Manager, organizations might not have sufficient oversight over their EC2 instances. This can lead to security vulnerabilities, making it easier for bad actors to gain unauthorized access to sensitive information or disrupt business operations.\n\n2. **Compliance Violations and Fines:** For organizations required to meet specific regulatory standards, failure to properly manage and monitor EC2 instances could result in non-compliance, leading to potential fines and damaging their reputation.\n\n3. **Higher Operational Costs:** Without the benefits of AWS Systems Manager, there could be a rise in operational costs. It might require more manual intervention to manage and maintain EC2 instances to ensure optimal performance, availability, and security.\n\n4. **Inefficiency:** The failure to use AWS Systems Manager could lead to inefficiency. It increases the time and resources required to detect, report, and remediate policy violations. \n\n5. **Reduced System Availability:** Unmanaged EC2 instances can lead to system instability and potential downtime, which can impact the availability of services, customer experience, and ultimately, business operations. \n\nUsing AWS Systems Manager for managing EC2 instances ensures streamlined operations, better security and governance, and improved system health and performance. Non-compliance with this control heightens risks and can lead to various negative repercussions."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, a part of an organization's Compliance team desires to ensure that all EC2 instances within their AWS infrastructure are completely monitored and controlled for integrity, security, or failure detection reasons. To accomplish this, they employ AWS Systems Manager to perform automated verification and resolution of any potential issues or violations occurring on these instances.\n\nIn a situation where the organization has hundreds of EC2 instances, manually checking each one for AWS Systems Manager's management would be incredibly time-consuming and prone to human error. This is where the control comes into play. It automates the process, promptly identifying instances not yet managed by AWS Systems Manager and empowering the team to take corrective measures. They could employ Systems Manager to upgrade instances, enforce compliance, or apply patches, thus ensuring improved security, compliance, and operational efficiency.\n\nThe benefit is amplified even further when the organization operates on a global scale, saving considerable time and reducing the risk of missing unmanaged instances that could potentially become a weak link in their security posture or operational performance. \n\n```markdown\n**Scenario**\n- Company: GlobalPay Inc, an international online payment processing company.\n- Concern: Having all their EC2 instances under the management of AWS Systems Manager to ensure strict compliance and maintain high-level security.\n- Control: AWS Control checking the management of EC2 instances by Systems Manager is implemented.\n- Benefits: The control will automate the identification process of unmanaged EC2 instances, therefore enhancing GlobalPay Inc's security posture, maintaining compliance, and improving operational efficiency.\n\nUsage in this context, verifies all EC2 instances are under proper management and any gaps in compliance or security are promptly addressed.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_sns_1",
    "Title": "1 SNS topics should be encrypted at rest using AWS KMS",
    "Description": "This control checks whether an SNS topic is encrypted at rest using AWS KMS.",
    "QueryID": "aws_sns_topic_encrypted_at_rest",
    "DocumentURI": "policies/aws_foundational_security_sns_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "sns_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SNS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with the aforementioned AWS control which checks whether an SNS (Simple Notification Service) topic is encrypted at rest using AWS KMS (Key Management Service) can lead to potential severe consequences, including financial, operational, and reputation costs.\n\n1. **Security Risks**: If SNS messages aren’t encrypted using a KMS key, the data may be exposed to unauthorized entities, which can lead to data breaches. The resulting potential loss of sensitive information could attract hefty fines and legal actions.\n\n2. **Cost of Data Breach**: The direct financial impact of a security breach can be enormous. The cost can include investigation, remediation, notification, credit monitoring, legal fees for defense, and settlements or judgments.\n\n3. **Compliance Violations**: Non-compliance can lead to a failure in various compliance certifications that require encryption at rest, such as GDPR, PCI DSS, or HIPAA. Non-compliance fines can range from thousands to millions of dollars.\n\n4. **Loss of Customer Trust**: A security breach can result in a significant loss of trust from customers, impacting a company's reputation and ultimately resulting in a loss of business.\n\n5. **Downtime**: Investigating a security breach, and potentially recovering lost data, can lead to long periods of downtime, impacting customer satisfaction and revenue in the short term.\n\nTo avoid these potential costs, it is recommended to comply with the AWS control of encrypting SNS topics at rest using AWS KMS."
      ],
      "x-kaytu-usefulness-example": [
        "If a company is using AWS Simple Notification Service (SNS) to manage their publish/subscribe messaging and mobile notifications, they must ensure their sensitive data is secure in order to maintain compliance and confidentiality. A common example might be a e-commerce company that uses SNS to send transaction-related updates and notifications to its users.\n\n```markdown\nAn e-commerce company requires a secure process for sending out transactional updates. It uses AWS SNS to send these messages, but it needs a way to ensure that these messages are securely stored in case of any audits or data scrutiny. By using this control to check if AWS SNS topics are encrypted at rest using AWS Key Management Service (KMS), they can ensure that all messages exchanged are encrypted and securely stored. This would not just improve the over-all security posture of the company but also help in meeting any regulatory or compliance requirements.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ssm_2",
    "Title": "2 All EC2 instances managed by Systems Manager should be compliant with patching requirements",
    "Description": "This control checks whether the compliance status of the Amazon EC2 Systems Manager patch compliance is COMPLIANT or non compliant after the patch installation on the instance. It only checks instances that are managed by Systems Manager Patch Manager.",
    "QueryID": "aws_ssm_managed_instance_compliance_patch_compliant",
    "DocumentURI": "policies/aws_foundational_security_ssm_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "detection_services"
      ],
      "foundational_security_item_id": [
        "ssm_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SSM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can result in various costs:\n\n1. **Security vulnerabilities**: If your Amazon EC2 instances are not regularly patched and updated, they may become vulnerable to security risks and attacks. This could lead to unauthorized access, data breaches, or other types of cyber-attacks, potentially leading to significant financial loss.\n\n2. **Regulatory fines**: Many industries are required to comply with regulations that mandate regular patching and updates to systems to avoid security risks. Non-compliance could result in heavy fines and penalties.\n\n3. **Operational disruption**: If systems are not patched, they may become unstable or experience performance issues, leading to disruption in services and business operations. This could result in lost revenue and customer dissatisfaction.\n\n4. **Reputation damage**: Suffering a security breach or failure to meet regulatory requirements could seriously damage a company’s reputation, leading to loss of customer trust and future business opportunities.\n\n5. **Resource wastage**: Without the automated compliance check, manual effort may be required to ensure instances are correctly patched, resulting in inefficient use of resources.\n\nTherefore, it's crucial to ensure compliance with this control to avoid these potential costs."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, a company XYZ is using AWS services for their business processes and multiple EC2 instances are running. They are using the AWS System Manager Patch Manager to maintain the systems and apply patches regularly. \n\nTo verify and ensure that all patches are applied correctly and all instances are compliant, the AWS Control to check the Amazon EC2 Systems Manager patch compliance status is employed. When the patch installation is done, it audits all the instances and provides a report whether the instance is COMPLIANT or non-compliant based on the patching status. \n\nThis helps the company to maintain strong security measures to prevent any attacks from unpatched vulnerabilities. By using this control, Company XYZ can proactively check the patch compliance status, thereby mitigating risks and ensuring the smooth operation of business processes. \n\nThe report generated from the control can be beneficial while doing any security audits or in case of any security breach for understanding the system's status at any given point. \n\n```\n\u003cExample Instance\u003e\n{\n    \"resources\": [\n        {\n            \"awsAccountId\": \"123456789012\",\n            \"resourceType\": \"AWS::EC2::Instance\",\n            \"resourceId\": \"i-05abcd1e987654321\",\n            \"resourceName\": \"EC2 Instance\",\n            \"complianceStatus\": \"COMPLIANT\",\n            \"PatchManager\": \"Managed\"\n        },\n        {\n            \"awsAccountId\": \"123456789012\",\n            \"resourceType\": \"AWS::EC2::Instance\",\n            \"resourceId\": \"i-05efgh2i345678910\",\n            \"resourceName\": \"EC2 Instance\",\n            \"complianceStatus\": \"NON_COMPLIANT\",\n            \"PatchManager\": \"Managed\"\n        }\n    ]\n}\n\u003c/Example Instance\u003e\n```\nEach entry indicates the compliance status of an EC2 instance managed by the Patch Manager.\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_sns_2",
    "Title": "2 Logging of delivery status should be enabled for notification messages sent to a topic",
    "Description": "This control checks whether logging is enabled for the delivery status of notification messages sent to an Amazon SNS topic for the endpoints. This control fails if the delivery status notification for messages is not enabled.",
    "QueryID": "aws_sns_topic_notification_delivery_status_enabled",
    "DocumentURI": "policies/aws_foundational_security_sns_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_configuration"
      ],
      "foundational_security_item_id": [
        "sns_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SNS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control might not be financial at first, but it can turn out to be very expensive in the long run. Here are a few potential consequences:\n\n1. **Loss of Visibility and Traceability**: Without logging delivery status for notifications, it becomes difficult to troubleshoot delivery issues, or identify whether the messages have been received by the intended recipient or not. Failed messages or miscommunications may cause systems to fail without alerting the right people in time.\n\n2. **Disruption of Service**: In case of a delivery failure, without a log to identify it, the service disruptions may take longer to diagnose and fix, leading to reduced operational efficiency, slowdowns, or complete unavailability of services.\n\n3. **Impact Auditability**: From a compliance perspective, not having appropriate logging and auditing can lead to poor audit results, particularly if your company is subject to regulations that require proving the sending, receiving, and handling of certain types of messages.\n\n4. **Hinder Incident Response**: In case of a security incident, not having logs can hinder investigation and remediation efforts, opening up the potential for longer system exposure to threats.\n\n5. **Damage to Reputation**: If the delivery failure impacts the end users – a service isn't delivered as promised, available when needed, or their data is mishandled – it can damage a business's reputation and customer trust.\n\nEach of these impacts comes with its own costs that can be avoided by complying with the AWS control and ensuring delivery status logging for Amazon SNS topic notifications. However, the actual dollar value of these costs would be difficult to calculate, as it varies greatly depending on the specific applications and use cases."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, a web application might use Amazon SNS (Simple Notification Service) to send emails or SMS messages to its users. The development team of the web application wants to know if there are any failures in the delivery of these messages so they can act on it and improve the service.\n\nHere's where the control comes in. By enabling logging for the delivery status of notification messages, the development team can track each message. If there are any delivery failures, they will appear in the logs and the team can check what went wrong – whether it was non-registration of the endpoint, or connectivity issues with the devices.\n\nWithout this control, such delivery failures might remain unnoticed, leading to customer dissatisfaction. Thus, the control helps in not only identifying, rectifying, and mitigating such issues but also providing a better user experience for customers.\n\nIn a markup format, it can be:\n\n```xml\n\u003cAWSControl\u003e\n  \u003cName\u003eCheck Delivery Status Logging for Amazon SNS\u003c/Name\u003e\n  \u003cPurpose\u003eTo validate if logging is enabled for delivery status of notification messages for the Amazon SNS topic endpoints\u003c/Purpose\u003e\n  \u003cFailCondition\u003eIf the delivery status notifications for Amazon SNS messages are not enabled\u003c/FailCondition\u003e\n  \u003cEffectiveness\u003eWithout this check, any failures in the delivery of SNS messages might go unnoticed, leading to a decrease in customer satisfaction and possible service interruptions\u003c/Effectiveness\u003e\n\u003c/AWSControl\u003e\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ssm_3",
    "Title": "3 Instances managed by Systems Manager should have an association compliance status of COMPLIANT",
    "Description": "This control checks whether the status of the AWS Systems Manager association compliance is COMPLIANT or non compliant after the association is run on an instance. The control passes if the association compliance status is COMPLIANT.",
    "QueryID": "aws_ssm_managed_instance_compliance_association_compliant",
    "DocumentURI": "policies/aws_foundational_security_ssm_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "detection_services"
      ],
      "foundational_security_item_id": [
        "ssm_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SSM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS Systems Manager association compliance status being COMPLIANT can result in several costs.\n\n1. **Security Risk:** If system configurations are not appropriately applied, then the associated instances could be vulnerable to security risks. This could include unauthorized access, data breach, and loss of sensitive data. \n\n2. **Operational Disruption:** Non-compliance may result in misconfigurations which can lead to system failures, outage or suboptimal performance.\n\n3. **Compliance Violations:** If you're operating in a regulated industry (e.g., healthcare, finance), non-compliance may result in violations of regulations such as HIPAA or SOX, which can attract hefty fines and damage to the company's reputation.\n\n4. **Increased Costs:** Prolonged non-compliance can lead to unnecessary costs such as increased vulnerability to security attacks resulting in loss of business, remediation costs, or costs due to regulatory fines. \n\n5. **Resource Management:** Non-compliance may also imply that resources aren't being efficiently used or optimised. \n\n6. **Troubleshooting Time:** Detecting and troubleshooting any issues arising out of non-compliance can take a lot of time and effort, which can distract from other important tasks.\n\nRemember that the cost of non-compliance can vary depending on the specifics of the AWS Systems Manager association compliance that is not being met, the number of instances involved and the type of data or systems they contain."
      ],
      "x-kaytu-usefulness-example": [
        "For a business application that is monitored with AWS Systems Manager, ensuring consistent configuration is crucial for maintaining security, performance, and functionality. During an infrastructure audit, an application implements a set number of configuration associations, such as antivirus updates, patch management, or certain environment variable configurations, and relies on AWS Systems Manager to consistently apply these associations across its fleet of instances.\n\nAWS Systems Manager's association compliance feature, which is checked by this control, forms a core part of the application's audit process. Once all associations have been applied on each instance, the AWS Systems Manager checks compliance and posts the status - COMPLIANT or non compliant. \n\nLet's say an association is expected to install security patches on all instances. The control runs and finds that these security patches were successfully installed and the association is compliant. This means the control passes and confirms that the application's instances are appropriately patched, bolstering the environment's security posture. \n\nHowever, if the control finds that the association to install security patches on an instance was not complied with, then the control fails and alerts the application administrators that a certain instance is non-compliant, possibly leaving it vulnerable. This gives administrators the chance to remediate the situation before it can be exploited. \n\nThis AWS control thus plays a crucial role in ensuring the security and compliance of an application running on AWS."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ssm_4",
    "Title": "4 SSM documents should not be public",
    "Description": "This control checks whether AWS Systems Manager documents that are owned by the account are public. This control fails if SSM documents with the owner Self are public.",
    "QueryID": "aws_ssm_document_prohibit_public_access",
    "DocumentURI": "policies/aws_foundational_security_ssm_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resources_not_publicly_accessible"
      ],
      "foundational_security_item_id": [
        "ssm_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SSM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control can be costly in several ways:\n\n1. **Data Breaches**: The most significant concern is a risk of data breaches and unauthorized access. If AWS Systems Manager documents are public, they are accessible to anyone, potentially offering access to sensitive company information, client data, or system configurations, which can all be manipulated: a violation which could be a gateway for cyber-attacks, disruption of systems or services, data theft or data loss.\n\n2. **Non-compliance with Legal \u0026 Regulatory Requirements**: If your organization operates within an industry that requires stringent data compliance standards such as the GDPR, CCPA, or HIPAA, then non-compliance could result in substantial legal penalties and affect your organization's reputation.\n\n3. **Financial Loss**: Depending on the scale and importance of the data held within the AWS Systems Manager documents, there could be considerable financial implications. These could arise from possible legal fines, the cost required to fix data breaches, and potential loss of business due to a damaged reputation.\n\n4. **Loss of Intellectual Property**: If the AWS Systems Manager documents contain proprietary information or data related to intellectual property, making them public could expose them to competitors or bad actors which could drastically affect the company’s competitive advantage or result in substantial losses.\n\nRemember that while AWS provides tools and services to help manage privacy and data protection, the responsibility of implementing and maintaining these controls largely lies with the user operating within the Shared Responsibility Model. As such, it's critical to ensure proper configurations to protect your data."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, you are a system administrator managing a number of EC2 instances in your AWS account. You use AWS Systems Manager documents to automate common management tasks on these instances.\n\nHowever, making these SSM documents public could expose sensitive data or scripts to the public, posing a potential security risk. Therefore, you want to ensure that all SSM documents owned by your account are not public. \n\nWith this AWS Control, you can regularly monitor the status of your SSM documents. If any of them are found to be public, the control will fail and alert you, so you can quickly address the issue and maintain the security of your AWS resources.\n\nExample in Markup:\n```\nAccount: [Your AWS Account ID]\nControl: AWS Systems Manager documents owned by the account are not public\nStatus: FAIL\n```\nHere, the control is failing which means there are SSM documents owned by your account that are public. This gives you an opportunity to rectify the issue and ensure the security of your SSM documents."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_sqs_1",
    "Title": "1 Amazon SQS queues should be encrypted at rest",
    "Description": "This control checks whether Amazon SQS queues are encrypted at rest.",
    "QueryID": "aws_sqs_queue_encrypted_at_rest",
    "DocumentURI": "policies/aws_foundational_security_sqs_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "sqs_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SQS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control could cost an organization in several ways:\n\n1. **Data Breach Costs**: In case of a data breach, sensitive information could be exposed if Amazon SQS queues are not encrypted at rest. The cost of a data breach can run into millions, varying with the size of data and the nature of data lost.\n\n    - **Financial Damage**: The direct financial costs may include fines, loss of business, and litigation costs.\n    - **Reputation Damage**: The breach could also damage the organization's reputation, leading to a decline in business and customer trust.\n    - **Remediation Costs**: The remediation and recovery processes can also cost the organization in terms of resources and time. \n\n2. **Compliance Violation Penalties**: When dealing with sensitive data, especially in industries like healthcare and finance, there are often regulatory compliance requirements that need to be met. Non-compliance with this control could lead to heavy penalties such as fines, sanctions, or even loss of license to operate.\n\n3. **Loss of Business Continuity**: In the event that encrypted data needs to be restored or accessed and it's found that data was not encrypted at rest, it could lead to downtime, loss of service, and potential loss of business continuity.\n\n4. **Potential Loss of Data**: If the data is compromised in a breach or cyber attack and is not encrypted, there is a risk of irreversible loss if the attacker decides to delete or alter the unencrypted data.\n\nIn summary, the cost of non-compliance to this control could have significant financial, reputational, operational, and legal implications. Therefore, it is critical to ensure Amazon SQS queues are encrypted at rest for data protection."
      ],
      "x-kaytu-usefulness-example": [
        "In an e-commerce application, messages containing sensitive user information like credit card details, addresses, etc are being passed through Amazon SQS for various services to process and handle. Data at rest encryption ensures whether these messages stored within the SQS queue are encrypted, providing extra security and making it harder for unauthorized access. If the check reveals that encryption is not enabled, that would mean these sensitive data could easily be exposed if an unexpected data breach happens. Therefore, enabling encryption at rest for these SQS queues would be instrumental in protecting the confidentiality and integrity of the user data."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elb_10",
    "Title": "10 Classic Load Balancers should span multiple Availability Zones",
    "Description": "This control checks whether a Classic Load Balancer has been configured to span multiple Availability Zones. The control fails if the Classic Load Balancer does not span multiple Availability Zones.",
    "QueryID": "aws_elb_classic_lb_multiple_az_configured",
    "DocumentURI": "policies/aws_foundational_security_elb_10.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "elb_10"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ELB"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control can incur various costs, both financial and operational, including:\n\n1. **Potential for service disruption.** If your Classic Load Balancer isn't configured to span multiple Availability Zones (AZs) and the AZ it resides in suffers from an outage or disruption, your services/applications could become entirely unavailable. This can lead to lost business, compensation claims, and damage to your reputation.\n\n2. **High Recovery Cost.** In case of a singled-out AZ failure, the process to recover to a new, healthy AZ can be costly. There may implicate manual intervention, potential data loss, and service downtime.\n\n3. **Reduced Fault Tolerance.** By not spanning multiple AZs, you're putting all your eggs in one basket. If there's an issue with that single AZ - whether it's an outage, heightened latency, or something else - your service doesn’t have backup alternatives to switch to.\n\n4. **Increased Latency:** If all the resources are in a single AZ, customers physically far from the AZ instance may face higher latency because of the distance their data has to travel. Spreading across multiple AZs can help to reduce this latency.\n\nIn summary, the non-compliance to this control could result in higher operational risk, potential financial loss, and damage to the company's reputation due to service unavailability.\n\n```markdown\n\n### Costs of Non-Compliance to the AWS Control\n\n1. **Service Disruption**: Services or applications could become entirely unavailable during an AZ outage resulting in lost business, compensation claims, and reputation damage.\n2. **Recovery Cost**: Recovering to a new, healthy AZ can be resource-intensive, involving potentially manual intervention, potential data loss, and service downtime.\n3. **Fault Tolerance**: Keeping resources in a single AZ increases the risk should there be any issue with that AZ, as the service lacks backup alternatives.\n4. **Latency**: If all the resources are in a single AZ, customers physically far from the AZ instance may face heightened latency due to the distance their data has to travel.\n\n```\nRemembering to ensure your services span several Availability Zones can prevent these potential issues and make sure your operations continue running smoothly."
      ],
      "x-kaytu-usefulness-example": [
        "```\nThe following use case demonstrates the usefulness of this AWS Control:\n\nA high-traffic online e-commerce platform needs to ensure sustainable and consistent performance for its global users at all times. To ensure that there is no single point of failure, the platform uses AWS's Classic Load Balancer to distribute application traffic across multiple Amazon EC2 instances. \n\nBut what happens if an entire Availability Zone faces an issue or goes down for maintenance? The AWS Control that checks whether the Classic Load Balancer is set up to span multiple Availability Zones becomes critical in such scenarios. \n\nIf this control flags that the Classic Load Balancer does not span multiple Availability Zones, the team can quickly rectify this. By ensuring such a setup, the e-commerce platform can continue to function normally even when an entire Availability Zone is temporarily unavailable. Their global users will not experience any downtime or degraded performance, thus providing a smooth user experience and maintaining the company's reputation for reliability.\n\nThis example emphasizes the importance of this AWS Control in maintaining high availability and ensuring business continuity in the face of unforeseen issues or routine maintenance activities.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elb_12",
    "Title": "12 Application Load Balancers should be configured with defensive or strictest desync mitigation mode",
    "Description": "This control checks whether an Application Load Balancer is configured with defensive or strictest desync mitigation mode. The control fails if an Application Load Balancer is not configured with defensive or strictest desync mitigation mode.",
    "QueryID": "aws_elb_application_lb_desync_mitigation_mode",
    "DocumentURI": "policies/aws_foundational_security_elb_12.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "data_integrity"
      ],
      "foundational_security_item_id": [
        "elb_12"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ELB"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the control that checks if an Application Load Balancer is configured with defensive or strictest desync mitigation mode can be quite severe. If an Application Load Balancer is not configured with these said settings, it exposes your system to potential security threats. \n\n# 1. Security Breaches:\n\nWithout a desync mitigation mode in place, AWS resources could be exposed to various types of attacks such as HTTP Desync attacks. These attacks manipulate HTTP/1.x messages to induce discrepancies and disrupt application processing, which can lead to several issues like unauthorized access, data leaks, or service disruption.\n\n# 2. Financial Loss:\n\nIn the event of a major security flaw or leak, your organization may suffer from substantial financial losses. These could occur in the form of penalties for not complying with certain regulations, compensations, or even revenue loss due to service disruption or damage to the organization's reputation.\n\n# 3. Compliance Issues:\n\nVarious compliance regulations mandate strict security controls and protections. Non-compliance with this control could lead to falling short of these requirements leading to penalties, legal issues, or loss of certifications.\n\n# 4. Negative Impact on Customer Trust: \n\nIf a security breach occurs as a result of non-compliance with this control, it could lead to a loss in customer trust, which can be difficult to regain. This could affect the business's customer retention and acquisition efforts in the long run.\n\nTherefore, maintaining compliance with this control is essential for safeguarding the security, integrity, and availability of your AWS resources and adhering to regulatory requirements."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, an online e-commerce company is hosting their website on an AWS platform. Their user data and transaction details are flowing throughout the site. The company has configured an Application Load Balancer to ensure the efficient distribution of incoming traffic across multiple targets like EC2 instances to improve availability.\n\nHowever, a recent malicious attack, called a \"desync attack\", has started to exploit HTTP/1.1 protocol vulnerabilities by sending ambiguous HTTP requests to disrupt or bypass security measures. This type of attack could lead to unauthorized access, data theft, or disruptive behavior on the website.\n\nTo counter this, the AWS Control which checks if an Application Load Balancer is configured with the defensive or strictest be 'Desync Mitigation Mode' is handy. By enabling this mode, the Load Balancer would automatically close connections that appear to be experiencing these types of issues, thereby mitigating the risk of a successful desync attack.\n\nIn this scenario, if the e-commerce company fails to configure their Load Balancer with protective Desync Mitigation Modes, the AWS Control would flag it as a failed case, alerting the company to adjust their settings to better defend their website and protect critical user data."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elb_13",
    "Title": "13 Application, Network, and Gateway Load Balancers should span multiple Availability Zones",
    "Description": "This control checks whether an Elastic Load Balancer V2 (Application, Network, or Gateway Load Balancer) has registered instances from multiple Availability Zones. The control fails if an Elastic Load Balancer V2 has instances registered in fewer than two Availability Zones.",
    "QueryID": "aws_elb_application_gateway_network_lb_multiple_az_configured",
    "DocumentURI": "policies/aws_foundational_security_elb_13.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "elb_13"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ELB"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the aforementioned AWS Control can manifest in several ways:\n\n1. **Risk of Downtime:**\n    Not having instances in multiple Availability Zones (AZs) means that should an issue occur in a single AZ - which includes events like power outages, natural disasters, fires, etc. - all applications relying on instances in that AZ could face significant downtime. Downtime can direct to lost revenue, dissatisfied customers, and reputational harm for the business.\n\n2. **No Redundancy:**\n    Failing this control implies there's no redundancy in place. Having instances in just one AZ generates a single point of failure. Therefore, any attack or issue with that particular AZ can disrupt the entire service.\n\n3. **Poor Performance:**\n    Deploying instances across multiple AZs helps distribute the workload, thus improving the performance and response time of your application. Non-compliance to this can result in slower response times, thereby affecting overall user experience.\n\n4. **Non-adherence to Best Practices:**\n    AWS recommends that you maintain instances in different AZs to ensure fault tolerance and high availability. Non-compliance in this regard can lead to audit issues, especially for businesses required to adhere to strict regulatory guidelines.\n\n5. **Cost implications:**\n    Ignoring this rule can lead to cost implications. While it might seem more costly to host instances in multiple AZs initially, the potential financial loss from the consequences of downtime or data loss from not having multi-AZ redundancy can significantly outweigh those initial costs.\n\n6. **Data Loss:**\n    If data is not replicated in instances across multiple AZs, it increases the risk of data loss in case of AZ failure. This data loss might be unrecoverable or can require significant effort and cost to recover."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA business operating a high-traffic e-commerce website uses an AWS Elastic Load Balancer V2 (Application Load Balancer) to distribute incoming traffic among multiple instances. During peak hours, all instances experience heavy loads. The business has all instances in a single Availability Zone.\n\nDuring a high demand period, the single Availability Zone experiences an outage. Consequently, the e-commerce website goes down due to the lack of instances to handle the incoming traffic. This downtime results in revenue loss and decreased customer satisfaction.\n\nTo prevent this from happening, the business can use the AWS Control to check if the Elastic Load Balancer V2 has registered instances from multiple Availability Zones. If it detects that instances are located in a single zone, it triggers a warning. The business can then distribute its instances across multiple zones, increasing redundancy and availability.\n\nThe business can respond by rebalancing instances across multiple Availability Zones. This setup ensures that even if one zone experiences an issue, others remain available to handle the load. By doing this, the business significantly reduces the risk of downtime and ensures continued availability and optimal performance of its e-commerce website. This AWS Control thus helps in maintaining business continuity and preventing revenue loss from unanticipated downtime."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elb_14",
    "Title": "14 Classic Load Balancers should be configured with defensive or strictest desync mitigation mode",
    "Description": "This control checks whether a Classic Load Balancer is configured with defensive or strictest desync mitigation mode. This control will fail if the Classic Load Balancer is not configured with defensive or strictest desync mitigation mode.",
    "QueryID": "aws_elb_classic_lb_desync_mitigation_mode",
    "DocumentURI": "policies/aws_foundational_security_elb_14.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "data_integrity"
      ],
      "foundational_security_item_id": [
        "elb_14"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ELB"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS (Amazon Web Services) control could result in several negative impacts:\n\n1. **Increased Security Vulnerabilities:** Without a strict or defensive desync mitigation mode, your Classic Load Balancer could be vulnerable to attacks. These modes protect the load balancer from HTTP Desync attacks which may exploit inconsistencies in the processing of HTTP requests/responses. If an attacker successfully exploits this vulnerability, they could potentially hijack your system and access sensitive information.\n\n2. **Potential Data Loss or Breach:** In the event of a successful attack, sensitive user data can be either lost or stolen. This could include financial information, secure credentials, proprietary business data, or personal user data.\n\n3. **Business Continuity Risk:** A successful attack can disrupt your business operations. The impact can range from minor inconveniences to complete shutdowns until the compromise is detected and fixed. \n\n4. **Financial Impact:** Following a successful attack, you may face considerable financial costs related to remediation, fines from non-compliance if you're in a regulated industry, potential losses owing to shutdowns, and potential lawsuits from affected parties.\n\n5. **Reputational Damage:** A security breach could harm your reputation, potentially leading to loss of clientele and negative impact on your brand.\n\nTherefore, complying with this control not only helps secure your AWS resources but also mitigates possible business interruptions, financial losses, and reputational damage."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\nConsider a web application hosted on AWS that experiences high volumes of traffic. This application is served by multiple EC2 instances and to balance the load appropriately, a Classic Load Balancer is used.\n\nDue to the complexities of HTTP, a phenomenon known as HTTP Desync can occur. HTTP Desync essentially refers to when the sender and the receiver have different views of the data being transferred. This can lead to serious security vulnerabilities like request smuggling or even denial of service (DoS).\n\nTo mitigate this, AWS introduced 'Desync Mitigation Modes' for Load Balancers. The 'defensive' and 'strictest’ modes are especially robust in preventing HTTP Desync. AWS therefore recommends using one of these modes for classic Load Balancers.\n\nEnsure that the controls for AWS are implemented to check that the Classic Load Balancer is configured this way. If it is not, the control will fail. This helps ensure the application's security and integrity.\n\n```markdown\n### Evaluation of Classic Load Balancer configuration \n\nDuring our routine checks on application's Classic Load Balancer, it was found that the Desync mitigation mode is not set to 'defensive' or 'strictest'. This could potentially expose our application to security threats.\n\nAs a corrective measure, we've updated the configuration. The future automatic controls will ensure the Load Balancer remains configured to 'defensive' or 'strictest’ mode for maximum security.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_iam_21",
    "Title": "21 IAM customer managed policies that you create should not allow wildcard actions for services",
    "Description": "This control checks whether the IAM identity-based policies that you create have Allow statements that use the * wildcard to grant permissions for all actions on any service. The control fails if any policy statement includes 'Effect': 'Allow' with 'Action': 'Service:*'.",
    "QueryID": "aws_iam_policy_custom_no_service_wildcard",
    "DocumentURI": "policies/aws_foundational_security_iam_21.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "iam_21"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS Control can lead to a series of significant costs and risks, detailed as below:\n\n1. **Security Risks**: Granting permissions for all actions on any service dramatically increases the potential for breach or misuse. In case of malicious attacks, hackers can exploit this vulnerability to gain control over the entire account, potentially compromising sensitive data.\n\n2. **Non-compliance Fees**: Depending on the applicable laws and regulations, your organization may be liable for penalties, fines, or other costs associated with non-compliance to best practices for information security and data privacy.\n\n3. **Operational disruptions**: In case of an internal or external security breach, not only may there be material loss, but also the business's regular operations could be significantly disrupted. This could lead to lost sales or damage to the company's reputation, which may in turn impact the company's profitability and shareholder value.\n\n4. **Audit Failures**: If you're required to undergo IT/security audits, a 'wildcard' allowance could result in an audit failure, potentially leading to further financial penalties or loss of certain certifications, and damaging the business reputation.\n\n5. **Increased Resource Usage**: With unrestricted allowances, resources could be used indiscriminately, leading to unnecessary costs.\n\n6. **Legal and Regulatory Risks**: Non-compliance could lead to legal consequences, including lawsuits from affected parties. \n\nHence, it is strongly recommended to provide only necessary minimum permissions to users to adhere to the principle of least privilege, greatly reducing these potential costs and risks."
      ],
      "x-kaytu-usefulness-example": [
        "**Example**\n\nIn an organization, multiple employees may sometimes need to access various services within your AWS environment. However, providing all the employees with administrative access may pose a high risk to the secure data and resources of your organization as they could accidentally or intentionally misuse them.\n\nLet's consider an example where in the AWS Control, a policy has been intentionally or unknowingly been set as follows:\n\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"*\",\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n\nIn this scenario, the IAM policy allows all actions (`\"Action\": \"*\"`) on all resources (`\"Resource\": \"*\"`) for any identity that the policy is attached to. This means, any user, role, or group with this policy can do anything with any of the AWS services and resources in that AWS account. This poses a security risk by violating the principle of least privilege.\n\nThis principle is a key security concept that encourages minimal user access rights to applications, systems, and processes based on the user’s job functions. It mandates that users should have the least privileges they need to do their work and nothing more.\n\nTo deal with such situations, the control that checks whether the IAM identity-based policies that you have created use the '*' wildcard to grant permissions for all actions on any service becomes very useful. This control will help identify and eliminate such security risks by making sure 'Effect': 'Allow' is not combined with 'Action': 'Service:*'. It ensures users only have access to the resources they need to do their jobs and nothing more."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ecs_10",
    "Title": "10 Fargate services should run on the latest Fargate platform version",
    "Description": "This control checks if Amazon ECS Fargate services are running the latest Fargate platform version. This control fails if the platform version is not the latest.",
    "QueryID": "aws_ecs_service_fargate_using_latest_platform_version",
    "DocumentURI": "policies/aws_foundational_security_ecs_10.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "vulnerability_patch_and_version_management"
      ],
      "foundational_security_item_id": [
        "ecs_10"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ECS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can cost you in various ways:\n\n1. **Increased Vulnerability:** Running your Amazon ECS Fargate services on older versions may expose your systems to known security vulnerabilities that have been patched in the latest version. Hackers aware of these vulnerabilities can exploit them to gain unauthorized access or disrupt your services.\n\n2. **Reduced Performance:** Newer versions often come with performance upgrades. If you're non-compliant, your systems might be running less efficiently than they could, which can impact your service performance and user experience.\n\n3. **Limited Features and Enhancements:** Sticking with older versions means missing out on any new features, enhancements or bug fixes that come with the latest version. This can limit your capabilities and may even hamper problem-solving efforts.\n\n4. **Increased Operational Cost:** Older versions might not be as optimized as the latest versions, meaning they could potentially use more resources to run. This can directly translate to higher operational costs.\n\n5. **Non-compliance penalties:** In some regulated industries, running outdated software versions can lead to non-compliance penalties.\n\nHere is the cost in markup format:\n\n```markdown\n- **Increased Vulnerability:** Non-compliance can expose your systems to known security vulnerabilities present in older versions, potentially leading to unauthorized access or service disruption.\n\n- **Reduced Performance:** Running your services on older versions could result in less efficient performance, potentially impacting service delivery and user experience.\n\n- **Limited Features and Enhancements:** By not upgrading to the latest version, you miss out on new features, enhancements, and bug fixes provided by AWS, limiting your service's capabilities.\n\n- **Increased Operational Cost:** Older versions might not be as resource-efficient as the latest ones, leading to increased operational costs.\n\n- **Non-compliance penalties:** In certain regulated industries, running outdated software versions can lead to non-compliance penalties.\n```\nPlease replace any listed consequences with those specific to your case."
      ],
      "x-kaytu-usefulness-example": [
        "Amazon ECS Fargate is a serverless compute engine for containers that works with both Amazon Elastic Container Service (ECS) and Amazon Elastic Kubernetes Service (EKS). Fargate makes it easy for developers to focus on building applications without having to manage the infrastructure.\n\nExample Instance:\n\nSuppose you're a company that uses AWS ECS Fargate services to manage your applications. You want to ensure that your operations are efficient, secure, and reliable. Running outdated versions of Fargate platform may expose your applications to potential security risks or performance issues.\n\nBy using this AWS control, you can automatically check if your ECS Fargate services are running on the latest version. If not, the control will fail, giving you an immediate alert that an update is necessary. This way, you ensure that your services remain up-to-date, take advantage of the latest features or improvements, and stay secure from any known vulnerabilities patched in newer versions. \n```\n    - Resource: AWS::ECS::Cluster\n      Filters:\n        - Property: PlatformVersion\n          Equals: LATEST\n```\nThis instance in CloudFormation YAML would define an ECS cluster that uses the latest ECS Fargate version. If the version is not 'LATEST', the control would fail, and the CloudFormation stack creation or update is rolled back. This can help prevent deploying resources that do not comply with your organization's security guidelines."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_ecs_12",
    "Title": "12 ECS clusters should have Container Insights enabled",
    "Description": "This control checks if ECS clusters use Container Insights. This control fails if Container Insights are not set up for a cluster.",
    "QueryID": "aws_ecs_cluster_container_insights_enabled",
    "DocumentURI": "policies/aws_foundational_security_ecs_12.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "ecs_12"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ECS"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "If non-compliance occurs with the mentioned AWS Control, it can lead to serious consequences that could incur costs in various forms. Here are a few potential implications:\n\n1. **Reduced Operational Efficiency**: Not using AWS Container Insights can cause a decline in operational efficiency. Container Insights helps monitor, troubleshoot, and optimize performance for your workloads, aiding in quick decision-making.\n\n2. **Loss in Productivity**: In the event of unexpected application behaviors or resource utilization issues, operations teams would need to investigate and debug without the insights provided by Container Insights. It increases troubleshooting time and causes a drop-off in productivity, which indirectly implies costs.\n\n3. **Increased Risk and Downtime**: Without automated insights about the operational health of your clusters, you may overlook stability threats until they become significant and potentially cause downtime, translating to a loss in revenues or reputation.\n\n4. **Unplanned Costs**: Unforeseen performance issues can lead to additional resource utilization, potentially driving up operational costs if they go undetected because Container Insights isn't enabled.\n\n5. **Security Threats**: Lack of visibility in your environment might make it easier for potential security threats to go undetected, which could lead to significant costs if a breach occurs and data is compromised.\n\nHence, compliance with the AWS control requiring setting up Container Insights for your ECS clusters is essential to mitigate unforeseen operational costs, maintain application performance and availability, improve productivity, and stay secured."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA company named XYZ runs multiple applications across different ECS clusters on AWS. They are facing issues related to the challenging task of debugging and analyzing their application performance. Their DevOps team is finding it difficult to manually monitor and troubleshoot the application behavior and performance.\n\nBy enabling Container Insights for their ECS clusters, the company can automatically collect, aggregate, and summarize metrics and logs from their containerized applications and micro-services. It helps them to monitor their ECS resources efficiently by providing a detailed performance view for their clusters, tasks, containers, and services.\n\nSo the AWS Control that checks if ECS clusters use Container Insights is significantly useful for this company. If this control finds any cluster where Container Insights are not set up, it would immediately flag it as a failure, thus prompting the DevOps team to take necessary actions in setting up Container Insights for efficient monitoring and troubleshooting."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_waf_10",
    "Title": "10 A WAFV2 web ACL should have at least one rule or rule group",
    "Description": "This control checks whether a WAFV2 web access control list (web ACL) contains at least one WAF rule or WAF rule group. The control fails if a web ACL does not contain any WAF rules or rule groups.",
    "QueryID": "aws_wafv2_web_acl_rule_attached",
    "DocumentURI": "policies/aws_foundational_security_waf_10.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "waf_10"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/WAF"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can be costly for an organization in a number of ways:\n\n1. **Security Risk**: If a WAFV2 web ACL does not have any WAF rules or rule groups, it means it is not actively filtering web traffic for potential threats. This increases the risk of malicious activity such as SQL injection and cross-site scripting attacks, which can lead to data loss, downtime, and reputational damage.\n\n2. **Compliance Failure**: Certain compliance standards require proper web access control lists with appropriate rules and groups. Failing to comply could lead to penalties and fines from regulatory bodies.\n\n3. **Increased Costs**: In the event of a security breach, the financial implications can be severe. In addition to the cost of dealing with the immediate threat, there could also be added expenses for disaster recovery, security remediation and potential legal fees if sensitive data is compromised.\n\n4. **Loss of Customer Trust**: If a breach due to non-compliance leads to customer data being compromised, it can lead to strained relationships with clients, tarnished reputation and loss of business. \n\nIn summary, the cost of non-compliance with this AWS control is not just financial, but it has implications on security, business continuity, regulatory compliance, and overall reputation of a business. Therefore, it's crucial for organizations to ensure that their WAFV2 Web ACLs contain at least one WAF rule or WAF rule group."
      ],
      "x-kaytu-usefulness-example": [
        "Assume an e-commerce company \"BasketPlace\" uses Amazon Web Services (AWS) for hosting their website. They have implemented AWS WAFV2 (Web Application Firewall Version 2) as a part of their security measures to protect their web application from common web exploits.\n\n\"BasketPlace\" has created a set of WAF rules which include conditions that the request needs to satisfy in order to be allowed or blocked. They have an AWS control in place to check if a WAFV2 web access control list (web ACL) contains at least one WAF rule or WAF rule group.\n\nOne day, during a security audit, unknowingly, all the WAF rules were cleared out from a critical web ACL. Thanks to their automated AWS control, they were alerted immediately about the absence of WAF rules or rule groups.\n\nThis instance helped them to quickly restore the rules, thus avoiding potential security loopholes that could have been exploited by malicious requests. \n\nSo, the control that checks whether a WAFV2 web ACL contains at least one WAF rule or rule group is extremely useful in maintaining the security standards and integrity of the web application."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_10",
    "Title": "10 IAM authentication should be configured for RDS instances",
    "Description": "This control checks whether an RDS DB instance has IAM database authentication enabled IAM database authentication allows authentication to database instances with an authentication token instead of a password. Network traffic to and from the database is encrypted using SSL.",
    "QueryID": "aws_rds_db_instance_iam_authentication_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_10.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "passwordless_aauthentication"
      ],
      "foundational_security_item_id": [
        "rds_10"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with the Amazon Web Services (AWS) Identity \u0026 Access Management (IAM) database authentication control could carry several potential costs:\n\n1. **Security Vulnerabilities**: If IAM database authentication isn't in use, it implies that you are using traditional database authentication methods like a username and password. This can leave your databases more susceptible to common security issues like password spraying or brute force attacks. Databases often store sensitive or critical data. If these databases are compromised, the impact on the organization can be huge, both in terms of financial and reputational cost.\n\n2. **Increased Admin Overhead**: IAM authentication reduces manual password management since it relies on temporary, dynamically generated credentials. Without it, more resources may need to be spent on managing database credentials securely.\n\n3. **Non-compliance Penalties**: If your organization operates in a heavily regulated industry or handles particularly sensitive data, you may be subject to various compliance requirements, like GDPR, HIPAA, PCI-DSS etc., that mandate certain security measures, including secure database access. Breaching these could result in large fines and penalties.\n\n4. **Lack of Secure Transmission**: Since IAM authentication also ensures SSL encryption of network traffic to and from the database, non-compliance means data being transferred won't be encrypted, making it vulnerable to interception and theft. This could lead to data breaches, with potentially severe financial and reputational consequences.\n\n5. **Business Continuity Risk**: In the worst-case scenario, a security breach could have severe effects on an organization's ability to continue operations. Depending on the critical nature of the data hosted and the extent of the breach, this could be a significant risk.\n\nTherefore, it is crucial for an organization using AWS's RDS to ensure they have this control in place."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nConsider a scenario where a company has an application that requires frequent access to an Amazon RDS DB instance. In a traditional setup, they would probably use a password authentication method, which could be risky due to the possibility of password leaks. Moreover, managing passwords and ensuring they are rotated can be an administrative burden.\n\nBy using AWS Control to enable IAM database authentication, the company can leverage AWS managed policies to authorize several specific IAM accounts or roles to access their database instances. \n\nThe IAM mechanism generates an authentication token (using the AWS SDK) which replaces the need for the application to embed the actual database password. These tokens are also network traffic encrypted using SSL, reducing the chances of a data breach. \n\nTherefore, IAM database authentication enabled RDS DB helps to increase security, reduces the administrative burden connected with password management, and ticks compliance boxes for certain audit requirements. \n\nHere is a markup presented in YAML format:\n\n```yaml\nTitle: \"Ensure IAM database authentication is enabled\"\nQuery:\n   Resource: 'aws_rds_instance'\n   Filters:\n     - And:\n       - Field: 'iam_database_authentication_enabled'\n         Compare: EQUALS\n         Value: 'false'\n```\n\nThe markup above is a control that checks for any RDS DB instance without IAM database authentication enabled in the AWS setup. If any RDS DB instance is using password authentication (i.e., `iam_database_authentication_enabled` is `false`), it will be flagged for review or automated remediation."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_20",
    "Title": "20 An RDS event notifications subscription should be configured for critical database instance events",
    "Description": "This control checks whether an Amazon RDS event subscription exists with notifications enabled for the following source type, event category key-value pairs.",
    "QueryID": "aws_rds_db_instance_events_subscription",
    "DocumentURI": "policies/aws_foundational_security_rds_20.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "application_monitoring"
      ],
      "foundational_security_item_id": [
        "rds_20"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control could lead to several potential costs and risks:\n\n1. **Operational Risk**: Not having RDS event subscriptions with notifications enabled can lead to unawareness of critical events or changes in your AWS RDS environment. This could lead to operational disruptions.\n\n2. **Security Risk**: Without receiving notifications for important events, there could be delayed response to potential security incidents, like unauthorized access, resulting in breaches or compromises.\n\n3. **Compliance Risk**: If your organization is under certain regulatory requirements that demand prompt response to certain events or incidents, non-compliance to this control could lead to fines, penalties, audits, and a damage to the organization's reputation.\n\n4. **Cost Leakage**: Some of the RDS events can potentially indicate inefficiencies (for example, oversized/undersized instances, unoptimized queries etc.). Not being alerted of these could lead to unnecessary infrastructural costs.\n\n5. **Data Loss Risk**: Some events in Amazon RDS might be related to risks of data loss (for example, replication incidents, storage errors, etc.). Without being promptly informed of these events, there is a risk of losing important corporate or customer data.\n\nHence, ensuring Amazon RDS event subscriptions exist with notifications enabled is important for smooth business operations, maintaining security, staying compliant, and managing costs."
      ],
      "x-kaytu-usefulness-example": [
        "For example, a financial company uses several Amazon RDS instances to manage its critical data, including financial transactions, customer details, and business analytics. The AWS cloud administrators of the company want to ensure they are promptly notified of any important changes or issues with their RDS instances.\n\nThey would configure AWS Control to check if there's an Amazon RDS event subscription with notifications enabled for the source type, \"db-instance\" and event categories such as \"availability\", \"backup\", \"creation\", \"deletion\", \"failure\", \"notification\", \"read replica\", \"recovery\", \"restoration\", and \"low storage\".  \n\nIf an RDS event subscription does not exist or notifications are not enabled, AWS Control would notify the administrators so they can correct the situation. This ensures the administrators have an immediate visibility of critical changes, helping to quickly identify and resolve potential issues, keeping the company's data secure, available, and reliable."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_11",
    "Title": "11 RDS instances should have automatic backups enabled",
    "Description": "This control checks whether Amazon Relational Database Service instances have automated backups enabled and the backup retention period is greater than or equal to seven days. The control fails if backups are not enabled, and if the retention period is less than 7 days.",
    "QueryID": "aws_rds_db_instance_backup_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_11.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "backups_enabled"
      ],
      "foundational_security_item_id": [
        "rds_11"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control could lead to significant costs for a business. These costs can be broken down into several key areas:\n\n1. **Data Loss:** If automated backups are not enabled for the Amazon RDS instances, there is a risk of losing all data in case of a catastrophic event or database failure. This could lead to a significant financial loss and potentially disrupt your business operations.\n\n2. **Recovery Efforts:** If data is lost and no backup is available, significant resources may be needed to try to recover what can be salvaged. This might include man hours, third-party data recovery services, and even possible hardware replacement.\n\n3. **Reputational Damage:** Depending on the nature of your business, a significant data loss could lead to a loss of customer trust and reputational damage, especially if client data is affected. This can result in lost revenue.\n\n4. **Non-Compliance Fines:** If your business is in an industry that requires compliance to certain standards such as GDPR, HIPAA, or PCI DSS, not having appropriate backups could result in fines for non-compliance.\n\n5. **Opportunity Costs:** If data loss occurs, your backend team might be forced to spend their time on rebuilding the lost data instead of focusing on other important tasks or projects. This is an indirect cost and could considerably delay your company's progress.\n\nOn the other hand, ensuring that the AWS control is complied with—whereby automated backups are enabled and the retention period is no less than seven days—minimizes these risks, offering robust data protection and operational resilience."
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider a large multinational corporation that is using Amazon RDS as a repository for all its operational data. They have multiple databases storing a vast range of information from financial data to customer details. \n\nGiven the crucial nature of the data, they want to ensure that the data is always backed up to prevent any loss and it's available for restoration at a moment's notice. Here, this AWS Control can help as it checks whether automated backups are enabled for these Amazon RDS instances. \n\nIn the case of an unfortunate event such as an outage, due to an error or any disaster, can lead to downtime and loss of data. If the backup is not enabled, data recovery might not be possible and it can lead to significant operational and financial impacts. Quick recovery mechanisms like RDS automated backups can ensure the business continuity policy to get systems back up and running in the least possible time.\n\nMoreover, this AWS Control also checks if the backup retention period is greater than or equal to seven days. If the retention period is less than 7 days, the control fails. This means that in the event of data being corrupted or lost, the company has a minimum of 7 days of data stored in backup. This provides a substantial duration to detect any issues and retrieve the data. Thus, enabling automated backups and setting a sufficient backup retention period can save the company from potential losses and downtime."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_12",
    "Title": "12 IAM authentication should be configured for RDS clusters",
    "Description": "This control checks whether an RDS DB cluster has IAM database authentication enabled. IAM database authentication allows for password-free authentication to database instances. The authentication uses an authentication token. Network traffic to and from the database is encrypted using SSL.",
    "QueryID": "aws_rds_db_cluster_iam_authentication_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_12.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "passwordless_aauthentication"
      ],
      "foundational_security_item_id": [
        "rds_12"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS Control of enabling IAM database authentication for RDS DB clusters can lead to several potentially significant costs for an organization.\n\n1. **Increased Security Risks**: Not using IAM database authentication can increase potential security risks as the system would rely on password-based authentication. This is typically less secure and more prone to attacks such as brute force and password spraying, which might lead to unauthorized access. The cost of dealing with a data breach or loss of secure data would be substantial.\n\n2. **Risk of Non-compliance to industry regulations**: Many compliance frameworks require robust authentication and encryption methods. Without IAM database authentication, which provides both of these, the system may fail to meet the necessary compliance standards. This could result in penalties and fines.\n\n3. **Inefficient Management and Increased Operational Expenses**: Management of passwords is more challenging and time-consuming. They need to be rotated frequently, stored securely, and remembered by the users. Moving to token-based IAM authentication can reduce these operational costs in the long run.\n\n4. **Loss of trust**: In case of a data breach, the loss of customer or client data could result in a loss of trust, harming the reputation of the organization and potentially leading to a loss of business.\n\n5. **Limited Automation Capabilities**: With password-based authentication, some automation capabilities are limited as most CI/CD tools or services support role-based accesses. Manual intervention might be required more often, leading to reduced efficiency.\n\nOverall, the total cost of non-compliance to this AWS control can be substantial, taking into account both direct monetary penalties and less tangible costs like lost productivity and trust. As a result, it's generally considered best practice and more cost-effective to comply with the control."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nImagine that your company runs a multi-tier web application for an e-commerce store with a user base spread across multiple regions. The application is hosted on several EC2 instances and utilizes an RDS DB cluster for storing and managing user information and product catalogue. \n\nStandard practice needs account credentials embedded within the application to establish a connection to the database, which can be a security risk if not implemented properly. To mitigate this, you decide to use IAM database authentication. It replaces the need for a password by using an authentication token which is more secure as the token is generated by AWS and is uniquely generated each time, reducing the risk of compromise.\n\nBy enabling the AWS Control that checks for IAM database authentication, you add a layer of security to ensure that any newly created RDS DB cluster would enforce IAM database authentication. This setup ensures both the security of your data and the continuity of your application. This is because with IAM database authentication, you can manage access to your DB cluster using IAM roles, which support organizational policies in a more fine-grained and controlled manner. \n\nYou can also leverage the built-in features of IAM such as multi-factor authentication for enhanced security, policy-based permissions for fine-grained access control, and easy rotation of secrets for enhanced data protection.\n\nHence this AWS Control plays a crucial role in maintaining the security standard of your application and ensuring that password-free, token-based authentication is enforced for your RDS DB clusters."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_21",
    "Title": "21 An RDS event notifications subscription should be configured for critical database parameter group events",
    "Description": "This control checks whether an Amazon RDS event subscription exists with notifications enabled for the following source type, event category key-value pairs.",
    "QueryID": "aws_rds_db_parameter_group_events_subscription",
    "DocumentURI": "policies/aws_foundational_security_rds_21.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "application_monitoring"
      ],
      "foundational_security_item_id": [
        "rds_21"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can lead to several potential costs:\n\n1. **Operational Interruptions**: Amazon RDS (Relational Database Service) is a critical service that supports applications and services that require database access. If there are changes or issues with RDS instances, the immediate notifcations that can be sent by RDS events will not be sent. This may delay the troubleshooting process as you will be unaware of the issue until someone notices the symptoms. This could lead to significant operational interruptions.\n\n2. **Potential Data Loss**: If serious issues occur with your RDS instances, such as an instance failure or a storage issue, alerts from RDS events could allow you to quickly address these problems before it leads to extensive data loss. Not receiving these notifications can potentially lead to data loss.\n\n3. **Increased Security Risk**: You may miss important events that could be a sign of a security breach such as unauthorised modifications or anomalous activities. This increases the risk of security breaches going unnoticed and unaddressed for longer periods of time. \n\n4. **Compliance Violations**: If your organization is bound by compliance mandates that require you to have real-time monitoring of your database systems in place, you could be at risk of compliance violations, which can lead to fines and damage to your organization's reputation.\n\n5. **Higher Operational Cost**: The lack of immediate visibility on issues will create unnecessary operational overhead. Instead of preventing issues or resolving them quickly, your team may spend considerable time troubleshooting to identify problems.   \n\nThus, ensuring that an Amazon RDS event subscription exists and has notifications enabled is vital in managing operational risk and maintaining the health of your AWS resources. A well-defined notification process can lead to quicker responses to events, mitigating any potential negative impacts."
      ],
      "x-kaytu-usefulness-example": [
        "For example, you are running a major online retail business that relies heavily on a database hosted on Amazon RDS for maintaining inventory, orders, customer details, etc. In the event of any changes or issues related to the database, it is crucial that you are promptly informed to take necessary action.\n\nBy using this AWS control, you can ensure that an Amazon RDS event subscription exists with notifications enabled for a variety of events such as failover, loss of connectivity, low available storage, or CPU usage limit surpassed.\n\nThis means that if any of these events occur, a notification will be sent immediately to the designated recipient (like your system administrator), enabling quicker response and resolution of potential issues, thus preventing any interruptions or downtime that could negatively impact your business operations. This control is useful for maintaining the stability and reliability of your system."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_13",
    "Title": "13 RDS automatic minor version upgrades should be enabled",
    "Description": "This control checks whether automatic minor version upgrades are enabled for the RDS database instance. Enabling automatic minor version upgrades ensures that the latest minor version updates to the relational database management system (RDBMS) are installed. These upgrades might include security patches and bug fixes. Keeping up to date with patch installation is an important step in securing systems.",
    "QueryID": "aws_rds_db_instance_automatic_minor_version_upgrade_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_13.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "vulnerability_and_patch_management"
      ],
      "foundational_security_item_id": [
        "rds_13"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control could result in several potential costs:\n\n1. **Security Vulnerabilities**: If automatic minor version upgrades are not enabled, your RDS instances may be running outdated software that has known security vulnerabilities. This could potentially open up your system to a security breach, data theft, or denial of service attacks. Correcting such security incidents can be very costly, time-consuming, and damaging to your organization's reputation.\n\n2. **Performance Issues and Bugs**: Minor updates often include fixes for known bugs and performance issues. Not applying these updates can result in instability, reduced performance, or other software issues. The time and resources spent troubleshooting and patching these issues manually can be substantial.\n\n3. **Compliance Violation Penalties**: If your organization is subject to industry regulations (like GDPR, HIPAA, PCI DSS, etc.) that require systems to be kept up-to-date, non-compliance could result in hefty fines or sanctions.\n\n4. **Increased Maintenance Costs**: Without automatic upgrades, your team would need to regularly monitor for available updates, test them in a non-production environment, and plan for a maintenance window to apply them, which increases operational costs.\n\n5. **Opportunity Costs**: Time and resources spent on maintaining outdated database version can otherwise be used on value-adding activities, such as developing new features, improving system performance, or researching new technologies."
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider a fintech company that uses an AWS RDS database instance for financial transaction processing. The database handles sensitive customer information and transactional data every second. \n\nIn this case, having the automatic minor version upgrades enabled is incredibly critical. As AWS regularly releases minor version updates, which could include security patches, it's of utmost importance for the company to keep their RDBMS up to date. These patches could fix security loopholes that might expose the company's sensitive data to potential breaches.\n\nThe control that checks whether automatic minor version upgrades are enabled would be especially useful in this scenario. For instance, if one of the database administrators disables the automatic update feature for some reason, this control would immediately identify the risk. The IT team would then take necessary measures to revert the changes, keeping the security of the fintech company's RDS database intact. \n\nOverall, this control is not just providing operational efficiency by automating manual verifications, but it also adds a significant value towards maintaining stringent security compliance in the organization."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_22",
    "Title": "22 An RDS event notifications subscription should be configured for critical database security group events",
    "Description": "This control checks whether an Amazon RDS event subscription exists with notifications enabled for the following source type, event category key-value pairs.",
    "QueryID": "aws_rds_db_security_group_events_subscription",
    "DocumentURI": "policies/aws_foundational_security_rds_22.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "application_monitoring"
      ],
      "foundational_security_item_id": [
        "rds_22"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "AWS controls are fundamental to maintain the security, manageability, and optimization of resources on Amazon Web Services. These checks ascertain that best practices are adhered to. Non-compliance with this particular control, which involves Amazon Relational Database Service (RDS) event subscription check, could lead to several potential issues and associated costs.\n\n1. **Lack of Monitoring and Proactive Measures**: RDS event subscription is designed to notify users for various instance-specific or DB-specific events. Not having notifications enabled for event categories could restrict proactive measure practises against potential anomalies or threats.\n\n2. **Increased Operational Risks**: Non-compliance may escalate operational risks, possibly resulting in system outages or interruptions. These outages may affect the customer experience, affecting revenue and brand repute.\n\n3. **Potential Data Loss or Breach**: The absence of event notifications could delay the detection of a security breach, increasing the risk of data loss, corruption, or theft.\n\n4. **Increased Remediation Costs**: The cost associated with troubleshooting and fixing issues spotted after a significant delay could be greater than setting up necessary RDS event notifications.\n\n5. **Regulatory Non-compliance Penalties**: For businesses operating within an industry with regulatory compliance mandates, they may face fines or penalties for not maintaining a proper monitoring structure.\n\n```markdown\n## Cost of Non-compliance to AWS RDS Event Subscription Control\n1. **Poor Monitoring and Proactive Measures**: An absence of proper RDS event subscription leads to weakened monitoring, reducing opportunities for proactively managing potential anomalies and threats.\n2. **Operational Risks**: Non-compliance elevates operational risks that could result in system outages or service interruptions, directly impacting the customer experience and potential revenue.\n3. **Data Breach Risks**: Without critical event notifications, detection of a potential security breach could be delayed, increasing the extent and cost of damage due to data loss, corruption, or theft.\n4. **Remediation Costs**: Delay in identifying issues could lead to escalated troubleshooting and remediation costs.\n5. **Regulatory Non-compliance Penalties**: Businesses with regulatory mandates may receive heavy fines or penalties for not maintaining the necessary RDS event notifications.\n```\nThis outline lists the potential costs associated with non-compliance to this AWS control; each potential issue could significantly disrupt the organization, leading to both financial and reputational damages. Therefore, setting up the RDS event subscription with notifications enabled is highly recommended."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nIn a company with a large number of users, keeping track of changes made in Amazon RDS (Relational Database Service) can be a daunting task. As the database is used extensively for different processes, any changes in the operation or state can lead to unexpected errors in the usage of different services. \n\nFor instance, a database instance might stop functioning due to resource exhaustion or an objective might not be completed due to the deletion of resources. To monitor all these changes, you need to have a system that can notify every time any specific event occurs.\n\nThe AWS control for RDS event subscription with notifications enabled comes handy here. You can subscribe to specific source type, event category key-value pairs. For instance, if you want to be informed every time a database snapshot is created, you can subscribe to create a DB snapshot event under the source type 'db-instance' or 'db-snapshot'.\n\nAs soon as the event occurs, notifications will be sent to all the subscribers. This helps maintain transparency across the organization and also acts as an alarm system for any unforeseen incidents. \n\nHere is an example in markup language:\n\n```json\n{\n    \"ConfigRuleName\": \"rds-event-subscription\",\n    \"Source\": {\n        \"Owner\": \"AWS\",\n        \"SourceDetails\": [\n            {\n                \"EventSource\": \"aws.config\",\n                \"MessageType\": \"ConfigurationItemChangeNotification\"\n            },\n            {\n                \"EventSource\": \"aws.config\",\n                \"MessageType\": \"ScheduledNotification\"\n            }\n        ],\n        \"SourceIdentifier\": \"RDS_EVENT_SUBSCRIPTION\"\n    },\n    \"Description\": \"Checks whether Amazon RDS has enabled notification for event subscriptions.\",\n    \"InputParameters\": \"{\\\"eventCategories\\\":[\\\"creation\\\",\\\"deletion\\\",\\\"backup\\\",\\\"restoration\\\"]}\",\n    \"MaximumExecutionFrequency\": \"TwentyFour_Hours\",\n    \"Scope\": {\n        \"ComplianceResourceTypes\": [\n            \"AWS:: RDS:: DBInstance\",\n            \"AWS:: RDS:: DBSnapshot\"\n        ]\n    }\n}\n```\nWith this markup, Amazon RDS events related to creation, deletion, backup, and restoration will trigger a notification to the subscribers."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_23",
    "Title": "23 RDS databases and clusters should not use a database engine default port",
    "Description": "This control checks whether the RDS cluster or instance uses a port other than the default port of the database engine.",
    "QueryID": "aws_rds_db_instance_and_cluster_no_default_port",
    "DocumentURI": "policies/aws_foundational_security_rds_23.md",
    "ManualVerification": false,
    "Severity": "Low",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "rds_23"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "Low"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control could result in several potential risks and costs for users, such as the following:\n\n1. **Increased Security Vulnerabilities**: Using default port numbers can expose your database to potential threats. Attackers often target commonly known default ports. Hence, changing the default port can add an extra layer of security by avoiding unnecessary exposures.\n\n2. **Cost of a Data Breach**: In any type of data breach, the cost is high. It could involve the theft or loss of customer information, intellectual property, trade secrets, or any other proprietary and confidential information. Repairing such damage can also imply a significant investment in resources and finances.\n\n3. **Regulatory and Compliance Penalties**: Non-compliance can result in penalties from regulatory bodies or a failure to certify the standards, which could result in fines, reputational damage, or business loss.\n\n4. **Loss of Customer Trust**: Users trust service providers with their data. A breach in data due to a lack of proper security measures can lead to loss of customer trust, which in turn affects business and revenues.\n\n5. **The cost of Reactive Actions**: Costs also come in the form of taking reactive safety measures, which often are more expensive than proactively addressing the issue.\n\n```markdown\n## Cost of Non-compliance to AWS Control (RDS Cluster)\n\nNon-compliance to this AWS control, which mandates using a port other than the default port of the database engine, can lead to:\n\n- **Increased Security Vulnerabilities**: Your database could become an easy target for potential threats as default port numbers are common knowledge among attackers.\n\n- **Cost of a Data Breach**: A data breach could lead to the loss of sensitive and proprietary information, often costing fortune in damage repairs.\n\n- **Regulatory and Compliance Penalties**: Regulatory bodies may enforce penalties for non-compliance, which may also hinder progress in achieving standards, thereby damaging your reputation and potentially leading to business loss.\n\n- **Loss of Customer Trust and Business**: Non-compliance that leads to data breaches can severely damage customer trust leading to a downturn in business and revenue.\n\n- **The cost of Reactive Actions**: Not being compliant can also result in performing expensive damage control measures, which could have been avoided with proactive measures.\n```\n\nIt is, therefore, critical to adhere to this control to prevent vulnerabilities and ensure the security of your database.\n"
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider a scenario where a company has an RDS instance running its PostgreSQL database, and for security reasons, they decide to run it on a non-default port (like 5433 instead of the default 5432). Here, implementing this AWS Control is useful as it will ensure that the RDS instance uses the port that the company has designated. This helps limit exposure to port-based attacks and further reduces the attack surface.\n\n```markdown\nAs an example:\n\n- **Company**: XYZ Corporation\n- **Database**: PostgreSQL\n- **RDS Instance**: XYZ-corp-pgsql-db\n- **Default Port**: 5432\n- **Designated Port**: 5433\n\nThe AWS Control would check whether the RDS instance `XYZ-corp-pgsql-db` is using `5433` and not the default `5432`. In this case, the control ensures the specific security measure implemented by the company is followed correctly.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_14",
    "Title": "14 Amazon Aurora clusters should have backtracking enabled",
    "Description": "This control checks whether Amazon Aurora clusters have backtracking enabled. Backups help you to recover more quickly from a security incident. They also strengthens the resilience of your systems. Aurora backtracking reduces the time to recover a database to a point in time. It does not require a database restore to so.",
    "QueryID": "aws_rds_db_cluster_aurora_backtracking_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_14.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "backups_enabled"
      ],
      "foundational_security_item_id": [
        "rds_14"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance with this AWS control could be considerably high. Below are some potential costs explained:\n\n1. **Data Loss**: If backtracking is not enabled on Amazon Aurora clusters, in the event of a failure or data corruption, you may not be able to recover your data quickly or at all. This could lead to data loss, which may disrupt your business operations and result in revenue losses.\n\n2. **Business Continuity Risk**: In the absence of backtracking, recovery time could be longer than anticipated, which may harm your business continuity plans. The business could face operational disruptions leading to lost business opportunities, tarnished reputation, and potential financial losses.\n\n3. **Resources Cost**: Without backtracking, more human and system resources may be needed for recovery operations. The manual process to restore the database from a backup is not only time-consuming but also resource-intensive. This process could yield a substantial financial cost due to increased operational expenses.\n\n4. **Compliance Violations**: If your organization operates in a regulated environment that mandates specific data recovery capabilities and you fail to enable backtracking, it may result in compliance violations, leading to fines and penalties.\n\n5. **Security Violations**: Backups play an essential role in mitigating cybersecurity risks. In case of a security breach, the ability to restore your database to a point before the incident allows ensuring the integrity and availability of your data. Lack of backtracking could expose you to more significant cybersecurity risks.\n\nTherefore, not enabling backtracking on Amazon Aurora clusters might lead to severe adverse consequences for the organization."
      ],
      "x-kaytu-usefulness-example": [
        "For example:\n```\nCompany XYZ has a complex database that is constantly updated with new information. Some data that was accidentally deleted caused several disturbances in the company's operations. By having backtracking enabled on their Amazon Aurora clusters, they could easily revert their database to a point in time before the disturbances occurred.\n\nWith this feature, they did not need to perform a complete database restore, which could have taken longer and caused further disruption to their business operations. Instead, they were able to continue their daily operations while the backtrack operation was executing. \n\nThe backtracking feature thus proved extremely useful in troubleshooting the incident and minimizing business impact. Moreover, having regular backups also enhanced their security posture and made their system more resilient to such future incidents.\n```\nThis justifies the importance of the AWS control that checks whether Amazon Aurora clusters have backtracking enabled."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_15",
    "Title": "15 RDS DB clusters should be configured for multiple Availability Zones",
    "Description": "This control checks whether high availability is enabled for your RDS DB clusters. RDS DB clusters should be configured for multiple Availability Zones to ensure availability of the data that is stored.",
    "QueryID": "aws_rds_db_cluster_multiple_az_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_15.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "rds_15"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can be significant, both in terms of monetary cost and potential business disruption. Non-compliance to the control can lead to the following consequences.\n\n- **Loss of Data** - If a single Availability Zone fails and high availability is not enabled, there is potential for permanent data loss. Data loss can be costly to recover, if it's recoverable at all.\n\n- **Business Disruption** - Without high availability, if a failure occurs in the Availability Zone hosting the RDS DB cluster, your applications and services relying on the database may become unavailable. This can lead to extended downtimes which can, in turn, result in business interruption leading to lost revenue, breach of Service Level Agreements (SLAs), and potential damage to brand reputation.\n\n- **Loss of Productivity** - Extended outages require time and resources to restore services, which could otherwise be spent on productive tasks.\n\n- **Additional Costs** - Recovering from a failure without a high availability configuration in place can lead to additional costs. These may include costs for extra manpower to restore the service, potential penalties for breach of SLAs, and costs associated with measures to prevent future data loss.\n\nHigh availability in AWS is achieved by replicating the DB instances in multiple Availability Zones. This helps to protect your applications against downtime caused by failure of a single location. It's essential to ensure compliance with this control to reduce business risk and potential associated costs."
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider an online retail company that uses RDS DB clusters for managing its product information and customer data. It is crucial for the company to have constant, uninterrupted access to this data to ensure smooth operations of their ecommerce platform. A downtime or failure might mean potential loss of business, poor customer experience or even loss of critical data.\n\nIf high availability is enabled for their RDS DB clusters, the data will be automatically replicated to another instance in a different Availability Zone. In the event of a planned database maintenance, DB instance failure, or even an entire Availability Zone failure, Amazon RDS automatically switches to a standby replica in another Availability Zone. This helps the company to resume their operations quickly without any noticeable downtime. Thus, by checking and ensuring that high availability is enabled for RDS clusters, this AWS control can help businesses to prevent potential disruptions and maintain the high standard of service their customers expect."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_24",
    "Title": "24 RDS database clusters should use a custom administrator username",
    "Description": "This control checks whether an Amazon RDS database cluster has changed the admin username from its default value. This rule will fail if the admin username is set to the default value.",
    "QueryID": "aws_rds_db_cluster_no_default_admin_name",
    "DocumentURI": "policies/aws_foundational_security_rds_24.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_configuration"
      ],
      "foundational_security_item_id": [
        "rds_24"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS (Amazon Web Services) control can be divided into two core categories; Security Risks and Financial Implications.\n\n1. **Security Risks**: The most significant risk is security related. If the admin username of your Amazon RDS database cluster is still set to default, it makes it easier for unauthorized users (like hackers) to access the database. An exposed database means that your sensitive data can be accessed, tampered with or even deleted, with the potential to cause significant disruptions to your business.\n\n2. **Financial Implications**: Security breaches can lead to financial burdens. Firstly, if data is compromised, it can lead to a loss of customer trust which in turn can lead to loss of revenue. Secondly, depending on the jurisdiction of your operations, there can also be financial penalties for data breaches. In addition, the cost of remediation after a security breach can also be substantial, not only in terms of financial cost, but also the time and resources required to respond to the breach, investigate it and mitigate the breaches.\n\nTherefore, ensuring compliance with this control is critical for maintaining the security and integrity of your data, and in turn, protecting your company's reputation and bottom line."
      ],
      "x-kaytu-usefulness-example": [
        "AWS Control for checking Amazon RDS database cluster admin username is useful in different scenarios, especially for maintaining security integrity. Here's an example scenario in a markup format: \n\n```\nUser Case: An eCommerce company uses Amazon RDS database clusters to handle their extensive database related to inventory, orders, users and transactions. The IT team follows the best pratices in security measures ensuring the elevated user privileges are adequately differentiated to minimise security threats.\n\nUse of AWS Control: \n\n- The IT team decides to run this specific control of checking whether the Amazon RDS database cluster admin username is default or not. \n- They initiate a scheduled automated process using AWS Lambda function and CloudWatch Events which regularly runs this control. \n\nBenefits:\n\n- If the control finds any instance where the admin username is still default, it will immediately alert the team. This will help the team in avoiding potential brute-force attacks as often hackers try to access databases using default admin credentials.\n- This control ensures the accountability and authenticate individual actions as well for auditing purposes. \n- It drastically reduces the risk of unauthorized access which could lead to data breaches and consequential costs/fines.\n```\nThis example highlights its importance by integrating it into the system, leading to a sure and efficient way to keep checks and balances on the database admin access control."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_25",
    "Title": "25 RDS database instances should use a custom administrator username",
    "Description": "This control checks whether you've changed the administrative username for Amazon Relational Database Service (Amazon RDS) database instances from the default value. The control fails if the administrative username is set to the default value.",
    "QueryID": "aws_rds_db_instance_no_default_admin_name",
    "DocumentURI": "policies/aws_foundational_security_rds_25.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_configuration"
      ],
      "foundational_security_item_id": [
        "rds_25"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this control can manifest in various ways:\n\n1. **Security Risk**: By not changing the administrative username from the default value, you are opening your AWS RDS to potential unauthorized access and attacks. Default usernames are widely known and can be a starting point for brute-force or dictionary attacks. \n\n2. **Data Breach or Loss**: If attackers gain access to the database, they can exploit it to access, modify, or delete critical data. This could lead to severe data breaches which could mean heavy legal and financial penalties, especially if sensitive customer information is involved.\n\n3. **Service Disruption**: Attackers could potentially manipulate the data or the RDS instance, leading to service disruption and impacting business operations. \n\n4. **Compliance Violations**: If your organization is under specific regulatory standards such as GDPR, HIPAA, or PCI DSS, etc., non-compliance with basic security practices such as this could lead to non-compliance with such regulations, resulting in fines and penalties.\n\n5. **Reputation Damage**: Finally, data breaches due to lax security could result in severe reputational damage, affecting the trust of customers and potential business opportunities.\n\nTo avoid these costs, AWS strongly recommends changing the administrative username from the default value for RDS instances to ensure security and compliance."
      ],
      "x-kaytu-usefulness-example": [
        "```markdown\nExample:\n\nCompany XYZ is a financial tech organization that uses Amazon RDS to manage their databases. As part of their security measures, they are required to enhance their security configurations to prevent any unauthorized system access.\n\nIn one audit compliance, AWS Config flagged an issue where a newly created RDS instance still had its administrative username set to the default value. This was identified using the AWS control which checks for unchanged administrative usernames from default in Amazon RDS instances.\n\nBy utilizing this AWS control, Company XYZ was able to promptly identify and resolve the security issue, thus reducing the potential risks of unauthorized access their systems. They changed the default administrative username to a distinct, non-guessable name thereby following best security practices.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_16",
    "Title": "16 RDS DB clusters should be configured to copy tags to snapshots",
    "Description": "This control checks whether RDS DB clusters are configured to copy all tags to snapshots when the snapshots are created.",
    "QueryID": "aws_rds_db_cluster_copy_tags_to_snapshot_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_16.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "inventory"
      ],
      "foundational_security_item_id": [
        "rds_16"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control, which checks whether RDS DB clusters are configured to copy all tags to snapshots when the snapshots are created, can result in serious business-critical consequences.\n\n1. **Cost Optimization Problems**: If RDS DB clusters aren't configured to copy all tags to snapshots when snapshots are created, this could cause difficulties in managing, sorting and optimizing costs, especially when there are multiple resources and you rely on tags for cost allocation. \n\n2. **Operational Efficiency**: Not copying tags to snapshots could negatively affect operational efficiency. Tags are usually used to identify various parameters such as the purpose of a resource, the owner, or environment it's related to. Hence, by not copying the tags, the organizations might find it challenging to trace back the purpose or other details of a snapshot, leading to potential confusion and inefficiencies in operations.\n\n3. **Access Control Difficulties**: Some organizations use tags for controlling access to resources. Not copying tags to snapshots could lead to gaps in the implementation of the access control, which may further lead to unauthorized access or accidental modifications.   \n\n4. **Compliance Challenges**: Companies in regulated industries or under certain internal policies might be required to tag all resources including snapshots. Non-compliance to tag copying might lead to non-compliance to those regulations or policies, possibly resulting in fines, legal consequences, or severe reputational damage.\n\n5. **Increased Risk**: Tags often serve as a way to flag resources for backup, security monitoring, and disaster recovery operations. Failing to copy these tags can result in snapshots being overlooked during these critical operations, thereby increasing organizational risk. \n\nHence, it is vital to configure the RDS DB clusters to copy all tags to snapshots to avoid the consequences of non-compliance.\n"
      ],
      "x-kaytu-usefulness-example": [
        "For instance, let's say an organization managing a number of RDS DB clusters on AWS platform has set up different tags for each cluster for easy management and organization of resources. This could be based on their purpose, ownership, environment or any other distinct characteristics. These tags may contain crucial data about the Database Cluster such as the application it belongs to, the environment (Production/Dev/Test), the compliance standards it adheres to etc. \n\nIf the organization has a regular automated backup schedule that creates RDS snapshots, it would be beneficial to have the same tags copied over to the snapshots. This will ensure that the snapshots inherit the metadata of their parent database clusters and can easily be identified, tracked and managed using the same parameters. \n\nAn example instance can be managing snapshot lifecycles based on the 'environment' tag. If a snapshot is marked as 'Production' snapshot by inheriting this tag from its parent RDS cluster, it can be retained for longer periods compared to a snapshot marked as 'Test'. \n\n```markdown\n- Control ID: AWS_RDS_DB_SNAPSHOT_TAGS_COPIED\n- Description: Checks whether Amazon RDS DB clusters are configured to copy all tags to snapshots when the snapshots are created.\n- Purpose: Ensures that snapshots have the same metadata as their parent RDS DB clusters which aids in management, organization and tracking of resources. \n- Example Use: The control enables organizations to manage snapshot lifecycles based on the inherited tags, such as retaining 'Production' snapshots for longer periods compared to 'Test' snapshots. \n```\nHere, the Control verifies whether the RDS DB Clusters are configured to have these tags copied over to the snapshots whenever they are created. If they are not, it would flag as not adhering to the best practice. This can be considered as an important Control especially for big organizations with numerous RDS DB Clusters operational for various different reasons."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_17",
    "Title": "17 RDS DB instances should be configured to copy tags to snapshots",
    "Description": "This control checks whether RDS DB instances are configured to copy all tags to snapshots when the snapshots are created.",
    "QueryID": "aws_rds_db_instance_copy_tags_to_snapshot_enabled",
    "DocumentURI": "policies/aws_foundational_security_rds_17.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "inventory"
      ],
      "foundational_security_item_id": [
        "rds_17"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control, which checks whether RDS DB instances are configured to copy all tags to snapshots when the snapshots are created, can lead to several potential costs for an organization.\n\n1. **Management Difficulty:**\n   Without the ability to easily identify and distinguish between snapshots due to missing tags, management can become a tedious task. It increases the chances of mismanagement and errors.\n\n2. **Increased Operational Costs:**\n   Extra time and resources may be needed to manually analyze and assign the necessary tags to the snapshots, increasing operational cost.\n\n3. **Potential Recovery Delays:**\n   In case of a disaster recovery situation, identifying the correct snapshot to restore can potentially be delayed if tags are not properly used, increasing recovery time objectives.\n\n4. **Compliance Violations:**\n   If your organization is subject to regulations that require specific data handling and you aren’t properly tracking that data (with tags, for instance), you could be at risk for compliance violations, which can bring hefty fines.\n\n5. **Cost Allocation:**\n   Tags can be used to track costs and allocate them to the correct departments within an organization. Without tags, it becomes difficult to accurately track the costs associated with specific snapshots.\n\n6. **Security Risks:**\n   Without correct tagging, risky snapshots might not be identified and secured in a timely manner. This can lead to both data loss and increased security risk.\n\nHence, it is crucial to ensure compliance with this control to avoid these potential consequences."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, consider a company that operates multiple databases in AWS for different departments and purposes, like production, testing, and development. They use tags to manage, organize, and identify their resources effectively. \n\nWhen a snapshot is created of the RDS DB instances, the company would want to retain the context of the original instance through its associated tags. This way, they don't lose important information about the snapshot, such as its owner, purpose, or associated project. \n\nIf a control ensures that all tags are copied from the original RDS DB instance to its snapshot, the company can effectively manage their resources, maintain their records, and streamline their operations. They can also easily implement policies based on these tags, for instance, to define who can modify or delete a snapshot. \n\nHere is a Markup example showcasing the usefulness of this AWS control:\n\n```\nResources:\n  RDSSnapshot:\n    Type: 'AWS::RDS::DBSnapshot'\n    Properties: \n      DBInstanceIdentifier: \"db-instance\"\n      DBSnapshotIdentifier: \"db-snapshot\"\n      Tags: \n        - \n          Key: \"Name\"\n          Value: \"Snapshot of production DB\"\n        - \n          Key: \"Project\"\n          Value: \"Project X\"\n        - \n          Key: \"Department\"\n          Value: \"Finance\"\n```\nIn this example, useful descriptive tags (\"Name,\" \"Project,\" \"Department\") from the original RDS DB instance \"db-instance\" are copied over to the snapshot \"db-snapshot\", helping the company maintain the organizational context and manage its resources more effectively."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_18",
    "Title": "18 RDS instances should be deployed in a VPC",
    "Description": "This control checks whether an RDS instance is deployed in a VPC (EC2-VPC).",
    "QueryID": "aws_rds_db_instance_in_vpc",
    "DocumentURI": "policies/aws_foundational_security_rds_18.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resources_within_vpc"
      ],
      "foundational_security_item_id": [
        "rds_18"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control could result in several potential costs:\n\n1. **Security Risks**: Without a VPC, your RDS instance is potentially more exposed to the public internet, making it more susceptible to attacks like data breaches, unauthorized data modifications or DDoS attacks. These attacks could lead to significant financial losses, and damage to reputation.\n\n2. **Data Compliance**: In some cases, regulatory requirements mandate data to be stored or processed in isolated environments like a VPC. Non-compliance to this control may result in violation of such laws and invite legal consequences, substantial fines or sanctions.\n\n3. **Operational Inefficiency**: VPCs provide a lot of operational benefits such as simplified networking and security configuration, easier resource management and isolation of resources. Non-compliance can therefore lead to inefficiencies, which could unnecessarily add to operational costs.\n\n4. **Service Interruption**: In certain cases, not using a VPC could even lead to service interruption or performance degradation since resources may not be properly isolated or managed.\n\n```markdown\nThe potential costs of non-compliance to the AWS Control of checking whether an RDS instance is deployed in VPC include:\n\n# Security Risks\nIncreased exposure of the RDS instance to public internet potentially exposes it to attacks like data breaches, unauthorized data modifications or even DDoS attacks.\n\n# Data Compliance\nRegulatory requirements might mandate data to be processed or stored within isolated environments, such as a VPC. Non-compliance could result in legal consequences, including hefty fines or sanctions.\n\n# Operational Inefficiency\nVPCs offer various operational advantages including simplified configuration for networking and security, easier resource management and isolation. Non-compliance thereby could lead to inefficiencies, unnecessarily adding to operational costs.\n\n# Service Interruption\nNot using a VPC may lead to service interruptions or deterioration of service due to poorly isolated or managed resources.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "For instance, a company has a policy to only run AWS RDS instances within VPCs for additional layer of isolation to achieve network level security control. This control can help to automatically check the status of this policy. If any RDS instances are found to be not inside a VPC, the security team can be alerted immediately to rectify the situation, thereby ensuring compliance with the policy and enhancing data protection measures within the company."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_rds_19",
    "Title": "19 An RDS event notifications subscription should be configured for critical cluster events",
    "Description": "This control checks whether an Amazon RDS event subscription exists that has notifications enabled for the following source type, event category key-value pairs.",
    "QueryID": "aws_rds_db_cluster_events_subscription",
    "DocumentURI": "policies/aws_foundational_security_rds_19.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "application_monitoring"
      ],
      "foundational_security_item_id": [
        "rds_19"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/RDS"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control could result in significant costs for your organization, both monetarily and in terms of data security. If you're not actively monitoring and receiving notifications for certain important events within Amazon RDS, you become less able to promptly respond to potential security incidents or failure events.\n\n## 1. Operational Disruption\n\nWithout an RDS event subscription, you might miss crucial warnings about potential issues, such as connection attempts or configuration changes. For example, you might not be alerted to failover events, which might impact the availability and performance of your service. This can lead to disruption in operations and compromise user experience, which can, in turn, affect your company's reputation.\n\n## 2. Data Loss\n\nFailure to receive notifications about backups, replication events, or other data-related events could ultimately lead to data loss. If there's an issue with a backup, or a replication event fails, and you're unaware, it could mean significant or total data loss in a worst-case scenario. \n\n## 3. Financial Impact\n\nGiven that database downtime or data loss could have severe financial ramifications, including lost revenue and potential regulatory fines, it's paramount to be aware of these events as soon as they happen. Also, the cost of remediating data loss or disruption could be substantially more than the cost of a simple proactive alerting solution.\n\n## 4. Compliance Risks\n\nFor industries governed by strict data protection and privacy regulations, not having appropriate alerting mechanisms in place could expose your organization to compliance risks. This could potentially lead to hefty fines and other consequences from regulatory bodies.\n\n## 5. Security Risks\n\nWithout appropriate alerts, unauthorized access or changes to your Amazon RDS could go unnoticed, exposing your system to security threats. This could lead to a compromise of sensitive information, affecting your customers and your organization's reputation significantly.\n\nIn conclusion, non-compliance with the AWS control mentioned above could be detrimental to your organization as it increases the risk of operational disruption, data loss, financial loss, compliance breaches, and heightened security risks.\n"
      ],
      "x-kaytu-usefulness-example": [
        "The AWS Control for checking whether an Amazon RDS event subscription exists can be incredibly useful in various situations. For instance:\n\n```markdown\nA cloud-based application company frequently launches new features and updates that often necessitate changes on their various AWS RDS databases. Implementing this control can help monitor these changes, and alleviate some of the risks associated with them. \n\nBy setting up an RDS event subscription with notifications enabled for specific source type, event category key-value pairs, the company's DevOps team can be quickly informed of important events affecting their databases, such as failovers, configuration changes, or backup events. \n\nFor example:\n\n- Source Type: DB Instance, Event Category: availability\n- Source Type: DB Instance, Event Category: backup\n- Source Type: DB Instance, Event Category: creation\n- Source Type: DB Instance, Event Category: deletion\n- Source Type: DB Instance, Event Category: failover\n- Source Type: DB Instance, Event Category: maintenance\n- Source Type: DB Instance, Event Category: recovery\n\nWhenever these events occur, the subscription will trigger a notification, allowing the team to react quickly, and maintain optimal performance and availability for their applications. \n```\nThis AWS Control ensures that changes to the databases do not go unnoticed and that timely actions are taken when necessary, thereby ensuring effective and continuous operation of the company's services hosted on AWS RDS databases."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elbv2_1",
    "Title": "1 Application Load Balancer should be configured to redirect all HTTP requests to HTTPS",
    "Description": "This control checks whether HTTP to HTTPS redirection is configured on all HTTP listeners of Application Load Balancers. The check fails if one or more HTTP listeners of Application Load Balancers do not have HTTP to HTTPS redirection configured.",
    "QueryID": "aws_elb_application_lb_redirect_http_request_to_https",
    "DocumentURI": "policies/aws_foundational_security_elbv2_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transit"
      ],
      "foundational_security_item_id": [
        "elbv2_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ELBv2"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control (i.e., not having HTTP to HTTPS redirection configured on all HTTP listeners of Application Load Balancers) can lead to potential security risks and vulnerabilities with possible financial, reputational, and data related consequences. \n\n* **Security Risks**: The most direct consequence is the security risk. The absence of redirection from HTTP to HTTPS means that data transmitted between a client and the server could be exposed to hackers. This can lead to data theft, identity theft and injection of malicious code.\n\n* **Financial Consequences**: In the event of a data breach resulting from this non-compliance, there may be large financial costs involved to remediate the breach, to compensate affected customers, or to pay for potential fines levied by regulators.\n\n* **Reputational Damage**: If a data breach or data leakage is being made public, the reputational damage to the company can be significant. Customers may lose their trust in the company's ability to protect their data, which can lead to loss of customers and revenue.\n\n* **Data Compliance Failures**: Many data protection standards, such as GDPR, PCI-DSS, or HIPAA, require transmission of data over secure protocols (like HTTPS). Non-compliance with these regulations, due to a lack of HTTP to HTTPS redirection, could thus not only lead to non-compliance with AWS controls, but also more widely recognised standards, leading to further potential fines and sanctions.\n\n* **Lower Search Engine Rankings**: Some search engines like Google rank websites with HTTPS higher than those without. This could result in decreased search engine visibility, potentially leading to a loss in business.\n\nTo avoid these potential costs, it is recommended to always configure HTTP to HTTPS redirection on all HTTP listeners of Application Load Balancers."
      ],
      "x-kaytu-usefulness-example": [
        "For example, you are operating an e-commerce website which processes sensitive information such as credit card numbers or personal user data. In order to ensure the safety and privacy of this information, it's crucial that all data transferred between users and your site happens over a secure HTTPS connection. \n\nThis AWS control can be highly useful in such a scenario. It would automatically monitor all HTTP listeners on your Application Load Balancers, ensuring they are appropriately configured to redirect to HTTPS. This way, even if a user tries accessing your website over an insecure HTTP connection, they would automatically be redirected to the secure HTTPS version. \n\nThe check also helps maintain compliance with data protection standards and regulations. If an HTTP listener is not configured to redirect to HTTPS, the check will fail and alert you, allowing you to quickly rectify the issue, which helps to eliminate potential points of vulnerability and enhances your website's overall security posture.\n\nHere is an AWS CLI command to configure HTTP to HTTPS redirection:\n```markdown\naws elbv2 modify-listener --listener-arn arn:aws:elasticloadbalancing:region:account-id:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2 --default-actions Type=redirect,TargetGroupArn=arn:aws:elasticloadbalancing:region:account-id:targetgroup/my-targets/73e2d6bc24d8a067,Order=1,RedirectConfig={Protocol=HTTPS,Port=443,StatusCode=HTTP_301}\n```\nIt is important to replace \"region\", \"account-id\", \"listener-arn\", and \"TargetGroupArn\" with your actual details. This command will configure your HTTP listener (identified by listener-arn parameter) to redirect (StatusCode=HTTP_301) all incoming traffic to HTTPS (Protocol) on port 443."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_lambda_1",
    "Title": "1 Lambda function policies should prohibit public access",
    "Description": "This control checks whether the Lambda function resource-based policy prohibits public access outside of your account. The Lambda function should not be publicly accessible, as this may allow unintended access to your code stored in the function.",
    "QueryID": "aws_lambda_function_restrict_public_access",
    "DocumentURI": "policies/aws_foundational_security_lambda_1.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "lambda_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Lambda"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "## AWS Control: Lambda Function Prohibiting Public Access\n\n### Cost of Non-compliance:\n\nNon-compliance with this control can lead to several impacts that might be costly for an organization. They include the following:\n\n1. **Security Breaches**: Allowing public access to your Lambda function relates to potential security vulnerabilities where malicious actors may gain access to your sensitive code, modify it, execute harmful actions, and access data.\n\n2. **Loss of Reputation**: Any security incident arising from this might harm the public image of your organization, impacting customer trust.\n\n3. **Regulatory Fines**: Depending on the nature of your business and the kind of data you handle, the organization could also face severe penalties from regulatory bodies for not adhering to data protection principles.\n\n4. **Unexpected costs**: If unauthorized individuals gain access to your Lambda functions, they could invoke them repeatedly, leading to unnecessary AWS costs.\n\n5. **Loss of Data**: In severe cases of security breaches, critical data could be lost, which could impact business operations and decision making.\n\n6. **Business Continuity Risk**: Depending on the extent of the breach, critical systems could be compromised which could lead to business interruptions.\n\nTherefore, it is extremely important to ensure that this control is complied with to avoid the mentioned impacts."
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider an organization called 'Tech Industries' that uses AWS Lambda to run its serverless applications. They have sensitive code related to their business logic in these Lambda functions. If they inadvertently make a function publicly accessible, anyone on the internet may invoke the function and potentially view or manipulate the underlying code or data. \n\nSo, the control that checks whether the Lambda function's resource-based policy prohibits public access is highly useful for 'Tech Industries'. It ensures that only authorized entities within their account can access and run their sensitive Lambda functions. This significantly reduces the risk of unauthorized access and potential data breaches or code exploitation. \n\nThe control can automatically alert the security team if it detects any function is publicly accessible, enabling them to take immediate remedial action. This in turn helps in maintaining the integrity and security of ‘Tech Industries' serverless applications and protecting their intellectual property."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_lambda_2",
    "Title": "2 Lambda functions should use latest runtimes",
    "Description": "This control checks that the Lambda function settings for runtimes match the expected values set for the latest runtimes for each supported language. This control checks for the following runtimes: nodejs14.x, nodejs12.x, nodejs10.x, python3.8, python3.7, python3.6, ruby2.7, ruby2.5,java11, java8, go1.x, dotnetcore3.1, dotnetcore2.1.",
    "QueryID": "aws_lambda_function_use_latest_runtime",
    "DocumentURI": "policies/aws_foundational_security_lambda_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_development"
      ],
      "foundational_security_item_id": [
        "lambda_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Lambda"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can have both financial, reputational, and security implications on AWS and it's operational efficiency:\n\n1. **Operational Efficiency**: Using outdated Lambda function runtimes can lead to inefficient code execution. The newer versions of the languages typically have performance optimizations. The code may run slower than expected and can consume more computing resources, leading to higher costs.\n\n2. **Security Risks**: Older versions of languages may have security vulnerabilities that are fixed in newer versions. If you are using an outdated version, your Lambda functions could be more at risk of security breaches.\n\n3. **Troubleshooting and Maintenance Difficulty**: If a bug is identified with a specific version of a runtime that is not being maintained or updated you may not have a fix available. This complicates troubleshooting and maintaining your applications.\n\n4. **Software Incompatibility**: Newer libraries or frameworks may not be compatible with older runtime versions. This can limit your ability to use certain tools or code libraries that rely on features or optimizations in newer runtimes.\n\n5. **Reputational Damage**: If a security breach does happen due to a vulnerability in an outdated runtime, it could lead to reputational damage. Customers and clients might lose trust in the security and efficacy of your systems.\n\nIn the longer term, these costs could end up being significantly higher than the initial investment in updating your runtimes to the newer versions. It can also save you a significant amount of time and energy in terms of maintenance and troubleshooting."
      ],
      "x-kaytu-usefulness-example": [
        "For a company that is managing several AWS Lambda functions for various microservices, staying updated with the latest runtimes is crucial for performance, security, and compatibility. However, with so many functions to manage, it could be tricky to manually check each one for the correct runtime settings.\n\nHere's where this AWS control is very beneficial: \n\n```markup\nThe control automatically scans your AWS Lambda functions and verifies that they are running on the latest supported language runtime, such as nodejs14.x, python3.8, or java11. \n\nThis helps in the following ways:\n\n1. **Security**: Ensuring that the functions are using the latest supported runtimes helps in mitigating potential security vulnerabilities which could have existed in the previous versions.\n\n2. **Performance**: The latest versions of runtime environments often come with performance enhancements that can make your Lambda functions execute faster or utilize less resources.\n\n3. **Compatibility and Maintenance**: Sometimes, new features or improvements in language might not be backwards compatible. Therefore, keeping functions up to date can prevent potential breaks in the application. Moreover, out of date runtimes could stop receiving updates or patches, making it risky to maintain.\n\nWith this control, you are promptly alerted if any of your Lambda functions are found to be utilizing outdated runtimes, allowing you to update them promptly and maintain your services' security and efficiency.\n```\nThis becomes particularly beneficial in large scale applications where manually managing runtime settings could be significantly time consuming and prone to errors or oversight."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_lambda_5",
    "Title": "5 VPC Lambda functions should operate in more than one Availability Zone",
    "Description": "This control checks if Lambda has more than one availability zone associated. The rule fails if only one availability zone is associated with Lambda.",
    "QueryID": "aws_lambda_function_multiple_az_configured",
    "DocumentURI": "policies/aws_foundational_security_lambda_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "lambda_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Lambda"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control means that your architecture is less resilient and can suffer significant downtime and potential data loss in the event of failure or disruption in a single availability zone. In other words, you have lower high availability and disaster recovery capability. \n\nHere are several cost implications to consider in a markup format:\n\n1. **Operational Downtime**: With only one availability zone, you risk experiencing serious operational disruptions if that single zone suffers any failure. This downtime can cost a considerable amount in lost productivity and potential sales.\n\n2. **Loss of Business and Customer Trust**: Extended periods of service disruption can harm your business reputation and customer trust, driving them away to competitors. This can also have long-term implications on customer loyalty and revenue.\n\n3. **Data Loss**: In the case of catastrophic failures, without replication of data across different availability zones, there is a substantial risk of data loss which can cost a significant amount, in addition to regulatory fines.\n\n4. **Expensive Recovery**: Recovering from a significant downtime or data loss can be a costly affair. It could include the remuneration for extra working hours, hiring external expertise, acquiring new hardware or the cost associated with recreating the lost data.\n\n5. **Penalties for non-compliance**: Certain industries are subject to regulations that require disaster recovery and data protection measures. Non-compliance with these regulations can result in hefty fines or legal consequences.\n\nOverall, while having Lambdas in just one availability zone might seem cheaper in the short-term, the long-term costs and risks associated with non-compliance can far outweigh the initial savings. \n\n_Conclusion: High availability and disaster recovery are vital for businesses. By associating Lambda with more than one availability zone, you can ensure your applications remain operational even if one zone experiences issues, thus avoiding the expensive costs associated with downtime, data loss and potential compliance issues._"
      ],
      "x-kaytu-usefulness-example": [
        "#### Example: \n\nImagine you're running a highly critical cloud application that requires high availability and reduced latency. Your application has a global audience and cannot afford any downtime. It relies heavily on AWS Lambda to handle event-driven functionalities.\n\nDue to the nature of your application, it is important that these Lambda functions are distributed across more than one availability zone for fault tolerance. If all Lambda instances were in a single availability zone and that zone experienced an outage, it would result in unacceptable downtime for your application.\n\nIn such a scenario, this AWS control to check if Lambda has more than one availability zone associated proves very useful. It will help to proactively mitigate risks, by failure the rule if only one availability zone is associated with Lambda, prompting you to take action and ensure that your Lambda functions are distributed across multiple zones for better reliability and increased uptime."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_config_1",
    "Title": "1 AWS Config should be enabled",
    "Description": "This control checks whether AWS Config is enabled in the account for the local Region and is recording all resources. The AWS Config service performs configuration management of supported AWS resources in your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items, and any configuration changes between resources.",
    "QueryID": "aws_config_enabled_all_regions",
    "DocumentURI": "policies/aws_foundational_security_config_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "inventory"
      ],
      "foundational_security_item_id": [
        "config_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Config"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance with the given Amazon Web Services (AWS) control – \"AWS Config being enabled for the local region and recording all resources\" – includes security risks, business continuity issues, and potential financial implications. Below is an explanation of these costs:\n\n1. **Security Risks**: If AWS Config is not enabled or not recording all resources, the users forfeit a granular, time-series view into the state and changes of their AWS infrastructure. Any unauthorized or inadvertent changes might go unnoticed leading to potential security breaches.\n\n2. **Business Continuity**: Undetected changes to critical resources may cause disruptions to services, thus affecting business continuity. AWS Config provides a detailed view of the configuration of AWS resources and their relationships to other resources, which can help prevent or quickly resolve such disruptions.\n\n3. **Audit and Compliance Failures**: Many industry regulations require comprehensive auditing and tracking of resources. AWS Config records necessary information to aid audit, compliance, and governance, and hence, non-compliance could imply failed audits, penalties or sanctions by regulatory bodies, and loss of customer trust.\n\n4. **Financial Implications**: Undetected changes might lead to unnecessary cost incurrence (for instance, expensive resources getting spun up unintentionally) and potential revenue loss due to outages. Besides, the additional cost involved in the forensic analysis of security incidents and remediating the system to its secure state can be saved with AWS Config in place.\n\n5. **Operational Efficiency**: AWS Config offers means for troubleshooting and investigating operational issues which otherwise could consume significant time and resources. \n\nTherefore, the cost of non-compliance with this control can be significant and varied, encompassing operational, financial, reputational, and legal aspects."
      ],
      "x-kaytu-usefulness-example": [
        "```md\nFor instance, an IT company named 'X Tech' is using AWS resources heavily for their infrastructure needs. They constantly create, manage, modify, and delete numerous AWS resources as per project's requirements, across multiple regions. This control, i.e., enabling AWS Config is extremely useful for them to keep track of every change, modification, or deletion of resources.\n\nWhen AWS Config is enabled for local regions and all resources are recorded, it ensures that all resource configurations are managed centrally. This information gives 'X Tech' a detailed view of resource configuration history, which is a valuable insight for troubleshooting, auditing, and assessing resource compliance with their internal policies.\n\nFor example, let's say two resources in their infrastructure start to behave unexpectedly, affecting a crucial project. With AWS Config enabled, 'X Tech' can easily look into the configuration history of these resources, examine the configuration changes, and determine if a change could have triggered the issue. By identifying the cause swiftly, they can quickly resolve the issue to minimize the impact on the project. Thus, AWS Config certainly adds profound value to managing and maintaining their AWS-based infrastructure.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_account_1",
    "Title": "1 Security contact information should be provided for an AWS account",
    "Description": "This control checks if an Amazon Web Services (AWS) account has security contact information. The control fails if security contact information is not provided for the account.",
    "QueryID": "aws_account_alternate_contact_security_registered",
    "DocumentURI": "policies/aws_foundational_security_account_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_configuration"
      ],
      "foundational_security_item_id": [
        "account_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Account"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can be categorized into multiple buckets including operational, security, and financial implications.\n\n1. **Operational Implications:** If security contact information is not provided, any critical security communications from AWS may not reach the account holders promptly. This can result in delayed response to potential threats, causing operational disruptions. \n\n2. **Security Implications:** In case of potential security breaches, the lack of contact information can compromise swift remediation. Not having a direct line of communication for security-related emergencies could lead to prolonged periods of vulnerability, thereby increasing risks of data breaches, unauthorized access, or potentially, loss of sensitive data.\n\n3. **Financial Implications:** Non-compliance to this control could also lead to financial implications. If a security concern arises, not being able to address it promptly because of lack of proper communication can lead to potential losses due to downtime, loss of business credibility, potential legal action and penalties. \n\n4. **Compliance Costs:** AWS, as a part of its Shared Responsibility Model, needs to adhere to various global compliance standards. Not having proper contact information hampers the compliance posture and could lead to non-compliance penalties and fines for failing to meet these norms.\n\n5. **Reputation Damage:** Last but not least, a lack of proper security contacts can lead to reputational damage. If a security incident occurs and your organization is not responsive, it may tarnish the company's image, impacting its reputation and customer trust.\n\nRecognizing these potential costs, maintaining up-to-date security contact information is crucial for the smooth operation and protection of your AWS account."
      ],
      "x-kaytu-usefulness-example": [
        "The usefulness of this AWS control is primarily seen in security incidents. For example, suppose a suspicious activity is detected on your AWS account. This could range from multiple failed login attempts to unexpected resource utilization surges. AWS needs a way to immediately alert you about such anomalies.\n\nThat's where the security contact information comes in. AWS can use this information (which can be an email address, a phone number, or both) to promptly notify you about the suspected security threat. You will then be able to take quick action – such as changing passwords, scrutinizing recent activities, or enabling Multi-Factor Authentication (MFA) – to mitigate the threat.\n\nWithout a security contact, the process of alerting and resolving potential security incidents could be delayed, increasing the vulnerability of your account. Thus, having security contact information is not only useful, but it is essential for maintaining high security standards for your AWS account."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_kinesis_1",
    "Title": "1 Kinesis Data Streams should be encrypted at rest",
    "Description": "This control checks if Kinesis Data Streams are encrypted at rest with server-side encryption. This control fails if a Kinesis stream is not encrypted at rest with server-side encryption.",
    "QueryID": "aws_kinesis_stream_server_side_encryption_enabled",
    "DocumentURI": "policies/aws_foundational_security_kinesis_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "kinesis_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Kinesis"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control carries several potential costs, both financial and otherwise:\n\n1. **Data Breach Costs**: Unencrypted Kinesis Data Streams are essentially vulnerable to cyber attacks. In case of successful breaches, organizations could not only lose valuable data but also have to bear the hefty costs associated with data breaches. These costs typically include forensic investigation, regulatory fines, legal expenses, customer notification and compensation, system remediation and potential reputational damage which can affect future revenue.\n\n2. **Regulatory Fines**: Many industry regulations and standards such as GDPR, CCPA, HIPAA, and PCI-DSS mandate specific requirements around data encryption. Non-compliance could lead to significant fines and penalties. In severe cases, it may lead to the loss of certain business privileges (like processing credit card information). \n\n3. **Loss of Customer Trust**: If the lack of encryption leads to a security incident, there can be a significant loss of customer trust and damage to the organization's reputation. This can also lead to loss of business and revenue.\n\n4. **Forensic Costs**: In the event of a security incident, often a third-party investigator is needed to perform a forensic analysis on the event. Without proper encryption, these costs can add up as the full scope of the breach needs to be assessed.\n\n5. **Potential Legal Liability**: If sensitive data is breached, the company could face lawsuits from affected customers for not having protected their data adequately.\n\n6. **Remediation Costs**: If a stream is found to be non-compliant, there will likely be costs associated with bringing that stream into compliance - such as the cost of employing encryption or potential restructuring of storage arrangements.\n\nIn light of these potential costs, it's essential to ensure compliance with all AWS Controls to protect the organization's data, finances, and reputation."
      ],
      "x-kaytu-usefulness-example": [
        "For a financial service company that processes large volumes of sensitive customer data in real-time, using AWS Kinesis Data Streams is crucial for effective data processing and analytics. This company, in compliance with financial regulations and to ensure data security, has to ensure that this data is always protected - both in-transit and at rest.\n\nIn such a scenario, the control checking if Kinesis Data Streams are encrypted at rest with server-side encryption becomes highly useful. This automated control can continuously monitor and detect any Kinesis data streams that are not encrypted, ensuring the company always remains compliant with regulations and safeguards sensitive customer data effectively. \n\nFor instance, if a new Kinesis stream is launched accidentally without server-side encryption, this control will promptly alert the security team. The team can then take immediate action to rectify this and avoid potential regulatory penalties and data breaches. Therefore, this AWS control is invaluable in maintaining a high standard of data security and compliance."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_dynamodb_1",
    "Title": "1 DynamoDB tables should automatically scale capacity with demand",
    "Description": "This control checks whether an Amazon DynamoDB table can scale its read and write capacity as needed. This control passes if the table uses either on-demand capacity mode or provisioned mode with auto scaling configured. Scaling capacity with demand avoids throttling exceptions, which helps to maintain availability of your applications.",
    "QueryID": "aws_dynamodb_table_auto_scaling_enabled",
    "DocumentURI": "policies/aws_foundational_security_dynamodb_1.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "dynamodb_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/DynamoDB"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can lead to several potential costs and risks, including:\n\n**1. Reduced Application Availability**: If a DynamoDB table can't scale, there may be a higher risk of throttling exceptions. Throttling exceptions occur when your application's read or write requests exceed the table's capacity. If the application can't handle these exceptions, it may be inaccessible or slow to users, thereby affecting service availability.\n\n**2. Increased Operational Costs**: Without auto-scaling, the table may have more read and write capacity than what is necessary, leading to higher operational costs. Furthermore, if the lack of scalability results in application downtime, there could be further costs associated with diagnosing and fixing the issue, not to mention potential penalties under Service Level Agreements (SLAs).\n\n**3. Lower Customer Satisfaction**: The reduced availability and potential slowness of the application could lead to lower customer satisfaction, which can in turn result in lost revenue and damage to your brand's reputation.\n\n**4. Business Impact**: If mission-critical business applications rely on the database and can't access the data they need due to throttling exceptions, the impact could be much more significant, disrupting essential business activities.\n\nOverall, the cost of non-compliance to this AWS Control can impact many aspects of a business, from direct financial costs to broader implications like customer satisfaction and business continuity. Proper configuration of AWS services is key to optimising resources and ensuring a robust application environment."
      ],
      "x-kaytu-usefulness-example": [
        "For example, imagine an e-commerce company that uses Amazon DynamoDB to store customer data, including order information. During peak shopping periods, such as Black Friday or Cyber Monday, they experience a significant surge in customer activity. This increases the demand for data read and writes to the DynamoDB table. If the e-commerce company set a limited read and write capacity, they may not be able to handle this surge, causing their applications to throw throttling exceptions and possibly become unavailable to their customers.\n\nBy enabling auto scaling or using on-demand capacity mode in their DynamoDB table, they can ensure their application scales with demand and maintains high availability. The check provided by this AWS control would validate if they have enabled these settings, helping them prevent any potential downtime during peak periods.\n\nThe markup for this control might look like this:\n```\nresource \"aws_dynamodb_table\" \"example\" {\n  name           = \"example\"\n  billing_mode   = \"PROVISIONED\"\n  read_capacity  = 20\n  write_capacity = 20\n  hash_key       = \"ID\"\n\n  attribute {\n    name = \"ID\"\n    type = \"N\"\n  }\n\n  autoscaling_target {\n    read_capacity       = 100\n    write_capacity      = 100\n    scaling_policy_name = \"DynamoDBAutoScalingPolicy\"\n  }\n}\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_dynamodb_2",
    "Title": "2 DynamoDB tables should have point-in-time recovery enabled",
    "Description": "This control checks whether point-in-time recovery (PITR) is enabled for an Amazon DynamoDB table. Backups help you to recover more quickly from a security incident. They also strengthen the resilience of your systems. DynamoDB point-in-time recovery automates backups for DynamoDB tables. It reduces the time to recover from accidental delete or write operations. DynamoDB tables that have PITR enabled can be restored to any point in time in the last 35 days.",
    "QueryID": "aws_dynamodb_table_point_in_time_recovery_enabled",
    "DocumentURI": "policies/aws_foundational_security_dynamodb_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "backups_enabled"
      ],
      "foundational_security_item_id": [
        "dynamodb_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/DynamoDB"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can result in several potential risks and financial losses which include:\n\n1. **Data Loss**: If point-in-time recovery (PITR) is not enabled and there is a security incident or accidental deletion, there may be irreversible data loss. This could impact business operations if critical information is lost.\n\n2. **Operational Disruptions**: The time taken to manually restore from the last available backup or recreate the lost data could lead to significant operational disruptions and productivity loss.\n\n3. **Financial Impact**: The above-mentioned operational disruptions would likely lead to financial losses. Additionally, recreating lost data could require considerable resources, further aggravating the financial impact.\n\n4. **Reputation Damage**: If the data loss affects customers or public services, it may lead to reputational damage which might result in loss of customers or legal penalties.\n\nSo, in terms of Markup:\n\n```\n- **Data Loss**: If point-in-time recovery (PITR) is not enabled and there is a security incident or accidental deletion, there may be irreversible data loss. This could impact business operations if critical information is lost.\n- **Operational Disruptions**: The time taken to manually restore from the last available backup or recreate the lost data could lead to significant operational disruptions and productivity loss.\n- **Financial Impact**: The above-mentioned operational disruptions would likely lead to financial losses. Additionally, recreating lost data could require considerable resources, further aggravating the financial impact.\n- **Reputation Damage**: If the data loss affects customers or public services, it may lead to reputational damage which might result in loss of customers or legal penalties.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "For example, if you have a shopping website where all the customer and purchasing data is stored on an Amazon DynamoDB table. These tables contain crucial information like customer details, order history, and inventory which are constantly updated. Misconfigurations or software bugs could potentially cause data loss or corruption in these tables. \n\nIf Point-in-Time recovery (PITR) was not enabled, you would have to manually backup all the data, which is both, time-consuming and inefficient. Moreover, in case of a data loss incident, restoring the data would have to be done manually, which would extend the recovery time and potentially cause interruptions to your business operations. \n\nOn the other hand, if PITR is enabled, automatic backups of the DynamoDB tables are created to a restore point in time. So, in case of a data loss incident, these backups can be used to restore the database to the state it was in just before the incident. This can help minimize downtime and ensure business continuity. Furthermore, backups are managed for a rolling 35 days, so you have the flexibility to restore from a backup from any point within that timeframe.\n\nTherefore, the AWS control that checks whether PITR is enabled for DynamoDB tables is useful in providing an automated backup solution, strengthening system resilience, and enabling quick recovery from data loss incidents."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_dynamodb_3",
    "Title": "3 DynamoDB Accelerator (DAX) clusters should be encrypted at rest",
    "Description": "This control checks whether a DAX cluster is encrypted at rest. Encrypting data at rest reduces the risk of data stored on disk being accessed by a user not authenticated to AWS. The encryption adds another set of access controls to limit the ability of unauthorized users to access to the data. For example, API permissions are required to decrypt the data before it can be read.",
    "QueryID": "aws_dax_cluster_encryption_at_rest_enabled",
    "DocumentURI": "policies/aws_foundational_security_dynamodb_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "dynamodb_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/DynamoDB"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can vary greatly and can occur on different levels, including but not limited to:\n\n1. **Security breach and data loss**: If a DAX cluster is not encrypted at rest, unauthorized users might have access to sensitive and important data leading to a significant risk of security breach. This could lead to data loss or leakage, causing significant damage to the organization's reputation and possibly financial losses as well.\n\n2. **Loss of customer trust**: If customers find that their data isn't being securely stored, it could lead to loss of customers, negatively impacting the organization's revenues.\n\n3. **Regulatory Violations and Fines**: Unencrypted data might violate regulatory requirements, such as GDPR (General Data Protection Regulation) and HIPAA (Health Insurance Portability and Accountability Act). This can lead to substantial fines and penalties.\n\n4. **Investigation \u0026 Recovery Costs**: In case of a security breach due to unencrypted data, the organization might have to incur costs for conducting an internal investigation, recovery of lost data, legal procedures, PR measures to restore company image, etc.\n\n5. **Increased Audit Costs**: Not complying with AWS controls may lead to increased scrutiny during audits, resulting in more effort and cost involved in audit procedures.\n\nIn a nutshell, the cost of non-compliance can be significantly high including financial penalties, legal litigations, reputational damage, and loss of business. Therefore, it's recommended to encrypt the data at rest and follow the AWS best practices for data security."
      ],
      "x-kaytu-usefulness-example": [
        "```markdown\nExample:\n\nCompany Alpha uses AWS DynamoDB Accelerator (DAX) to provide fast and reliable in-memory cache for DynamoDB. As they store sensitive customer data, they ensure that all clusters are encrypted at rest for security reasons. \n\nDuring an internal audit, they utilize the AWS control to check if their DAX cluster is encrypted at rest. It returns positive, confirming that data stored on the disk is encrypted and thus is inaccessible to users not authenticated to AWS. \n\nThis encryption also secures their data in case of any potential breaches from unauthorized users. The built-in AWS controls provide a layer of security which requires API permissions to decrypt the data before it can be read. The AWS control effectively helped Company Alpha solidify their security infrastructure, providing an additional safeguard for sensitive customer data.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_redshift_1",
    "Title": "1 Amazon Redshift clusters should prohibit public access",
    "Description": "This control checks whether Amazon Redshift clusters are publicly accessible. It evaluates the PubliclyAccessible field in the cluster configuration item. The PubliclyAccessible attribute of the Amazon Redshift cluster configuration indicates whether the cluster is publicly accessible. When the cluster is configured with PubliclyAccessible set to true, it is an Internet-facing instance that has a publicly resolvable DNS name, which resolves to a public IP address. When the cluster is not publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. Unless you intend for your cluster to be publicly accessible, the cluster should not be configured with PubliclyAccessible set to true.",
    "QueryID": "aws_redshift_cluster_prohibit_public_access",
    "DocumentURI": "policies/aws_foundational_security_redshift_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resources_not_publicly_accessible"
      ],
      "foundational_security_item_id": [
        "redshift_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Redshift"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control may involve several costs including:\n\n1. **Security Risk**: Making your Amazon Redshift clusters publicly accessible can lead to potential security risks. It can expose sensitive data to unauthorized users, leading to potential data breaches and compromising your systems.\n\n2. **Regulatory Compliance Risks**: Non-compliance with this control may also lead to regulatory repercussions. Many data protection laws and regulations mandate that private data should not be exposed publicly. Breaching these requirements could lead to hefty fines and penalties.\n\n3. **Operational Costs**: If a publicly accessible cluster is attacked or compromised, it can lead to downtime, loss of data and increased expenses for remedial measures. \n\n4. **Reputation Costs**: A data breach resulting from a publicly exposed Amazon Redshift cluster can damage your company's reputation, leading to a loss in customer trust and business.\n\nIn Markup format:\n\n```\n- **Security Risk**: Making your Amazon Redshift clusters publicly accessible can lead to potential security risks. It can expose sensitive data to unauthorized users, leading to potential data breaches and compromising your systems.\n\n- **Regulatory Compliance Risks**: Non-compliance with this control may also lead to regulatory repercussions. Many data protection laws and regulations mandate that private data should not be exposed publicly. Breaching these requirements could lead to hefty fines and penalties.\n\n- **Operational Costs**: If a publicly accessible cluster is attacked or compromised, it can lead to downtime, loss of data and increased expenses for remedial measures.\n\n- **Reputation Costs**: A data breach resulting from a publicly exposed Amazon Redshift cluster can damage your company's reputation, leading to a loss in customer trust and business.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nSuppose you are running an e-commerce business that maintains an Amazon Redshift cluster to store, process, and analyze critical business data. This data includes customer information, transaction details, product data, etc. You want to ensure this data is secure and can only be accessed by authorized individuals within your organization.\n\nIf the Amazon Redshift cluster is publicly accessible (i.e., PubliclyAccessible = true), there might be a security risk as potential malicious entities can directly access or target your database from the internet. Therefore, to ensure the safety of your sensitive business data, you will want the Redshift cluster to be inaccessible publicly. \n\nTo help maintain this security, you can use the AWS control, which evaluates the PubliclyAccessible field in the cluster configuration item, to automatically check and validate the accessibility status of your Amazon Redshift cluster. If the control discovers that the cluster is publicly accessible, a warning is prompted, allowing you to take immediate action to rectify this. Hence, AWS control is extremely useful in preventing and detecting potential security risks."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_redshift_2",
    "Title": "2 Connections to Amazon Redshift clusters should be encrypted in transit",
    "Description": "This control checks whether connections to Amazon Redshift clusters are required to use encryption in transit. The check fails if the Amazon Redshift cluster parameter require_SSL is not set to 1. TLS can be used to help prevent potential attackers from using person-in-the-middle or similar attacks to eavesdrop on or manipulate network traffic. Only encrypted connections over TLS should be allowed. Encrypting data in transit can affect performance. You should test your application with this feature to understand the performance profile and the impact of TLS.",
    "QueryID": "aws_redshift_cluster_encryption_in_transit_enabled",
    "DocumentURI": "policies/aws_foundational_security_redshift_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transit"
      ],
      "foundational_security_item_id": [
        "redshift_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Redshift"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can be categorized into the following major impacts:\n\n1. **Security Risk:** The most crucial cost of non-compliance is the potential security risk. Not using encryption for connections to Amazon Redshift clusters can expose sensitive data to potential attackers. They can use person-in-the-middle or similar attacks to eavesdrop on or manipulate network traffic. By intercepting the data in transit, they can gain unauthorized access to confidential or sensitive information.\n\n2. **Regulatory Fines:** Depending upon the nature of the data being handled, non-compliance to such security controls may result in violations of data protection and privacy laws like GDPR, CCPA, HIPAA, etc. This can result in hefty financial penalties and fines imposed by regulatory bodies.\n\n3. **Loss of Trust:** If a data breach occurs due to non-compliance with this control, it could damage the organization's reputation leading to loss of customer trust, which can be detrimental to a business in the long run.\n\n4. **Legal and remediation costs:** In the event of a data breach, the organization may face legal lawsuits from customers or partners. Additionally, the organization would need to invest in incident response and remediation, which can be a costly affair.\n\n5. **Potential Business Loss:** Depending upon the severity of the data breach, the organization can also face business loss. This can stem from lost customers, interruption in business operations or inability to compete effectively in the market due to reputational damage.\n\nThus, ensuring compliance with this AWS control by setting the Amazon Redshift cluster parameter `require_SSL` to 1, to enforce the use of TLS encryption, can help in preventing such potential risks and costs."
      ],
      "x-kaytu-usefulness-example": [
        "Instance of Usefulness\n\nA financial company that uses AWS Redshift for its database needs is concerned about the security and privacy of its sensitive financial data. The company doesn't want any unauthorized person to access, decrypt or manipulate the data in transition. Considering these needs, the financial company enables the AWS Control which checks if the connections to Amazon Redshift clusters are required to use encryption in transit.\n\nWith the require_SSL parameter set to 1, now all the data in transit is mandatorily encrypted and cannot be intercepted or manipulated by potential attackers. This ensures the confidentiality and integrity of the sensitive financial data during communication, which is crucial for the firm's business. Although the encryption might affect the database performance, the firm finds it a reasonable trade-off for the added security. The firm also performs a series of tests to understand and mitigate any negative impact on performance due to TLS encryption."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_redshift_3",
    "Title": "3 Amazon Redshift clusters should have automatic snapshots enabled",
    "Description": "This control checks whether Amazon Redshift clusters have automated snapshots enabled. It also checks whether the snapshot retention period is greater than or equal to seven.",
    "QueryID": "aws_redshift_cluster_automatic_snapshots_min_7_days",
    "DocumentURI": "policies/aws_foundational_security_redshift_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "backups_enabled"
      ],
      "foundational_security_item_id": [
        "redshift_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Redshift"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The non-compliance to this AWS control has mainly two costs: financial and operational.\n\n**1. Financial loss:** If automated snapshots are not enabled for Amazon Redshift clusters and a failure occurs, recovering the lost data will be complex, time-consuming, and expensive. Depending on the size of the data and the criticality of the data lost, the financial impact could be significant.\n\n**2. Operational disruption:** Without snapshots, if data corruption or loss occurs, the business operations that rely on the affected Redshift clusters could be disrupted. The time taken to recover the lost data could cause a potential operational stoppage or slowdown, again, depending on the criticality of the lost data. This could also lead to loss of business, reputation, and customer trust.\n\nAdditionally, if the snapshot retention period is less than seven days, this might not provide enough time for noticing and recovering from data corruption/loss, leading to potential data unrecoverability. This will also amplify the financial and operational disruption caused due to non-compliance with this control. \n\nFor these reasons, complying with this control is essential to maintain the data's integrity, timely recovery in case of failure, and to ensure smooth business operations."
      ],
      "x-kaytu-usefulness-example": [
        "Instance: \n\nAn e-commerce company uses Amazon Redshift to process and analyze large amounts of data to glean valuable insights on customer behavior and improve its products and services. The data stored in Amazon Redshift clusters is of critical importance for the company’s business operations. \n\nExample:\n\nBy utilizing this AWS Control, it verifies that all Redshift clusters have automated snapshots enabled. This is an important feature as it facilitates automatic point-in-time backups of the company's data, providing a disaster recovery solution. These automated snapshots are stored until the specified retention period ends, thereby ensuring data availability and longevity. \n\nFurther, by checking that the snapshot retention period is equal to or greater than seven, the control verifies that snapshots are held for at least a week. This is a useful safeguard in case any data is mistakenly modified or deleted, the weekly snapshots ensure that the company can restore to an earlier state. This control thus provides assurance for the company by enhancing data protection and minimizing the risk of data loss. \n\n```\naws redshift modify-cluster-snapshot-schedule --cluster-identifier mycluster --schedule-identifier my-schedule \n```\nUsing the example command above, the company can modify its cluster snapshot schedule as desired to meet its specific data protection needs. Note that 'mycluster' and 'my-schedule' should be replaced respectively with the name of the cluster and the schedule identifier. \n\nThis AWS Control is thus highly beneficial in ensuring data security and availability, both of which are key for seamless business operations."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_redshift_4",
    "Title": "4 Amazon Redshift clusters should have audit logging enabled",
    "Description": "This control checks whether an Amazon Redshift cluster has audit logging enabled.",
    "QueryID": "aws_redshift_cluster_automatic_snapshots_min_7_days",
    "DocumentURI": "policies/aws_foundational_security_redshift_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "redshift_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Redshift"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control implies that your Amazon Redshift cluster doesn't have audit logging enabled, which can have multiple cost implications:\n\n1. **Insufficient Audit Trails:** Without audit logging enabled, it becomes challenging to monitor and track user activities and system operations on your Redshift cluster. This lack of visibility results in inadequate audit trails that can be costly in troubleshooting issues or system anomalies. \n\n2. **Security Risks:**  Absence of audit logging can escalate the security risks as malicious activities or security breaches might go unnoticed, which could lead to potential data loss, unauthorized access or manipulations.\n\n3. **Compliance Violations:** Many industry standards and regulations, like ISO 27001, PCI DSS, HIPAA, etc., mandate audit logging for data security and privacy. Non-compliance to these norms could lead to heavy fines.\n\n4. **Operational Inefficiencies:** Without logs, identifying operational inefficiencies becomes a herculean task. Logs are essential to spot patterns leading to system failure or performance degradation. Ignoring it could lead to increased operational cost.\n\n5. **Investigation and Litigation Costs:** In case of any data breaches or security incidents, lack of logs can significantly increase the investigation time and subsequently the costs. It can also lead to potential litigation issues if you don't have proper logs to support your case or defense.\n\nThus, it's crucial to enable audit logging for your Amazon Redshift cluster to avoid these associated costs and complications."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\nA large corporation has recently migrated its data warehouse to an Amazon Redshift cluster. All business intelligence, reporting, and data analysis are conducted on this platform. Due to regulatory compliance and security best practices, the corporation needs to keep a log of all activities happening on this Redshift cluster. Having audit logging enabled allows tracking of all SQL commands, database connections, and user activities. \n\nWith the help of this AWS control, the corporation can regularly check if the audit logging is active. If any instance of logging being inactive is discovered, it can be addressed immediately. This not only ensures ongoing monitoring and auditing but also strengthens the security and integrity of the corporation's data. Compliance audits are streamlined because logs can be reviewed easily, and any unauthorized or abnormal activities can be detected and investigated. \n\nIn addition, this control aligns with a proactive security posture, ensuring that all necessary countermeasures are in place for preventing security incidents or breaches. \n\n```\nExample markup code:\nResources:\n  MyRedshiftCluster:\n    Type: AWS::Redshift::Cluster\n    Properties:\n      …\n      LoggingProperties: \n        BucketName: \"Name of the logging bucket\"\n        S3KeyPrefix: \"The prefix applied to the log file names\"\n```\nThe above CloudFormation template includes a LoggingProperties section for a Redshift cluster, which ensures that audit logs for the cluster are stored in the specified bucket. An AWS control can check whether such configuration is existent in the deployed resources and alert if not."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_redshift_6",
    "Title": "6 Amazon Redshift should have automatic upgrades to major versions enabled",
    "Description": "This control checks whether automatic major version upgrades are enabled for the Amazon Redshift cluster.",
    "QueryID": "aws_redshift_cluster_automatic_upgrade_major_versions_enabled",
    "DocumentURI": "policies/aws_foundational_security_redshift_6.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "vulnerability_and_patch_management"
      ],
      "foundational_security_item_id": [
        "redshift_6"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Redshift"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control could result in various costs. Automatic major version upgrades for Amazon Redshift ensure that your clusters are up to date with the latest features, security patches, and performance improvements. By not enabling automatic upgrades, you may put your data and applications at risk, compromise performance, and increase manual administrative tasks. \n\n1. **Security Risk**: Any outdated Redshift cluster might have known vulnerabilities that haven't been patched. This poses a security risk, leading to potential breaches. The cost of a data breach can be significant, including both the direct costs of addressing the breach and indirect costs such as damage to reputation and loss of customer trust.\n\n2. **Performance Issues**: Skipping updates might mean missing performance improvements, causing your clusters to be less efficient than the latest version. This could negatively impact your services' performance, ultimately affecting your service delivery and potentially leading to lost income.\n\n3. **Manual Management**: Without enabling automatic upgrades, your team has to manage the upgrades manually. This increases the administrative overhead and costs in terms of time and resources.  \n\n4. **Non-compliance penalties**: If your organization operates in a highly regulated industry, non-compliance can lead to legal penalties and fines.\n\n5. **Limited Features**: You might miss out on new features and capabilities that come with major updates. This could hamper your team's productivity and stifle innovation.\n\nTo mitigate these costs, businesses should enable automatic major version upgrades for their Amazon Redshift clusters. Doing so helps businesses remain competitive, secure and compliant with industry standards and regulations."
      ],
      "x-kaytu-usefulness-example": [
        "This AWS Config rule is useful in situations where you want to maintain the latest features, security patches, and performance improvements for your Amazon Redshift cluster. For example, an e-commerce company might be running crucial business intelligence tasks on an Amazon Redshift cluster. Turning on automated major version upgrades ensures their cluster always has the latest enhancements, without the need for manual intervention. Here is an instance representation in JSON format:\n\n```json\n{\n  \"ConfigRuleName\": \"redshift-enable-version-upgrade\",\n  \"Scope\": {\n    \"ComplianceResourceTypes\": [\n      \"AWS::Redshift::Cluster\"\n    ]\n  },\n  \"Source\": {\n    \"Owner\": \"AWS\",\n    \"SourceIdentifier\": \"REDSHIFT_ENABLE_VERSION_UPGRADE\"\n  },\n  \"InputParameters\": \"{}\",\n  \"MaximumExecutionFrequency\": \"TwentyFour_Hours\",\n  \"ConfigRuleState\": \"ACTIVE\"\n}\n```\n\nThis configuration sets the rule to check the Amazon Redshift cluster once in every 24 hours and verifies that the enable version upgrade option is active. It is particularly effective in ensuring that all the clusters follow the best practice of enabling automatic version upgrades."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_redshift_7",
    "Title": "7 Amazon Redshift clusters should use enhanced VPC routing",
    "Description": "This control checks whether an Amazon Redshift cluster has EnhancedVpcRouting enabled.",
    "QueryID": "aws_redshift_cluster_enhanced_vpc_routing_enabled",
    "DocumentURI": "policies/aws_foundational_security_redshift_7.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "api_private_access"
      ],
      "foundational_security_item_id": [
        "redshift_7"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Redshift"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control, i.e., not enabling EnhancedVpcRouting for an Amazon Redshift cluster, can have several implications, including cost-related factors such as:\n\n- **Loss of Control Over Data Transfer Costs:** When you enable Enhanced VPC Routing, Amazon Redshift forces all COPY/UNLOAD traffic between your cluster and your data repositories through your Amazon VPC. This gives you control over the route that your traffic takes, including the option to route the traffic through Direct Connect, giving you potential cost reduction for your data transferring process.\n\n- **Data Transfer Speed and Performance:** Without EnhancedVpcRouting, the data transfer speed may slow down, depending on the actual data location and route. Slow data transfers can lead to increased time for tasks to complete, which in turn can drive up overall infrastructure costs and negatively affect system performance.\n\n- **Lack of Network Traffic Visibility:** Although not directly a cost factor, not having EnhancedVPCRouting enabled might lead to less visibility about your network traffic. This could potentially result in increased cost to deal with security incidents, as traffic inspection would be hampered, thereby increasing the risk of exfiltrating data unnoticed.\n\n- **Non-compliance Costs:** If your organization operates under compliance regulations that require specific data routing control and visibility, you may face penalties, liabilities, or loss of customer trust because of non-compliance, which will indirectly increase your costs.\n\nHere is a simple markup format:\n\n```\n- **Loss of Control Over Data Transfer Costs**\n- **Data Transfer Speed and Performance**\n- **Lack of Network Traffic Visibility**\n- **Non-compliance Costs**\n```"
      ],
      "x-kaytu-usefulness-example": [
        "```markdown\n## Example:\n\nSuppose a company named XYZ Corp. is using AWS Redshift for its extensive data warehousing needs. They have a requirement to route all their Amazon Redshift cluster traffic through their VPC to enhance the security of their data transfers.\n\nAfter setting up the VPC, the IT team wants to ensure that EnhancedVpcRouting is enabled on their Redshift cluster. They need this setting to control the routing of all data transferred into and out of the Redshift cluster over the VPC.\n\nWithout this control, they wouldn't easily verify whether their traffic routing is setup as desired. It's important for them to verify the setup to ensure that their data analysis operations are secure and comply with their company policies.\n\nBy using this AWS Control, the IT team can easily check if EnhancedVpcRouting is enabled or not, ensuring the security of their data transfers. This helps the company in maintaining their data privacy and security standards, avoiding any potential data leakages or breaches.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_redshift_8",
    "Title": "8 Amazon Redshift clusters should not use the default Admin username",
    "Description": "This control checks whether a Amazon Redshift cluster has changed the admin username from its default value. This control will fail if the admin username for a Redshift cluster is set to awsuser.",
    "QueryID": "aws_redshift_cluster_no_default_admin_name",
    "DocumentURI": "policies/aws_foundational_security_redshift_8.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_configuration"
      ],
      "foundational_security_item_id": [
        "redshift_8"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Redshift"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can have financial, operational, and reputational implications:\n\n1. **Security Breaches**: If the default admin username is not changed, there's a potential security risk as cyber attackers may easily guess the username and try to hack into the system. This can lead to data breaches, data loss, or unwanted alterations in the database. The cost of such occurrences is massive, running into millions of dollars including the cost to fix the breach, loss of business due to service disruption, and potential fines due to non-compliance with data protection regulations.\n\n2. **Regulatory Fines**: Non-compliance with security best practices can lead to punitive actions from regulatory bodies. Companies may be fined for not adhering to data protection laws, which advocate for robust security measures like changing default credentials.\n\n3. **Reputation Damage**: A security breach tied to non-compliance can significantly harm a company's public image, leading to loss of customer trust and potential customer churn. This can have short-term and long-term impacts on the company's revenues.\n\n4. **Remediation Costs**: If the control fails, resources will need to be spent to remediate the issue. This may include hours spent by IT/administrative staff to change the username across several Redshift clusters, or employing additional security measures.\n\nTo mitigate these costs, it's recommended to always change default admin usernames and continually monitor security controls to ensure robust data protection."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA company XYZ Ltd. is using AWS Redshift for its data warehousing needs. An auditor, while checking for security best practices, executed this control and found that several Redshift clusters had their admin username set as 'awsuser', the default value. This was a security concern as it makes the system more vulnerable to potential hackers who usually try the default names first.\n\nUpon receiving the audit report, the company XYZ Ltd. changed all the default usernames to complex and unique ones, thereby reducing the risk of potential security breaches. \n\nThis instance demonstrates the usefulness of the control in maintaining robust security by ensuring that the default usernames are promptly changed. Without this control, XYZ Ltd. would continue to have a significant security loophole, which could potentially lead to unauthorized access, data breaches, and ultimately loss of business."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_redshift_9",
    "Title": "9 Redshift clusters should not use the default database name",
    "Description": "This control checks whether an Amazon Redshift cluster has changed the database name from its default value. The control will fail if the database name for a Redshift cluster is set to dev.",
    "QueryID": "aws_redshift_cluster_no_default_database_name",
    "DocumentURI": "policies/aws_foundational_security_redshift_9.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_configuration"
      ],
      "foundational_security_item_id": [
        "redshift_9"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Redshift"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the stated AWS control indicates poor security practice and could lead to severe consequences. Operating with the default database name (in this case 'dev') makes the system more susceptible to numerous potential threats.\n\n1. **Potential Security Threats**: Keeping the default name basically indicates a straightforward case for hackers. They have prior knowledge of such default setups and can easily initiate attacks if their intrusion attempts are successful.\n2. **Data Breaches**: Default database names can lead to possible data breaches that could cost a company not only financially but also result in reputational damages, legal penalties, and the loss of customer trust.\n3. **Non-compliance to Regulations**: Moreover, regulations like GDPR, PCI DSS, etc., require organizations to adhere to strict data security practices. Non-compliance to these can lead to hefty fines and sanctions.\n4. **Additional Unmapped Costs**: Non-compliance could force organizations to incur costs for Incident response, forensic investigation, system recovery, and re-establishing security measures.\n\nIn conclusion, non-compliance to an AWS control that checks whether an Amazon Redshift cluster has changed the database name from its default value typifies a violation of best practices associated with database security management and can result in substantial costs and risks."
      ],
      "x-kaytu-usefulness-example": [
        "The example instance is as such:\n\nA data analytics company utilizes Amazon Redshift for its data warehousing requirements. During the setup, they decided to go with the default database name \"dev\". Unknowingly, they've exposed the database to potential security vulnerabilities, as attackers often target common default configurations.\n\nLater, the company decided to implement AWS Config rules for enhanced security monitoring. One of the AWS controls they used checks whether an Amazon Redshift cluster has changed the database name from its default value. This control caught that they were still using \"dev\" as the database name and failed the check.\n\nAs a result, the company was alerted about this security concern. They quickly changed the database name in their Redshift cluster to a more unique and secure name, greatly reducing their exposure to potential cyber-attacks."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_redshift_10",
    "Title": "10 Redshift clusters should be encrypted at rest",
    "Description": "This control checks if Amazon Redshift clusters are encrypted at rest. The control fails if a Redshift cluster isn't encrypted at rest or if the encryption key is different from the provided key in the rule parameter.",
    "QueryID": "aws_redshift_cluster_kms_enabled",
    "DocumentURI": "policies/aws_foundational_security_redshift_10.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "redshift_10"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Redshift"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control can result in several potential costs:\n\n1. **Data Breaches**: Non-encrypted Redshift clusters expose your data to potential breaches. In the event of a data breach, costs can rise significantly due to forensic investigations, remediation efforts, recovery operations, and any potential lawsuits or fines associated with the breach.\n\n2. **Regulatory Fines**: Depending on the nature of the data stored in Redshift clusters, organizations might be in violation of various data security regulations such as GDPR, CCPA, or HIPAA. If non-compliance is discovered during audits or in the event of a data breach, they might be subject to heavy fines.\n\n3. **Loss of Customer Trust**: If customer data is compromised due to non-encryption, this can significantly impact a company's reputation. The resulting loss of customer trust can have both immediate and long-term impacts on sales and revenues.\n\n4. **Competitive Disadvantage**: Non-compliance might mean that business competitive information could be exposed. This can lead to a competitive disadvantage in the business's market.\n\n5. **Operational Disruptions**: In the aftermath of a data breach, there could be significant operational disruptions as resources are diverted to deal with the fallout of the breach. Such disruptions could increase operating costs and reduce efficiency.\n\nTherefore, ensuring Amazon Redshift clusters are encrypted at rest and the correct encryption key is used is essential for data security, regulatory compliance, maintaining customer trust, and operational stability."
      ],
      "x-kaytu-usefulness-example": [
        "This control is especially useful for organizations that store sensitive data using Amazon Redshift. For example, an e-commerce company might use Redshift to store and analyze transaction data, customer information, inventory records, and other proprietary data. \n\n```\n- Scenario: The company needs to ensure all information is secured and meets compliance requirements. Thus, they have established a rule that all Redshift clusters must be encrypted at rest. \n\n- Use of AWS Control: The specific AWS Control checks for encryption in Redshift clusters helps ensure the e-commerce company meets its rule. If a Redshift cluster isn't encrypted at rest or if the encryption key is different from the company's chosen key, the control will fail, alerting the IT team to the issue. \n\n- Result: By securing data at rest, the company protects sensitive information from unauthorized access or data breaches. This helps it maintain customer trust, protect its reputation, and avoid potential legal penalties for non-compliance with data protection regulations.\n```\n\nThus, the AWS Control for checking Amazon Redshift clusters' encryption status is very useful in maintaining the company's data security standards and regulatory compliance requirements."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_codebuild_1",
    "Title": "1 CodeBuild GitHub or Bitbucket source repository URLs should use OAuth",
    "Description": "Authentication credentials should never be stored or transmitted in clear text or appear in the repository URL. Instead of personal access tokens or user name and password, you should use OAuth to grant authorization for accessing GitHub or Bitbucket repositories. Using personal access tokens or a user name and password could expose your credentials to unintended data exposure and unauthorized access.",
    "QueryID": "aws_codebuild_project_source_repo_oauth_configured",
    "DocumentURI": "policies/aws_foundational_security_codebuild_1.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_development"
      ],
      "foundational_security_item_id": [
        "codebuild_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CodeBuild"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can be extremely high and can lead to several serious consequences. Here are a few potential costs:\n\n1. **Data Breaches:**\n   Failing to correctly store or transmit authentication credentials can lead to data breaches, resulting in exposure of sensitive personal or business data. This can lead to financial losses, loss of customer trust, and regulatory fines.\n\n2. **Unauthorised Access and Fraud:**\n   When personal access tokens or passwords are exposed, it leads to unauthorized access to systems and data. An attacker can use these credentials to carry out fraudulent activities, steal data, manipulate systems and disrupt business operations.\n\n3. **Regulatory Fines:**\n   Non-compliance with regulations that mandate levels of data security and privacy protection, such as GDPR, HIPAA etc. can lead to significant legal penalties and sanctions.\n\n4. **Reputation Damage:**\n   A data breach can have long-lasting effects on a company's reputation. Customers may lose trust and take their business elsewhere. It could also discourage potential future customers and business partners.\n\n5. **Loss of Intellectual Property:**\n   If GitHub or Bitbucket repositories, containing business-critical code and intellectual property, are accessed without authorization, there could be the loss of proprietary technology or other classified information.\n\n6. **Costs of Remediation:**\n   After a data breach, considerable resources must be devoted to investigating the breach, rectifying the issue, and implementing subsequent monitoring to prevent future issues. The cost of these measures can be significant.\n\nTo sum up, it is crucial to adhere to AWS' control measures, like using OAuth for authorization, to avoid all these potential costs."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, consider a company named XTech which uses Bitbucket for version control in their software development operations. XTech has rules set up for data security, and it's mandatory for all employees to follow these rules. \n\nOne of their developers, John, is working on a new feature. As per XTech's policy, John needs to create a new branch in Bitbucket so that he can work on this feature without impacting the main codebase. When John tries to create the new branch, Bitbucket requires him to authorize his request.\n\nJohn could easily use personal access tokens or his username and password for this authorization. However, that could potentially expose his credentials to people with malicious intentions. If anyone gets access to John's credentials, they could make unauthorized changes in the codebase or even delete all the code.\n\nTherefore, XTech instructs all its employees to use OAuth for such authorizations. With OAuth, John can grant specific permissions (for example, just to create a new branch) to Bitbucket without exposing his credentials. This is a significant use of the AWS control as it ensures John's credentials aren't compromised and the firm's data security rules are adhered to."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_codebuild_2",
    "Title": "2 CodeBuild project environment variables should not contain clear text credentials",
    "Description": "This control checks whether the project contains the environment variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. Authentication credentials AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY should never be stored in clear text, as this could lead to unintended data exposure and unauthorized access.",
    "QueryID": "aws_codebuild_project_plaintext_env_variables_no_sensitive_aws_values",
    "DocumentURI": "policies/aws_foundational_security_codebuild_2.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_development"
      ],
      "foundational_security_item_id": [
        "codebuild_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CodeBuild"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can be quite high and profoundly damaging to a business. Non-compliance can lead to:\n\n1. **Data Breaches**: If these security keys are stored in clear text, they may be exploited by malicious entities. This can result in unauthorized access to the AWS services, suffering a data breach that not only threatens the business's data but potentially also the data of its customers.\n\n2. **Financial Loss**: Unauthorized usage of AWS services can lead to unexpected costs. For example, if an unauthorized entity uses the keys to initiate high-throughput or high-capacity services, costs can ramp up quite quickly. Repeated events can result in substantial financial damage.\n\n3. **Reputation Damage**: A data breach, whether publicized or not, can significantly harm the company's reputation, possibly even leading to a loss of customers and revenue.\n\n4. **Regulatory Fines and Sanctions**: For certain industries and regions, failure to protect these types of sensitive credentials can result in regulatory non-compliance, leading to fines and sanctions.\n\n5. **Loss of Intellectual Property**: Unauthorized access can also lead to the stealing of proprietary algorithms, business strategies, or any important documents, negatively impacting the business's competitiveness.\n\nTherefore, businesses should comply with this control as it can tremendously help in preventing any potential unauthorized access or data breach. The cost of non-compliance to this control multi-fold as it could lead to financial loss, reputation damage, and even potential regulatory repercussions."
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider a software development company that uses AWS services to manage its applications and store data. Their team of developers uses AWS credentials in the project development environment. One of the developers unknowingly commits code with embedded AWS credentials into a public GitHub repository. \n\nThis could potentially expose these crucial credentials to the public, allowing any unauthorized person to gain access to their AWS services. \n\nAWS Control steps in for such scenarios. It checks if the environment variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are present in the project. This is essentially a security check to ensure that AWS credentials are not accidentally left in plain text in the environment and hence prevent any security breach.\n\nUsing this control, the company can significantly minimize security risks associated with the negligent exposure of AWS credentials, thereby protecting its AWS resources from unauthorized access.\n\n```markdown\nExample:\n\n# AWS Control Check in Project Environment\n\n## Scenario:\n\nSoftware Development Company - XYZ Pvt Ltd.\n\nXYZ Pvt Ltd. uses AWS services extensively for application management and data storage. Their developers use AWS credentials within the project environment. \n\n## Problem:\n\nOne day, a developer inadvertently commits a piece of code with AWS credentials inserted into a public GitHub repository. \n\n## Solution:\n\nAWS Control is employed to scan for environment variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY in the project. The tool finds the plain text credentials left accidentally in the environment.\n\n## Conclusion:\n\nAWS Control successfully prevents the potential security breach and keeps XYZ Pvt Ltd.'s AWS resources secure.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_codebuild_3",
    "Title": "3 CodeBuild S3 logs should be encrypted",
    "Description": "This control checks if Amazon S3 logs for an AWS CodeBuild project are encrypted. The control fails if encryption is deactivated for S3 logs for a CodeBuild project.",
    "QueryID": "aws_codebuild_project_s3_logs_encryption_enabled",
    "DocumentURI": "policies/aws_foundational_security_codebuild_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "codebuild_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CodeBuild"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can be interpreted on multiple levels namely data security, compliance with laws and regulations, avoidance of fines and penalties, and maintenance of brand reputation. \n\nHere are the possible impacts:\n\n1. **Data Security**: AWS CodeBuild uses Amazon S3 logs to store and track the operations in your software build. If these logs are not encrypted, sensitive information such as system details, codebase access, and operational mechanisms may be exposed to unauthorized entities. This could lead to potential data breaches or misuse of critical information.\n\n\n2. **Non-Compliance Penalties**: Companies are often subject to various domestic and international data protection laws and regulations, which require them to protect and maintain the confidentiality and integrity of their data. Breaking these laws due to non-compliance could lead to hefty penalties and fines. For instance, under the GDPR, non-compliance can lead to fines of up to €20 million, or 4% of annual global turnover, whichever is higher.\n\n\n3. **Brand Reputation**: Maintaining data security is crucial for preserving the trust and confidence of customers and partners. A breach could lead to significant reputational damage, which might have long-term effects on the business including loss of customers and revenue.\n\n\n4. **Financial Impact**: In the event of a data breach, the financial impact can be significant. Companies can incur costs for identifying and fixing the breach, legal fees, fines, as well as costs associated with the loss of business and customer trust.\n\n\nNon-compliance with this control could effectively lead to a range of negative impacts and should be avoided by ensuring that the S3 logs for all AWS CodeBuild projects are encrypted. \n\nIt is recommended to use AWS Key Management Service to set up and manage your data encryption configuration. Keep in mind that encryption introduces an additional cost, but it is generally considered a worthwhile investment compared to the potentially significant costs of non-compliance."
      ],
      "x-kaytu-usefulness-example": [
        "```\nFor instance, a company using AWS services is engaged in a project involving sensitive data, which is subject to stringent compliance regulations. As such, the sensitive nature of the project requires careful monitoring and recording of activity to identify any anomalies or potential breaches. \n\nBy using AWS CodeBuild for continuous integration and deployment, the company creates an AWS CodeBuild project to automate the deployment processes. They also wish to ensure every action is logged and these logs are stored securely in an Amazon S3 bucket.\n\nComputing security best practices recommend that all logs should be encrypted, both in transit and at rest. Hence the need for the \"AWS CodeBuild Project S3 Logs Encrypted\" control. With this control, they can automatically verify if the S3 logs for their CodeBuild project are encrypted. \n\nIf the logs are not encrypted, the control will fail, sending an alert to your team. They can then take corrective actions to rectify the issue, thus ensuring secure operations and compliance with relevant regulations. Without the use of this control, potential compliance and security breaches due to unencrypted logs would go unnoticed, risking sensitive data.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_codebuild_4",
    "Title": "4 CodeBuild project environments should have a logging configuration",
    "Description": "This control checks whether a CodeBuild project environment has at least one log option, either to S3 or CloudWatch logs enabled. This control fails if a CodeBuild project environment does not have at least one log option enabled.",
    "QueryID": "aws_codebuild_project_logging_enabled",
    "DocumentURI": "policies/aws_foundational_security_codebuild_4.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "codebuild_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CodeBuild"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control could be significant, especially when considered from different perspectives:\n\n1. **Operational Cost:** If a CodeBuild project environment does not have at least one log option enabled, it becomes extremely difficult to troubleshoot issues or optimize performance. This could lead to an increased number of production issues, slowed development cycles, and overall loss of operational efficiency.\n\n2. **Financial Cost:** Without logs, identifying the exact cause of any application failure or performance issues might take significantly longer, leading to increased downtime. The longer the system is down or not performing optimally, the more it can cost an organization in terms of productivity, revenue loss or customer dissatisfaction.\n\n3. **Security and Compliance Cost:** Logging is an important aspect of security and compliance. Logs are often used for identifying unauthorized access attempts, tracking user activity and documenting changes made to the environment. If a CodeBuild project environment does not have log options enabled, an organization may fail to meet certain regulatory requirements, which could result in fines or other penalties.\n\n4. **Reputation Cost:** The inability to quickly resolve issues due to lack of logging can lead to service disruptions. Extended or frequent downtime can seriously damage a company's reputation, losing customer trust and potentially leading to loss of business.\n\nIn summary, enabling at least one log option in a CodeBuild project environment is critical for operational efficiency, security, compliance requirements, and maintaining the trust of customers and stakeholders."
      ],
      "x-kaytu-usefulness-example": [
        "For example, a software development company is using AWS CodeBuild for their continuous integration and deployment processes. The company sets up various CodeBuild projects for their different applications and microservices.\n\nThe developers require access to the console logs of these build projects for debugging purposes. The logs are especially useful when a build or deployment fails. Consequently, the Impose Monitoring Log control verifies whether the CodeBuild projects have at least one log option enabled, either to AWS S3 or CloudWatch Logs. It ensures that the developers can troubleshoot failed builds and deployments by analyzing the logs.\n\nMoreover, these logs are also beneficial for audit and governance purposes. The company's compliance team can review the logs to identify suspicious activities in the CodeBuild projects. Various key information like who initiated the build, when it was started, and how long it took to complete are captured in these logs.\n\nWith the help of this AWS Control, they can ensure that their CodeBuild projects are always properly configured to enable logging, and hence, improve build operations and maintain compliance standards. If a project is found without the logging option enabled, the control fails, informing the team to rectify the issue immediately."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_codebuild_5",
    "Title": "5 CodeBuild project environments should not have privileged mode enabled",
    "Description": "This control checks if an AWS CodeBuild project environment has privileged mode enabled. This control fails when an AWS CodeBuild project environment has privileged mode enabled.",
    "QueryID": "aws_codebuild_project_environment_privileged_mode_disabled",
    "DocumentURI": "policies/aws_foundational_security_codebuild_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "codebuild_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CodeBuild"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can range from potential security vulnerabilities to regulatory fines:\n\n1. **Security Vulnerabilities:** If a CodeBuild project environment has privileged mode enabled, it allows the process inside the Docker container of that environment to have access to all the devices on the host instance. This can lead to security vulnerabilities as it exposes the host instance to potential breaches. Attackers can exploit these vulnerabilities to perform malicious activities like data theft or sabotage.\n\n2. **Regulatory Fines:** If your organization is under certain security standards like ISO 27001, PCI DSS, or HIPAA, non-compliance with access controls or security best practices could lead to hefty fines. Failing this control could indicate non-compliance with the principle of least privilege, a core requirement in many regulations.\n\n3. **Loss of Customer Trust:** In case of any security breaches owing to the misuse of the privileged mode in CodeBuild, the news may impact customer trust and brand reliability.\n\n4. **Operational Risks:** Enabling privileged mode may lead to unintended operational risks where a process may affect system-wide settings or data, leading to potential system instability, data loss, or corruption.\n\nIt's important to understand that AWS controls like this have been put in place to impose a certain discipline that ensures the security of applications, environments, and data hosted in the AWS environment. Non-compliance to these could cost both financially and non-financially. \n\nTherefore, it's recommended to check AWS CodeBuild project environments regularly for the privileged mode and ensure that it is disabled if not required for operation."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nJohn is a DevOps engineer, responsible for regulating and securing the deployment procedures within his organization. He sets up code deployment pipelines using AWS CodeBuild to automate the build and deployment process. \n\nSometimes, his team needs to run Docker commands within the build environment. For this, it's required to have privileged access to run the Docker daemon. However, providing privileged access can lead to several security risks as it can allow potential attackers to gain root access to the machine or execute malicious commands.\n\nTo ensure the security of the build environments in AWS, he sets up a control using AWS Config that checks whether privileged mode is enabled for any of the CodeBuild project environments. If enabled, John gets an alert and the build project will fail. This system helps in maintaining a high level of security by ensuring no project has excess privileges which could be exploited.\n\n```markdown\nAWS Control: Check Privileged Mode in AWS CodeBuild Project Environment\n\n[AWS CodeBuild Project](https://console.aws.amazon.com/codesuite/) (“ProjectName”) has its environment running in privileged mode (*FAILURE*). Privileged mode is not recommended for AWS CodeBuild project environment due to potential security risks.\n \nAction: \nPlease disable privileged mode in ProjectName’s environment settings. Consult the AWS CodeBuild Documentation on how to disable privileged mode.\n```\nHaving this control in place helps John to enforce the best security practices within his team, making sure that the codebase remains secure throughout the deployment process."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_sagemaker_1",
    "Title": "1 SageMaker notebook instances should not have direct internet access",
    "Description": "This control checks whether direct internet access is disabled for an SageMaker notebook instance. To do this, it checks whether the DirectInternetAccess field is disabled for the notebook instance. If you configure your SageMaker instance without a VPC, then by default direct internet access is enabled on your instance. You should configure your instance with a VPC and change the default setting to Disable — Access the internet through a VPC.",
    "QueryID": "aws_sagemaker_notebook_instance_direct_internet_access_disabled",
    "DocumentURI": "policies/aws_foundational_security_sagemaker_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "sagemaker_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SageMaker"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can result in several costs:\n\n1. **Security risks:** Direct internet access to SageMaker notebook instances can lead to potential security vulnerabilities. If unauthorized individuals gain access to your instance, they could potentially access, modify, or delete sensitive information, leading to information breaches. This would not only lead to financial loss but could also damage the organization's reputation.\n\n2. **Regulatory Breaches:** Depending upon the jurisdiction and the nature of the data being processed, non-compliance with security controls might breach data protection regulations like GDPR, CCPA, or HIPAA. Non-compliance penalties can be severe, ranging from monetary fines to business penalties such as license revocations.\n\n3. **Increased Maintenance:** Direct Internet access to SageMaker notebook instances can lead to increased maintenance efforts. The instance will be exposed to greater risk from internet-based threats such as DDoS attacks and malware, which could result in more frequent maintenance and downtime.\n\n4. **Loss of Trust:** Non-compliance with recommended control measures can erode trust amongst your users or clients. If your company fails to mitigate known risks, it sends a message that you're not serious about security, possibly driving clients to turn to competitors.\n\n5. **Increased Costs:** Lastly, financial costs may rise due to increased security breaches, loss of revenue associated with downtime, reputational damage, fines from regulatory bodies, loss of business, and the need for increased maintenance and troubleshooting. \n\nHence, disabling direct internet access for an AWS SageMaker notebook instance helps ensure higher data security, compliance with regulatory measures, reduced maintenance, and lower costs."
      ],
      "x-kaytu-usefulness-example": [
        "```markdown\nScenario: A software company is using Amazon SageMaker notebook instances for its data scientists to develop and run machine learning models. The company deals with a large amount of sensitive customer data and adheres to strict regulations and standards to maintain data privacy and security. \n\nIn such a case, the usefulness of this AWS control that checks whether direct internet access is disabled for a SageMaker notebook instance is demonstrated. The company can use this AWS control to ensure that all their SageMaker instances are configured without direct internet access. \n\nBy disabling direct internet access, potential threats and attacks from the internet are minimized. It also lessens the possibility of unauthorized access and data leakage. The company can therefore ensure a safer and controlled environment for their data scientists to work within whilst optimizing their work with machine learning models.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_sagemaker_2",
    "Title": "2 SageMaker notebook instances should be launched in a custom VPC",
    "Description": "This control checks if an Amazon SageMaker notebook instance is launched within a custom virtual private cloud (VPC). This control fails if a SageMaker notebook instance is not launched within a custom VPC or if it is launched in the SageMaker service VPC.",
    "QueryID": "aws_sagemaker_notebook_instance_in_vpc",
    "DocumentURI": "policies/aws_foundational_security_sagemaker_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resources_within_vpc"
      ],
      "foundational_security_item_id": [
        "sagemaker_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SageMaker"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "## Cost of Non-compliance to AWS Control\n\nNon-compliance to the control specifying that an Amazon SageMaker notebook instance is launched within a custom VPC can potentially result in multiple costs, risks, and impacts:\n\n* __Security Risks__: Launching an instance outside a custom VPC can expose the instance to potential security threats. This opens up the possibility of data breaches and unauthorized access to sensitive information, leading to significant potential damage.\n\n* __Data Compliance Violations__: Certain regulations and standards may require data to be stored in a certain way or require specific security measures. Non-compliance may mean running afoul of these regulations, which could result in investigations, fines, and reputational damage.\n\n* __Increased Costs__: Without the security mechanisms of a custom VPC, a business could face increased costs due to potential data breaches, data loss, or system downtimes.\n\n* __Operational Disruptions__: Any security issue arising from non-compliance could result in operational disruptions. This results in downtime and potential profit loss while repairs and security patches are implemented.\n\n* __Network Control Lack__: Not using a custom VPC takes away the ability to effectively control network access, routing policies, etc. This could potentially lead to scenarios of network misconfigurations and lack of network optimization strategies.\n\nIn conclusion, non-compliance to this AWS control related to the use of custom VPC for SageMaker notebook instances could result in significant security, financial, operational, and reputational costs. It is critical for businesses to follow such controls to effectively manage these risks."
      ],
      "x-kaytu-usefulness-example": [
        "AWS Control ensures a high-level security measure for an application using SageMaker. For example, a fintech company uses SageMaker for machine learning capabilities to detect fraudulent transactions. Data scientists need to access a large volume of sensitive information, including transaction data and customer information, through SageMaker notebook instances. \n\nWhen a SageMaker notebook instance runs within a custom VPC, it will have access only to the resources inside the VPC and it can’t directly interact with the rest of AWS resources. This provides a controlled environment offering better security with no direct exposure to the public internet which limits data exposure and potential security vulnerabilities. \n\nAdditionally, traffic within a VPC is not externally routable and thus adds an extra layer of protection against attacks such as man-in-the-middle and IP spoofing.\n\nHere is a sample instance in markup format:\n\n```\nResource: aws_sagemaker_notebook_instance\n  Instance: my_sagemaker_notebook\n  Checks:\n  - '!aws:sagemaker:in-vpc'\n\nVPC_ID = 'custom_vpc_id'\naws_vpc = aws_vpc(vpc_id=VPC_ID)\naws_sagemaker_notebook = aws_sagemaker_notebook_instance.instance('my_sagemaker_notebook')\n\ncheck(\n  aws_sagemaker_notebook.in_vpc(aws_vpc), \n  'SageMaker notebook instance must be launched within custom VPC.'\n)\n```\n\nThis script checks if the SageMaker notebook instance \"my_sagemaker_notebook\" is running in the custom VPC with the id 'custom_vpc_id'. If it's not, it'll return the alert 'SageMaker notebook instance must be launched within custom VPC.'."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_sagemaker_3",
    "Title": "3 Users should not have root access to SageMaker notebook instances",
    "Description": "This control checks whether root access is turned on for an Amazon SageMaker notebook instance. The control fails if root access is turned on for a SageMaker notebook instance.",
    "QueryID": "aws_sagemaker_notebook_instance_root_access_disabled",
    "DocumentURI": "policies/aws_foundational_security_sagemaker_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "root_user_access_restrictions"
      ],
      "foundational_security_item_id": [
        "sagemaker_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SageMaker"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this control can have considerable costs for an organisation, both financially and reputationally. These include:\n\n1. **Security Threats**: Root access on an Amazon SageMaker notebook instance allows a user to possess full control, which includes the capacity to modify and delete any file on the system. If a malicious threat actor were to gain access to these privileges, they could cause significant damage, ranging from altering data, stealing valuable information, to corrupting or halting system operations. \n\n2. **Financial Loss**: Information breaches can lead to direct financial loss. These costs could stem from litigation, regulatory fines, customer refunds, or costs associated with incident response and system recovery. \n\n3. **Loss of Trust®**: If clients become aware of a security breach, they may lose trust in the organization's ability to safeguard their data. This erosion of trust can cause reduced usage, or in extreme cases, customer attrition, leading to loss of revenue.\n\n4. **Regulatory Non-Compliance**: Non-compliance with standards like GDPR, CCPA, HIPAA, etc., which stipulate adequate security safeguards for handling sensitive data, can lead to hefty fines or legal action.\n\n5. **Downtime**: If a compromise occurs, system downtime may be required for forensic investigation and remediation. This downtime can lead to revenue loss and operational inefficiency.  \n\nConsequently, ensuring compliance with this control is crucial for maintaining the security and integrity of the Amazon SageMaker notebook instances and ensuring the continuity of business operations."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, a company uses Amazon SageMaker notebook instances for data scientists to develop and test machine learning models. Let's say the company is very strict with their security measures and does not want any user to have root access to these instances. \n\nIn such a case, the AWS control plays a crucial role. It constantly checks if root access is turned on for any SageMaker notebook instance. If it is, the control fails and the security team gets notified of this. They can then take necessary action to revoke root access, thereby maintaining a high level of security within company's machine learning processes. \n\nThis helps maintain good security practices and reduces the risk of unauthorized access or changes to the machine learning models or data."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_guardduty_1",
    "Title": "1 GuardDuty should be enabled",
    "Description": "This control checks whether Amazon GuardDuty is enabled in your GuardDuty account and Region. It is highly recommended that you enable GuardDuty in all supported AWS Regions. Doing so allows GuardDuty to generate findings about unauthorized or unusual activity, even in Regions that you do not actively use. This also allows GuardDuty to monitor CloudTrail events for global AWS services such as IAM.",
    "QueryID": "aws_guardduty_enabled",
    "DocumentURI": "policies/aws_foundational_security_guardduty_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "detection_services"
      ],
      "foundational_security_item_id": [
        "guardduty_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/GuardDuty"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control that checks if Amazon GuardDuty is enabled across all supported regions can potentially result in the following costs:\n\n1. **Security Costs:** By not enabling Amazon GuardDuty, you expose your account to threats and risks as you lose out on a continuous security monitoring system to detect irregular behavior and potential threats. This could result in unauthorized access or a possible data breach which could tarnish the company's image and also lead to penalties under legislation like the GDPR and other privacy laws.\n\n2. **Monetary Costs:** The consequences of a security breach or unauthorized access to your system can be financially detrimental. It could lead to data theft or data corruption that could cost a lot to fix or restore. Furthermore, there could be large fines to be paid for failing to adhere to legal requirements.\n\n3. **Operation Costs:** Dealing with a security event can take a lot of time and resources, from identifying and isolating the problem, to remediation and recovery. This time and resources could have been better spent on actual business operations and growth activities.\n\n4. **Compliance Costs:** Certain industries and regulated data types strictly require the level of security provided by GuardDuty. Not using it could result in non-compliance and lead to steep regulatory fines and penalties, such as those imposed by HIPAA, PCI-DSS, and GDPR. \n\n5. **Reputation Costs:** Companies that suffer breaches expose their customers to risk, and lose trust in the marketplace. This can have long-term effects on business viability. \n\nBy enabling Amazon GuardDuty, companies can keep track of unusual activity and implement immediate responses to potential threats, thereby pre-emptively mitigating these risks and costs."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, a company has several AWS environments deployed across multiple regions. Although their main operations use only a few regions, they have some small-scale applications deployed in other regions for testing or customer support purposes. As such, they don't actively monitor these regions and unfortunately, a disgruntled employee begins to misuse the resource in one of these less monitored regions.\n\nIf Amazon GuardDuty is not enabled in all regions, the company may not quickly identify this unusual activity. However, should they enable GuardDuty across all AWS supported regions, they will be alerted as soon as GuardDuty identifies any unauthorized or unusual activity, thus allowing them to address the issue immediately. \n\nAlso, with GuardDuty monitoring CloudTrail events for global AWS services, the company can track any undesired or malicious changes in IAM policies, which can then be immediately rectified for maintaining the secure operation of their AWS resources.\n\nIn markup format, this example might look like this:\n\n```\nAs a company, we have several AWS environments deployed across various regions. \nMain operations use only a few regions, while others are deploying smaller-scale applications for testing or customer-related support purposes. \n\nIn the event Amazon GuardDuty is not enabled in all regions, it may culminate with us missing out on identifying unusual activity happening in any of these less monitored regions. \n\nFor instance, a disgruntled employee started to misuse a resource in one of these less active regions. If GuardDuty was enabled across all AWS supported regions, we would have been alerted as soon as it identifies any unauthorized or unusual activity. \n\nThis service also allows GuardDuty to track CloudTrail events for global AWS services like IAM. This is highly beneficial in the quick identification and rectification of undesirable or malicious activities regarding our AWS resources.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_opensearch_1",
    "Title": "1 OpenSearch domains should have encryption at rest enabled",
    "Description": "This control checks whether OpenSearch domains have encryption-at-rest configuration enabled. The check fails if encryption at rest is not enabled.",
    "QueryID": "aws_opensearch_domain_encryption_at_rest_enabled",
    "DocumentURI": "policies/aws_foundational_security_opensearch_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "opensearch_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/OpenSearch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "## Cost of Non-compliance to AWS Control for OpenSearch Domains without Encryption-at-Rest Enabled\n\nNon-compliance to this AWS Control, specifically for OpenSearch domains that do not have the encryption-at-rest configuration enabled, can lead to several significant costs, including monetary expenses, reputational damage, and potential legal consequences.\n\n1. **Data Breach and Information Theft:** Without encryption-at-rest, sensitive data such as personally identifiable information (PII), financial details, and proprietary information can be intercepted, read and exploited by attackers. This unauthorized data accessibility can lead to considerable financial losses and a breach of customer trust.\n\n2. **Non-compliance Penalties:** Organizations not complying with industry regulations for data security (like GDPR, HIPAA, or PCI DSS) may face severe fines and penalties. For instance, under GDPR, non-compliance can lead to fines of up to 20 million euros, or 4% of annual global revenue, whichever is higher.\n\n3. **Reputation damage:** Data infringement incidents can cause severe damage to a company's reputation, affecting customer trust and resulting in potential loss of business.\n\n4. **Forensic and Recovery Costs:** After a security incident, organizations may require professional forensic services to identify and rectify the cause of the breach. The recovery cost, which includes restoring the data and rectifying the security flaw, can also be significant.\n\n5. **Legal Issues:** If sensitive data is compromised, there may be potential legal repercussions, especially if it can be proven that the firm didn't take the necessary data protection measures. \n\nIn conclusion, ensuring compliance with this AWS control by enabling encryption-at-rest for OpenSearch domains is essential in ensuring data security and avoiding the potential costs of non-compliance."
      ],
      "x-kaytu-usefulness-example": [
        "```markdown\nExample Instance:\nA pharmaceutical company used this AWS Control to ensure the protection of its highly sensitive data. The company stored enormous volumes of proprietary research data, patient data etc. in their Amazon OpenSearch domains (formerly known as Amazon Elasticsearch Service).\n\nAmazon OpenSearch Service is a fully managed service that makes it easy to deploy, operate, and scale OpenSearch clusters in the AWS Cloud. OpenSearch is a search and analytics engine derived from Elasticsearch. \n\nBecause they deal with sensitive information, they needed utmost certainty that data-at-rest will remain confidential and are not susceptible to threats. \n\nBy enabling encryption at rest, this AWS Control offered an extra layer of data protection by preventing unauthorized users from accessing raw data, hence reducing the possibility of data breaches. \n\nThus, this AWS Control was an essential part of their data security strategy, ensuring that stored data remained encrypted and safe from potential security threats.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_opensearch_2",
    "Title": "2 OpenSearch domains should be in a VPC",
    "Description": "This control checks whether OpenSearch domains are in a VPC. It does not evaluate the VPC subnet routing configuration to determine public access.",
    "QueryID": "aws_opensearch_domain_in_vpc",
    "DocumentURI": "policies/aws_foundational_security_opensearch_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resources_within_vpc"
      ],
      "foundational_security_item_id": [
        "opensearch_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/OpenSearch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control could lead to the following potential costs:\n\n1. **Security risks** - If OpenSearch domains are not in a VPC, they could be publicly accessible, exposing sensitive data to potential malicious online activities such as cyber-attacks or data breaches. This could lead to large costs associated with damage control, recovery activities, legal fees, regulatory fines, and potential lawsuits from affected parties.\n\n2. **Regulatory non-compliance** - Particularly for organizations working with sensitive user data, it's necessary to comply with specific regulations such as GDPR, HIPAA, etc. Non-compliance to these regulations could lead to large fines, penalties, and damage to the organization's reputation.\n\n3. **Potential data loss** - Without the added layer of security that comes with running in a VPC, there's an increased risk of important data being lost or corrupted. The cost to recover or remake this data could be significant.\n\n4. **Increased maintenance costs** - Without using a VPC, organizations might need to spend more on third-party security tools or invest more resources in managing the security of the OpenSearch domains manually.\n\n5. **Business continuity** - In the event of a security incident or data loss, business continuity could be threatened. This can lead to financial losses, especially if it affects critical operations or services.\n\n6. **Trust and reputation damage** - If a breach or data loss occurs due to non compliance of this control, it could seriously damage the reputation of the business. Rebuilding consumer trust and business reputation can be costly and time consuming."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA medium sized online retail organization is using AWS for their e-commerce operations. They're leveraging OpenSearch domains to effectively manage, search and analyze large volumes of data in real-time which is critical for their day-to-day operations. However, due to the sensitive nature of their data, they have a strict policy of operating their services within their own Virtual Private Cloud (VPC) to ensure enhanced security. \n\nThe auditor of this organization implements the AWS Control to automatically check if all of their OpenSearch domains are indeed within their VPC. This automates a crucial part of their audit process, saves a significant amount of time and helps ensure continued compliance with the organization's security policies.\n\n```\n{\n  \"Id\": \"OpenSearchVPC\",\n  \"Title\": \"Check if OpenSearch domains are in a VPC\",\n  \"Description\": \"This Control checks if all OpenSearch Service domains are in a chosen VPC.\",\n  \"ResourceType\": \"AWS::OpenSearchService::Domain\",\n  \"PolicyStatement\": [\n    {\n      \"Id\": \"OpenSearchServiceDomainInVPC\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Action\": \"opensearch:DescribeElasticsearchDomain\",\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"aws:RequestedRegion\": \"us-west-2\",\n          \"aws:sourceVpc\": \"vpc-xxxxxx\"\n        }\n      }\n    }\n  ]\n}\n```\n\nIn this case, with the above markup, the control would check if the OpenSearch domains are within the specific VPC (vpc-xxxxxx) in the US-West-2 region, thereby streamlining operations and ensuring that security best practices are being followed."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_opensearch_3",
    "Title": "3 OpenSearch domains should encrypt data sent between nodes",
    "Description": "This control checks whether OpenSearch domains have node-to-node encryption enabled. This control fails if node-to-node encryption is disabled on the domain.",
    "QueryID": "aws_opensearch_domain_node_to_node_encryption_enabled",
    "DocumentURI": "policies/aws_foundational_security_opensearch_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transit"
      ],
      "foundational_security_item_id": [
        "opensearch_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/OpenSearch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this particular AWS control can have several cost implications:\n\n#### Security Risks\n\nDisabling node-to-node encryption exposes an AWS OpenSearch domain to potential security threats. This could lead to malicious hackers or internal employees intercepting the data, leading to sensitive data breaches. \n\n#### Financial Losses\n\nIn the event of a data breach, organizations may incur substantial financial losses. This could be in the form of fines and lawsuits from affected parties, or monetary losses from disrupted business operations or loss of business due to reputational damage. \n\n#### Regulatory Penalties\n\nMost industry sectors and regions have specific regulations for data protection. Non-compliance could result in regulatory penalties, such as fines, sanctions or even revoking of the organization's permission to operate.\n\n#### Loss of Trust \n\nIf customers find out that an organization does not comply with security practices such as encryption, they can lose trust in the organization’s ability to keep their data safe, leading to loss of business.\n\n#### Remedial Costs\n\nThe organization will also have to spend on remedial measures such as identifying and eliminating the security vulnerability, implementing stronger security protocols, and possibly compensation for any data loss. \n\nOverall, non-compliance to this AWS control can lead to severe consequences and should be avoided."
      ],
      "x-kaytu-usefulness-example": [
        "AWS OpenSearch Service (formerly known as Amazon Elasticsearch Service) is a fully-managed service which enables you to search, analyze, and visualize data in real-time.\n\nAn example instance of the usefulness of this AWS control can be seen in a large enterprise setup where multiple nodes are running in an OpenSearch domain for various operations such as high-performance searching, real-time analytics, logging, or monitoring.\n\nIn such use-cases, data is transferred and replicated between numerous nodes and it might contain sensitive information like customer records, financial data, or confidential research findings.\n\nEnabling node-to-node encryption in the OpenSearch domains ensures all the data transferred between nodes is encrypted and can not be intercepted or altered during the process. This significantly increases data security and compliance with various cybersecurity regulations.\n\nThus, this AWS control acts as a constant checkpoint and alerts if this essential data security feature is turned off, providing an opportunity for immediate corrective action.\n\nExample:\n```markdown\n## Scenario: Secure Transfer of Data in OpenSearch Domains\n\nImagine a large financial institution using AWS OpenSearch service for real-time analytics and reporting. Data includes confidential information about transactions, accounts, and investors.\n\nHere is how this AWS control ensures data integrity and security:\n\n1. **Proactive Encryption Check**: The control consistently checks whether node-to-node encryption is enabled. If found disabled, the control fails and alerts are sent to the concerned teams.\n\n2. **Secured Data Transfer**: With encryption enabled, all data transferred between OpenSearch nodes remains encrypted, ensuring protection against data breaches and interceptions.\n\n3. **Regulatory Compliance**: Ensuring encryption also helps the institution stay compliant with financial regulations that mandate strict data security protocols.\n\n4. **Action on Failure**: An alert on control failure enables quick response and corrective measures, thus reducing potential risk exposure.\n\nThe control thereby plays a crucial role in maintaining a secure and compliant data analysis environment within AWS OpenSearch service.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_opensearch_4",
    "Title": "4 OpenSearch domain error logging to CloudWatch Logs should be enabled",
    "Description": "This control checks whether OpenSearch domains are configured to send error logs to CloudWatch Logs. This control fails if error logging to CloudWatch is not enabled for a domain.",
    "QueryID": "aws_opensearch_domain_logs_to_cloudwatch",
    "DocumentURI": "policies/aws_foundational_security_opensearch_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "opensearch_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/OpenSearch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control could result in various costs for an organization:\n\n1. **Operational Troubleshooting**: Without logging, identifying, debugging, and resolving system errors becomes difficult. Time and resources would have to be spent to troubleshoot issues manually, which can incur operational costs.\n\n2. **Security Risks**: Not having logs might leave the system vulnerable as it can prevent detailed inspection in case of a security incident. If a security breach occurs, it may be costly to rectify the damages. Additionally, an organization can face penalties if it's unable to meet mandated compliance standards.\n\n3. **Potential loss of Application Availability**: Inability to promptly detect and resolve issues could result in prolonged system or application downtime. This could lead to revenue loss, especially if the applications running on these domains are critical to business operations.\n\n4. **Compliance Violations**: Many industry regulations and standards mandate that system logs must be kept for a certain duration and must be readily available. Non-compliance could result in hefty financial penalties and in some cases, legal ramifications.\n\nThese potential costs underscore the importance of following the AWS control that checks if OpenSearch domains are configured to send error logs to CloudWatch Logs. Compliance provides visibility into system and application activities, supports security monitoring and incident investigation, and aids in maintaining regulatory compliance."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, a business has established a search domain on AWS OpenSearch (formerly ElasticSearch) for handling and processing substantial amount of data originated from its ecommerce website. The OpenSearch cluster includes sensitive data, thus it's essential to vigilantly monitor its performance and malicious attempts to infringe data security.\n\nIn such a scenario, the 'OpenSearch domains configured to send error logs to CloudWatch Logs' control becomes particularly useful. When enabled, this control will send all error logs to AWS CloudWatch, facilitating real-time monitoring of the system. If any attempts are made to infrerr with sensitive data or if there are any system errors, the control will promptly alert the IT team by logging the errors, enabling faster response times for resolving security issues or system impairment.\n\n```markdown\n```\nExample:\n\n```yaml\nResources:\n  MyDomain:\n    Type: \"AWS::OpenSearch::Domain\"\n    Properties:\n      DomainName: \"my-domain\"\n      EngineVersion: \"OpenSearch_1.0\"\n      ClusterConfig:\n        InstanceType: \"m5.large.search\"\n      LogPublishingOptions:\n        ES_APPLICATION_LOGS:\n          CloudWatchLogsLogGroupArn: \n              !GetAtt 'CloudWatchLogGroup.Arn'          \n          Enabled: true\n          \n  CloudWatchLogGroup:\n    Type: 'AWS::Logs::LogGroup'\n    Properties:\n      LogGroupName: 'my-domain-logs'\n```\n\nIn the above example, the AWS CloudFormation script creates an OpenSearch domain 'my-domain' and a CloudWatch Logs log group 'my-domain-logs'. It further configures OpenSearch domain to send the application logs to the \"my-domain-logs\" log group in CloudWatch Logs.\n```\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_apigateway_1",
    "Title": "1 API Gateway REST and WebSocket API logging should be enabled",
    "Description": "This control checks whether all stages of an Amazon API Gateway REST or WebSocket API have logging enabled. The control fails if logging is not enabled for all methods of a stage or if loggingLevel is neither ERROR nor INFO.",
    "QueryID": "aws_apigateway_stage_logging_enabled",
    "DocumentURI": "policies/aws_foundational_security_apigateway_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "apigateway_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/APIGateway"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control potentially results in several costs:\n\n1. **Security Risk**: Without complete logs regarding API stage and method activity, you may leave your system open to undetected breaches or errors. Eventually, this could cause significant security incidents, leading to disrupted operations, and potentially huge repair costs, both in financial and reputational terms.\n\n2. **Difficulty in Problem Diagnosis**: Enabling logs allows easy troubleshooting when an issue arises. If logs are not enabled, it becomes considerably difficult (costing time, effort and money) to identify, diagnose, and resolve any problems or bugs.\n\n3. **Regulatory Issues**: Depending on the jurisdiction and the nature of the data being handled, there may be regulatory requirements for logging and monitoring systems’ activity. Not adhering to these regulations can result in heavy fines and penalties.\n\n4. **Scaling Operations**: Without proper logs, it can be a real challenge to understand system performance and behavior under load. This can inhibit effective decision making when trying to scale operations.\n\n5. **Customer Trust and Satisfaction**: In the worst-case scenario, if undetected issues lead to data breaches or service disruption, it can turn away customers and negatively impact the trust and satisfaction of existing ones. \n\nIn summary, non-compliance with this control may result in a combination of financial, reputational, regulatory, and operational costs."
      ],
      "x-kaytu-usefulness-example": [
        "For example, a company has deployed a live crucial application using AWS API Gateway for managing and controlling access to their microservices. Recently there have been issues reported with the application and the development team is having a difficult time identifying the root cause due to the lack of logging information.\n\nWith this AWS Control, the team can enable logging on all stages of their API Gateway. This would provide them with a log stream for both successful and unsuccessful API calls, indicating the source of the call, the stage of the request, timestamps, and more. \n\nMoreover, setting the `loggingLevel` to ERROR will record only error logs, making it easier for the team to identify and debug errors in the application. On the other hand, setting the `loggingLevel` to INFO will record both error logs and additional execution information which can be useful in analyzing general performance.\n\nThis way, the team will have access to detailed log data about all API calls, making it easier to troubleshoot issues and improve the overall quality of the application."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_opensearch_5",
    "Title": "5 OpenSearch domains should have audit logging enabled",
    "Description": "This control checks whether OpenSearch domains have audit logging enabled. This control fails if an OpenSearch domain does not have audit logging enabled.",
    "QueryID": "aws_opensearch_domain_audit_logging_enabled",
    "DocumentURI": "policies/aws_foundational_security_opensearch_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "opensearch_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/OpenSearch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the AWS control that checks for audit logging in OpenSearch domains could be broken down as follows:\n\n1. **Security Risk:** Without audit logs, you can't track what actions were taken, by whom and when. This lack of documentation could make it easier for unauthorized access or actions to go undetected.\n\n2. **Difficult Diagnostics:** If an issue occurs, audit logs are often used to help diagnose the problem. Without these logs, it may take longer to identify, understand, and correct the problem.\n\n3. **No Accountability:** Without logs, there is no record of actions, and thus no ability to hold individuals accountable for their actions within the system.\n\n4. **Regulation Compliance Failure**: If you're in an industry where specific laws or regulations apply (such as GDPR in the EU, HIPAA in the US) related to tracking and logging, you may be out of compliance which could result in warnings, fines or other legal consequences.\n\n5. **Potential Financial loss:** In case of a security breach, damage caused by unauthorized actions or delays in problem-solving due to lack of data could result in financial loss. \n\n6. **Reputation Damage:** A breach or inability to quickly solve problems due to lack of audit logs could lead to reputation damage, which could then impact business and sales.\n\nTherefore, enabling audit logging in OpenSearch domains is crucial for maintaining a secure system, ensuring fast and efficient diagnostics of issues, ensuring accountability, complying with regulations, and avoiding potential financial and reputational damage."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA company uses AWS OpenSearch Service for real-time analytics of their application logs and clickstream data. They enable audit logging to keep track of all changes such as configurations, descriptions of accessed documents, identity of the requester, and timestamp of the request. \n\nUnexpectedly, they notice a significant drop in their application performance. By checking the OpenSearch audit logs, they identify that numerous unexpected queries are being made, which is causing the performance issue. Because they've enabled Audit logging, they're able to trace back the origin of these queries and find that a particular user’s credentials have been used suspiciously. \n\nThe company quickly quarantines the suspected account, preventing further suspicious activities, and investigates the matter. This could have been a breach or an internal error, but the fact that audit logging was enabled on OpenSearch domains allowed them to spot the problem rapidly and react to it – potentially saving them a large amount of money and damage to their reputation. This clearly demonstrates the usefulness of this AWS control."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_apigateway_2",
    "Title": "2 API Gateway REST API stages should be configured to use SSL certificates for backend authentication",
    "Description": "This control checks whether Amazon API Gateway REST API stages have SSL certificates configured. Backend systems use these certificates to authenticate that incoming requests are from API Gateway.",
    "QueryID": "aws_apigateway_rest_api_stage_use_ssl_certificate",
    "DocumentURI": "policies/aws_foundational_security_apigateway_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "data_protection"
      ],
      "foundational_security_item_id": [
        "apigateway_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/APIGateway"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this control can lead to several dire consequences, causing operational, financial, and reputational damage to your organization. Here's a breakdown in markup format:\n\n1. **Security risks**: If SSL certificates aren't configured on Amazon API Gateway REST API stages, the backend systems would lose a layer of security in verifying that incoming requests are indeed from API Gateway. This could lead to man-in-the-middle attacks, where the attacker intercepts and possibly alters the communication between two parties who believe they are directly communicating with each other.\n\n2. **Data Breaches**: Without SSL certificate configured, data transmitted between API Gateway and the backend system is not encrypted. This leaves it susceptible to interception and exploitation by malicious entities, potentially leading to significant data breaches.\n\n3. **Non-compliance penalties**: If you're operating within a regulated industry (like healthcare or finance), failure to implement necessary security controls like SSL certificates can result in non-compliance with industry laws and regulations (like PCI DSS or HIPAA), leading to heavy fines and penalties.\n\n4. **Trust issues**: Non-compliance to this control can lead to erosion of trust among your clients and customers. If a data breach occurs due to non-compliance, it can damage your company's reputation and result in loss of business.\n\n5. **Financial Loss**: Between potential fines for non-compliance, costs associated with addressing the data breaches, and loss of business, the financial impact of non-compliance could be substantial.\n\n```markdown\n- Security Risk: Possible man-in-the-middle attacks due to lack of an authentication layer.\n- Data Breaches: Risk of data interception and exploitation leading to substantial breaches.\n- Non-compliance penalties: Heavy fines and penalties levied due to non-compliance with industry-specific regulations.\n- Trust Issues: Damage to company's reputation leading to potential loss of business due to trust issues among clients.\n- Financial Loss: Substantial financial losses due to fines, cost of fixing breaches, and loss of business.\n```\nThis underscores the importance of adhering to AWS controls, which are designed to ensure services conform with the highest standards of security."
      ],
      "x-kaytu-usefulness-example": [
        "```\nFor instance, you are developing a healthcare application that uses REST APIs to handle patient data on AWS. Security is a top priority in handling sensitive healthcare data. \n\nWhen the system receives an API call for retrieving or updating patient data, it is essential to verify that the request is coming from a trusted sender. AWS control for checking SSL certificates configured on API Gateway REST API stages does this job. \n\nOnce you set up SSL certificates on API Gateway stages, your backend systems can authenticate incoming requests by validating these certificates. Therefore, it prevents unauthorized or malicious requests from accessing or manipulating sensitive patient data, ensuring the data's integrity and confidentiality.\n\nHere is how the control could be represented in markup format:\n\n```\n\u003cResource name=\"AWS::ApiGateway::RestApi\"\u003e\n  \u003cProperty name=\"Stages\"\u003e\n    \u003cProperty name=\"SslCertificateId\"\u003e\n      \u003cValue\u003earn:aws:acm:us-east-1:example-account:certificate/example-certificate-id\u003c/Value\u003e\n    \u003c/Property\u003e\n  \u003c/Property\u003e\n\u003c/Resource\u003e\n```\nIn this code block, a REST API resource is being defined. The specific SSL certificate associated with this resource is being assigned to the 'Stages' property. So, this SSL certificate gets checked when the REST API receives a request and is used to authenticate the API request source as a security measure.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_opensearch_6",
    "Title": "6 OpenSearch domains should have at least three data nodes",
    "Description": "This control checks whether OpenSearch domains are configured with at least three data nodes and zoneAwarenessEnabled is true. This control fails for an OpenSearch domain if instanceCount is less than 3 or zoneAwarenessEnabled is false.",
    "QueryID": "aws_opensearch_domain_data_node_fault_tolerance",
    "DocumentURI": "policies/aws_foundational_security_opensearch_6.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "opensearch_6"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/OpenSearch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS Control can result in a series of negative consequences and costs, such as:\n\n1. **Data Availability Risks**: If the OpenSearch domains have less than three data nodes, it could potentially compromises the data availability and resilience. In the event of a failure of one data node, your operations might be seriously affected if you don't have enough replicas to take over.\n\n2. **Potential Data Loss**: In case of a disaster or any kind of service interruption, if there are not enough data nodes, the risk of data loss increases significantly. The cost of data loss can be tremendous depending on the criticality of your data.\n\n3. **Reduced Fault Tolerance**: When zone awareness is not enabled, your domain could potentially withstand less fault or failure. This is because all nodes are situated in the same zone and any outage could affect all nodes at the same time, leading to possible service disruption.\n\n4. **Increased Down Time**: When the number of data nodes is less than 3, the amount of downtime could increase due to less redundancy and fault tolerance. Longer downtimes equate to higher business costs due to service disruptions.\n\n5. **Operational Inefficiencies**: Without zone awareness, you can't fully utilize the resources across multiple availability zones. With zone awareness enabled, AWS OpenSearch Service distributes the data nodes and replica shards across two Availability Zones in the same region for better data durability and availability.\n\n6. **Non-compliance Penalties**: If your organization is obligated to follow certain rules, guidelines, or standards which mandate a certain level of redundancy and availability, failing to comply with this Control might result in penalties or loss of certifications.\n\nSo, ensuring compliance with this control is important to maintain data security, application performance, and avoid unnecessary costs."
      ],
      "x-kaytu-usefulness-example": [
        "```markdown\nFor a high-profile e-commerce platform, the AWS Control to check OpenSearch domains configuration becomes highly useful. Here's an instance explaining the scenario:\n\nThe e-commerce platform uses AWS OpenSearch service to manage, monitor, and scale their Search Engines, which deal with millions of products' information. It also provides real-time analytics on users' search behavior, which is instrumental in their real-time product recommendation system.\n\nSuch a critical system requires high availability and fault-tolerance. As a result, they must distribute their OpenSearch Cluster's data nodes across different Availability Zones. Therefore, the platform configures their OpenSearch domains with at least three data nodes and enables the zoneAwareness configuration.\n\nAWS Control comes into the picture here. It continuously checks their OpenSearch domains. If any domain's instanceCount drops below 3 or zoneAwarenessEnabled is set to false, the control flags it. This prompt action ensures that there's no compromise with the high-availability of the search and analytics functions of the platform.\n\nFailure in this system can lead to customers not finding the products they want or receiving irrelevant product recommendations, which could greatly impact the platform's reputation and revenue. Hence, this AWS Control is crucial in maintaining the robustness of their OpenSearch clusters.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_opensearch_7",
    "Title": "7 OpenSearch domains should have fine-grained access control enabled",
    "Description": "This control checks whether OpenSearch domains have fine-grained access control enabled. The control fails if the fine-grained access control is not enabled. Fine-grained access control requires advanced-security-optionsin the OpenSearch parameter update-domain-config to be enabled.",
    "QueryID": "aws_opensearch_domain_fine_grained_access_enabled",
    "DocumentURI": "policies/aws_foundational_security_opensearch_7.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "opensearch_7"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/OpenSearch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can be significant and multifaceted. If OpenSearch domains do not have the Fine-Grained Access Control (FGAC) enabled, it could lead to potential security issues that might have significant financial implications for an organization.\n\n1. **Data Security Breaches**: Without fine-grained access control, unauthorized users can access, modify, or delete sensitive data. This can lead to the leakage of private information, which can result in hefty fines, lawsuits, and loss of consumer trust.\n\n2. **Non-compliance Penalties**: Certain industries and jurisdictions enforce strict regulations like GDPR, HIPAA, that require companies to implement certain controls to secure the data they handle. The cost of compliance violations can include severe fines, increased regulatory scrutiny, and damage to the company's reputation.\n\n3. **Operational Disruption**: Unauthorized modifications to OpenSearch domains could disrupt services, resulting in downtime. This can negatively impact customers' experience, result in loss of sales and may even violate Service Level Agreements (SLA) leading to compensation claims.\n\n4. **Increased Investigation Costs**: If a breach occurs, significant resources might have to be spent on forensic investigations, system remediation, and implementation of new security measures to prevent recurrence.\n\n5. **Increased Insurance Premiums**: With increased risk of data breaches, cyber security insurance premiums may also increase.\n\nThus, failure to enable the FGAC in the OpenSearch parameter `update-domain-config` can potentially expose the entities to significant financial and reputational risks. Therefore, it is crucial to comply with this control."
      ],
      "x-kaytu-usefulness-example": [
        "An example use case scenario would be a digital media company that leverages AWS OpenSearch Service for indexing and querying large amount of data in real-time. To ensure that only authorized individuals or applications can access critical data, the company needs to enable fine-grained access control settings.\n\nAs the company grows, there is a possibility that multiple teams are handling different domains, and each team may have created OpenSearch domains to manage their index files. To ensure consistency across all domains and to reinforce good security practices, the company can use this AWS Config rule to automatically scan all the OpenSearch domains in the AWS environment and verify if fine-grained access control is enabled.\n\nIf the control finds any domains without fine-grained access control enabled, it will indicate a fail status. This allows the administrators in the company to quickly discover potential security risks and take action to rectify the situation. This proactive monitoring can greatly reduce the risk of data exposure and enhance data security. \n\n```markdown\nExample Use Case\n----------------\nDigital Media Company ABC uses AWS OpenSearch Service to handle their large-scale data indexing and queries. They must enforce a policy where only authorised members can access critical information. In order to ensure this, they have to enable fine-grained access control settings across all OpenSearch domains.\n\nAs the company expands, multiple teams, each managing different OpenSearch domains come into play. In order to ensure security practices across all domains, the company employs the AWS Control. The AWS control is designed to scan all OpenSearch domains in the AWS environment and confirm if they have enabled fine-grained access control.\n\nThe control flags a fail status if it discovers any domains without the enabled fine-grained access control. This enables administrators at ABC to spot potential security issues and take corrective action. These measures reduce the risk of data breaches and improve overall data security.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_apigateway_3",
    "Title": "3 API Gateway REST API stages should have AWS X-Ray tracing enabled",
    "Description": "This control checks whether AWS X-Ray active tracing is enabled for your Amazon API Gateway REST API stages.",
    "QueryID": "aws_apigateway_rest_api_stage_xray_tracing_enabled",
    "DocumentURI": "policies/aws_foundational_security_apigateway_3.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "detection_services"
      ],
      "foundational_security_item_id": [
        "apigateway_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/APIGateway"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can result in several costs:\n\n1. **Operational Costs:** AWS X-Ray is crucial for debugging and for understanding the behaviour of applications and microservices. Without it, identifying and fixing issues becomes a challenging and time-intensive process. This can lead to significant operational costs in terms of resources and personnel time.\n\n2. **Financial Costs:** When problems arise, such as performance bottlenecks or failed requests, without AWS X-Ray it could take a lot longer to diagnose and resolve the issue. The longer these problems persist, the more they can impact the services resulting in loss of customers, which will ultimately lead to financial losses. \n\n3. **Security Costs:** X-Ray tracing also helps in examining the user requests that pass through the application, which can potentially help in identifying malicious activities. Without this, the system could be exposed to security risks, and that can result in financial loss as well as harm to the company’s reputation.\n\n4. **Compliance Costs:** In sectors where laws or industry standards mandate certain levels of traceability for digital transactions, lack of X-Ray active tracing might lead to non-compliance if there isn't an alternative solution in place. Non-compliance can lead to hefty fines, legal repercussions, and lost business due to reduced trust. \n\n5. **Performance Costs:** Without understanding how your software and underlying services are performing, it's impossible to optimize and improve them effectively. This can lead to poor customer experiences or potentially even downtime, ultimately affecting the business's bottom line.\n\nIt's hence important to ensure AWS X-Ray active tracing is enabled for Amazon API Gateway REST API stages."
      ],
      "x-kaytu-usefulness-example": [
        "```\nFor instance, consider the scenario where you have multiple REST API stages deployed in your Amazon API Gateway to handle different service operations for your application. These APIs are responsible for processing various user requests, adding customer data into the database, retrieving specific data, updating data and so on.\n\nHowever, at one point, you start to notice unusual latencies and errors in API responses. To investigate the issue, you would want to get a detailed overview of how your API requests and responses are flowing through different services.\n\nHere, enabling AWS X-Ray active tracing for your Amazon API Gateway REST API stages will be extremely useful. It will record and visualize traces of all your HTTP requests/responses, allowing you to dive deep into each operation. You can identify the root cause of latencies and errors, see which path the request took through your application, and understand the relationships between your application's services.\n\nBy using this AWS control, you can take advantage of X-Ray's service map and trace view to visibly see the latency bottlenecks, error rates and the API calls causing issues. This will allow you to improve your application's performance and availability by pinpointing, diagnosing, and fixing issues faster.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_opensearch_8",
    "Title": "8 Connections to OpenSearch domains should be encrypted using TLS 1.2",
    "Description": "This control checks whether connections to OpenSearch domains are required to use TLS 1.2. The check fails if the OpenSearch domain TLSSecurityPolicy is not Policy-Min-TLS-1-2-2019-07.",
    "QueryID": "aws_opensearch_domain_https_required",
    "DocumentURI": "policies/aws_foundational_security_opensearch_8.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transit"
      ],
      "foundational_security_item_id": [
        "opensearch_8"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/OpenSearch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with the AWS Control stated may potentially result in several costs and risks as explained below:\n\n1. **Increased Security Risks**: Not using TLS 1.2 may leave your OpenSearch domains vulnerable to attacks, including downgrade attacks, where the connection has been downgraded to a weaker version or potentially insecure protocols.\n\n2. **Data Breaches**: Non-compliance might lead to potential data breaches as data in transit may not be secure, which could result in sensitive data leakage.\n\n3. **Financial Impacts**: A potential data breach resulting from non-compliances could lead to significant financial penalties, not to mention the cost to rectify the breach and potential compensations to affected parties.\n\n4. **Regulatory Violations**: Depending on resident jurisdictions and industries, the organization might be obliged to adhere to specific data security regulations or standards (like GDPR, PCI-DSS) of which use of TLS 1.2 could be a requirement. Non-compliance thus could lead to regulatory fines and penalties.\n\n5. **Deterioration of Trust**: As a result of all the points above, there could be a loss of customer or stakeholder trust if the non-compliance was to lead to a data breach.\n\nTo avoid these problematic outcomes, it's crucial to ensure compliance with the stated control, ensuring that connections to OpenSearch domains are required to use TLS 1.2, specifically Policy-Min-TLS-1-2-2019-07. Any weakening of these protocols can leave businesses open to the substantial costs of data breaches, both monetary and reputational."
      ],
      "x-kaytu-usefulness-example": [
        "Amazon OpenSearch Service is a powerful tool for handling large amounts of search data. However, it's important to ensure that data transmitted to and from your OpenSearch domains is encrypted for security purposes. There might be a scenario where an organization is dealing with sensitive information like credit card data, medical records, or proprietary data.\n\nConsider a healthcare data analytics company that uses AWS OpenSearch Service to handle patient data analytics. For encryption during transmission, the company must ensure that connections are required to use TLS 1.2. It's absolutely necessary in this case due to HIPAA requirements. forcing TLS 1.2 only, they add an extra layer of security for the sensitive health records they're handling.\n\nThe AWS Control checking whether the OpenSearch domains require TLS 1.2 is vital in such scenario where security couldn't be risked with lower versions of TLS. If the check fails, it means the OpenSearch domain TLSSecurityPolicy is not set to Policy-Min-TLS-1-2-2019-07, and the company needs to upgrade its policy to meet compliance and security requirements."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_apigateway_4",
    "Title": "4 API Gateway should be associated with an AWS WAF web ACL",
    "Description": "This control checks whether an API Gateway stage uses an AWS WAF web access control list (ACL). This control fails if an AWS WAF web ACL is not attached to a REST API Gateway stage.",
    "QueryID": "aws_apigateway_stage_use_waf_web_acl",
    "DocumentURI": "policies/aws_foundational_security_apigateway_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "protective_services"
      ],
      "foundational_security_item_id": [
        "apigateway_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/APIGateway"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can lead to significant costs, primarily revolving around the following risks:\n\n### Security Risk\n\nWithout using an AWS WAF web ACL with an API Gateway stage, the application becomes more vulnerable to common web exploits like SQL injection and cross-site scripting (XSS) attacks. In the event of an attack, organizations could face significant operational and financial costs associated with incident response, investigation, mitigation, and recovery.\n\n### Data Breach\n\nFollowing the security risk, a data breach could occur where confidential and sensitive information is exposed. The financial implications include potential fines and legal claims under data protection regulations such as GDPR, HIPAA, etc. Moreover, your organization may also suffer from loss of customer trust and business reputation, leading to lost revenue.\n\n### Operational Disruption\n\nAn API attack without a WAF could disrupt your service, damaging your organization's operation and resulting in loss of business and, consequently, revenue.\n\n### Non-Compliance Penalties\n\nYour organization could face penalties for not complying with regulatory standards that mandate specific levels of security, like PCI DSS for payment services. The costs of these penalties alone can be crippling to businesses.\n\n### Increased Infrastructure Costs\n\nWithout proper web ACLs to block malicious requests, there will be an unnecessary load on the backend services as they try to process these requests. This could lead to increased computational costs.\n\nPreventing these potential consequences by complying with the AWS control checking whether an API Gateway stage uses an AWS WAF web ACL is vital for any organization in terms of both finances and operations."
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider a company deploying its web services or applications on AWS using API Gateway. Their applications might be exposed to various web-based attacks such as SQL injection, Cross-Site Scripting (XSS), or Distributed Denial of Service (DDoS). To guard against these threats, they would need to apply web application firewall rules.\n\nThis is where AWS WAF comes in. It protects web applications by filtering and monitoring HTTP traffic between a web application and the Internet. It lets you control access to your content by defining customizable web security rules.\n\nWith the described control, the company can make sure that every REST API Gateway stage has an associated WAF ACL. If this control fails, it means that one or more of their APIs are not protected by AWS WAF, leaving them potentially exposed to web attacks.\n\nThis control implementation will allow them to enforce this important security measure across all APIs and reduce the risk of security breaches. The AWS management console can remind them to attach a WAF to their API Gateway, resulting in heightened security health for their applications. The control can be understood in the following markdown code:\n\nCheck whether API Gateway stage uses an AWS WAF:\n\n```\n- if REST API Gateway stage is detected AND\n  - AWS WAF web ACL is NOT attached to that stage\n    - return FAILURE\n- else\n  - return SUCCESS\n```\n\nThis control is useful because it ensures the adherence to a key security best practice on AWS - to apply AWS WAF ACLs to API Gateway Stages."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_apigateway_5",
    "Title": "5 API Gateway REST API cache data should be encrypted at rest",
    "Description": "This control checks whether all methods in API Gateway REST API stages that have cache enabled are encrypted. The control fails if any method in an API Gateway REST API stage is configured to cache and the cache is not encrypted.",
    "QueryID": "aws_apigateway_stage_cache_encryption_at_rest_enabled",
    "DocumentURI": "policies/aws_foundational_security_apigateway_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "apigateway_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/APIGateway"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control has several potential costs:\n\n1. **Data Breach Costs:** The most apparent cost is the potential for a data breach. If your unencrypted cache is accessed by malicious parties, it can lead to loss of sensitive information which could include customer or business data. The costs linked to remediation, legal penalties, and reputational damage can be significant.\n\n2. **Regulatory Fines:** If your business is subject to regulations that require data to be encrypted, like GDPR or HIPAA, non-compliance with this control might lead to hefty fines and sanctions. \n\n3. **Loss of Trust:** Non-compliance could lead to loss of trust from your customers and business partners. If a breach happens and it's discovered that data wasn't encrypted, it may cause customers to lose faith in your ability to protect their data, and they might choose to take their business elsewhere.\n\n4. **Operational Costs:** If a breach occurs, there could be significant operational costs involved in investigating the breach, rectifying the issue, and possibly updating and improving security measures.\n\n5. **Legal Costs:** In the case of a breach, businesses could face lawsuits from parties whose data was compromised. This could involve considerable legal fees and potential settlement costs.\n\nTherefore, it's essential to ensure that all methods in API Gateway REST API stages with cache enabled are encrypted."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, let's consider an ecommerce company operating its services through an API-based architecture. The company uses AWS API Gateway to manage its APIs and has enabled server-side caching to improve the response time of its APIs and reduce the traffic sent to its backend systems. \n\nThe company processes sensitive user data like personal identifiable information (PII), credit card details, and customer preferences. If caching is not encrypted for these APIs, it increases the risk of unauthorized data access should the caches be compromised. \n\nIf the company uses the control in AWS Management Console to check whether all methods in API Gateway stages that have cache enabled are encrypted, it can ensure that its cached data is not susceptible to threats. Thus, encryption can help the company protect sensitive information and comply with laws and regulations related to data security. \n\nIn the specific scenario of an audit, this control will be useful to quickly validate the security configurations of the company's AWS API Gateway setup. \n\nBelow is a short representation in markup:\n\n```markdown\nScenario: Secure handling of customer data at EcommerceX\n\n- EcommerceX employs AWS API Gateway for managing its APIs\n- Server-side caching enabled to improve API response time and lower backend load\n- Company processes sensitive data\n   - Personal Identifiable Information (PII)\n   - Credit card information\n   - Customer preferences\n- Use AWS control to check if all cached API methods are encrypted\n- Value: \n    \n    - Boost customer data security\n    - Compliance with data security regulations\n    - Efficient audit completion\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudtrail_1",
    "Title": "1 CloudTrail should be enabled and configured with at least one multi-Region trail",
    "Description": "This control checks that there is at least one multi-Region CloudTrail trail.",
    "QueryID": "aws_cloudtrail_multi_region_trail_enabled",
    "DocumentURI": "policies/aws_foundational_security_cloudtrail_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "cloudtrail_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudTrail"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control could have a number of cost implications for an organization:\n\n1. **Security Risk**: Failing to maintain at least one multi-Region CloudTrail trail could expose your AWS resources to increased security vulnerability. If unauthorized activities occur in AWS resources and they are not monitored and logged, then potential security threats may go unnoticed and unresolved, which could lead to data breaches and considerable financial losses.\n\n2. **Regulatory Fines**: Non-compliance could potentially result in regulatory fines. Depending on the industry and location of your business, various regulations might require you to maintain a certain level of logging and monitor activities across your information systems. Failing to meet these requirements could lead to penalties.\n\n3. **Business Continuity**: In the event of a security incident, not having comprehensive logging and monitoring could impede the organization's ability to respond promptly, thus posing a risk to business continuity.\n\n4. **Forensic Costs**: If an incident does occur, lack of logging could significantly increase the forensic costs associated with figuring out what happened, how to remediate it, and how to prevent it from happening in the future.\n\n5. **Loss of Reputation**: If your AWS resources were to be compromised due to lack of logging and monitoring, this could harm your reputation and result in loss of business.\n\n```markdown\n    ### Cost of Non-Compliance\n\n    - **Security Risk**: High potential for data breaches and security threats, leading to financial losses.\n    \n    - **Regulatory Fines**: Risk of penalties due to failure in maintaining required level of logging and monitoring.\n    \n    - **Business Continuity**: hindrance to swift incident response risking business operations.\n    \n    - **Forensic Costs**: Increased costs in case of an incident due to lack of logging information.\n    \n    - **Loss of Reputation**: Potential harm to business reputation leading to loss of customers and decrease in revenue.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "This is useful in a scenario where an organization has operations across multiple AWS regions. \n\nFor instance, a multinational corporation may have operations in North America, Europe, and Asia, each hosted in a different AWS region. The organization needs to collect, analyze, and retain account activity related to actions across its AWS infrastructure for security analysis, resource change tracking, and compliance auditing.\n\nCreating a multi-region CloudTrail trail allows the organization to track user activity and API usage across all the regions. Moreover, if an attack is launched or a fault occurs in Asia, it might not be detected if the CloudTrail only covers North America and Europe.\n\nSo, this AWS Control plays a significant role in ensuring that no region hosting the organization's operations is left out in maintaining and recording API history, improving their security, operational analysis and regulatory compliance. \n\n```markdown\nExample:\n\nCompany XYZ has its operations in NA (North America), EU (Europe), and AP (Asia Pacific) AWS regions. To meet their regulatory compliance needs related to auditing user activities, detect anomalous behavior and data security, XYZ creates one multi-region CloudTrail trail.\n\nThis multi-region CloudTrail setup ensures that all activities across all regions are continuously logged, recorded and stored securely. These exhaustive logs aid in incident responses, anomaly detection, and impact analysis in XYZ's dispersed AWS infrastructure.\n\nThus, AWS Control checking for at least one multi-region CloudTrail trail significantly contributes to XYZ's security, operational transparency, and regulatory compliance.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_apigateway_8",
    "Title": "8 API Gateway routes should specify an authorization type",
    "Description": "This control checks if Amazon API Gateway routes have an authorization type. The control fails if the API Gateway route does not specify an authorization type.",
    "QueryID": "aws_api_gatewayv2_route_authorization_type_configured",
    "DocumentURI": "policies/aws_foundational_security_apigateway_8.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "apigateway_8"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/APIGateway"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can have serious consequences, both financially and operationally. Here's a breakdown in markup format:\n\n1. **Security Risks \u0026 Related Costs**: If API Gateway routes do not have an authorization type, unauthorized users could potentially access your backend services which could lead to data breaches. Depending on the severity, the financial repercussions of a data breach can be severe.\n\n2. **Violation of Compliance Standards**: If your business operates in a regulated industry or deals with sensitive data (such as health, personal, or financial data), not having proper authorization controls can result in violation of compliance standards like HIPAA, GDPR, or PCI DSS. These violations could result in hefty fines and reputational damage.\n\n3. **Resource Exploitation \u0026 Increased Costs**: Without proper authorization, malicious users can exploit your APIs leading to unnecessary usage of your resources and subsequently increased AWS costs.\n\n4. **Loss of Customer Trust**: If customer data is affected due to unauthorized access to your APIs, it may result in loss of customer trust which can impact the reputation of your business and can also lead to loss of business.\n\n5. **Potential Legal Ramifications**: If unauthorized access leads to a data breach which compromises user privacy, there may be legal ramifications. You may have to compensate users for the breach of privacy, which can add further costs.\n\nSo, it's absolutely vital to ensure API Gateway routes have an authorization type set to prevent any potential problems down the line."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, let's say you run an online ecommerce store that hosts its backend APIs using the Amazon API Gateway. These APIs are responsible for various functions like user sign-ups, order placements, payment processing, etc.\n\nBy using the AWS control for checking if the API Gateway routes have an authorization type, you can add an extra layer of security to your platform. This ensures that only authorized requests are able to interact with your backend APIs.\n\n```markdown\nFor instance:\n- An API route related to payment processing needs to be accessed only by verified and authorized users to prevent fraudulent transactions. \n- Another API related to user management should only be authorized to the admin to prevent unauthorized data breaches.\n```\n\nIf the control fails, this signifies that there's a route in your API Gateway that doesn't specify an authorization type. This could be a potential security risk and should be fixed as soon as possible to prevent unauthorized access to sensitive data. \n\nHence, this control provides an effective way to enforce policy-based protections across all the APIs served by the gateway and helps maintain the security and integrity of the ecommerce platform."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudtrail_2",
    "Title": "2 CloudTrail should have encryption at rest enabled",
    "Description": "This control checks whether CloudTrail is configured to use the server-side encryption (SSE) AWS Key Management Service customer master key (CMK) encryption. The check passes if the KmsKeyId is defined.",
    "QueryID": "aws_cloudtrail_trail_logs_encrypted_with_kms_cmk",
    "DocumentURI": "policies/aws_foundational_security_cloudtrail_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "cloudtrail_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudTrail"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this control of AWS can have multiple costs involved in terms of security, legal, financial, reputational, and operational:\n\n### 1. Security Costs:\nIf AWS CloudTrail logs are not encrypted, sensitive data could be exposed to unauthorized personnel. This might lead to unauthorized access to the system, data breaches, or manipulation of your data. The data could include complex structures like customer data, internal messages, or server configurations. \n\n### 2. Legal Costs:\nData protection regulations worldwide, like GDPR in the EU, the CCPA in California, or the POPIA in South Africa, mandate that personal data must be appropriately secured. Non-compliance with these regulations can result in substantial financial penalties, in addition to legal proceedings.\n\n### 3. Financial Costs:\nAfter a data breach, the organization would need to restore the compromised systems. The entire restoration process from a security breach requires monetary investment. Additionally, the costs associated with potential regulatory fines and lawsuits from a data leak could be substantial.\n\n### 4. Reputational Costs:\nNon-compliance could lead to a data breach, which can significantly damage the reputation of a business and undermine customer trust. Recovering from a severe loss of trust can take many years and has a direct impact on customer acquisition and retention - and thus on revenues.\n\n### 5. Operational Costs:\nWithout AWS CloudTrail's encryption, malicious activity might go unnoticed. This could result in system downtime, disruption of services, and thus impact day-to-day operations of the business.\n\nThus, it's crucial to ensure that CloudTrail is configured to use the server-side encryption (SSE) AWS Key Management Service customer master key (CMK) encryption. Compliance will ensure optimum data protection, system security, and efficient operations by reducing the risk of potential data breaches and subsequent costs associated with them."
      ],
      "x-kaytu-usefulness-example": [
        "For example, suppose you have an e-commerce business and deploy your backend services on AWS. You are operating in multiple regions for better availability and performance. To track user activity and API calls throughout all the AWS services you use, you've enabled AWS CloudTrail. However, due to regulatory compliance and to ensure an additional layer of security for your logs, you are required to encrypt your CloudTrail logs.\n\nHere's where the \"CloudTrail SSE KMS CMK check-control\" comes in handy. This will automatically verify that all your CloudTrail logs are encrypted using a customer-specific managed key. If not, the check fails, indicating that you need to update your AWS CloudTrail configuration to use a customer-specific KMS key.\n\nAWS Control plays a crucial role in preventing accidental data leakage and ensuring that appropriate encryption measures are in place to protect your sensitive information. This ensures that even if someone were to gain unauthorized access to your CloudTrail logs, they still couldn't read the information without the specific encryption key. This encryption is particularly important given the amount of sensitive data that CloudTrail logs can contain, such as IP addresses, accessed resource details, and response elements. \n\nUsefulness comes from security audit perspective, compliance or tracking unauthorized changes or anomaly detection in user behavior."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_apigateway_9",
    "Title": "9 Access logging should be configured for API Gateway V2 Stages",
    "Description": "This control checks if Amazon API Gateway V2 stages have access logging configured. This control fails if access log settings aren't defined.",
    "QueryID": "aws_gatewayv2_stage_access_logging_enabled",
    "DocumentURI": "policies/aws_foundational_security_apigateway_9.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "apigateway_9"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/APIGateway"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "In Amazon Web Services (AWS), non-compliance with controls, such as the one ensuring that Amazon API Gateway V2 stages have access logging configured, can lead to several risks and potential costs. \n\n1. **Security Risks**: Not enabling access logs for API Gateway can be a security risk as it becomes hard to track and monitor user activities and identify unusual patterns which may indicate potential security threats or data breaches.\n\n2. **Troubleshooting Difficulties**: Without access logs, it would become difficult to troubleshoot issues related to API calls as there will be no accurate records to trace the source or cause of the problem. \n\n3. **Regulatory Compliance Issues**: Depending on the nature of your business and data, you may be under various regulations requiring certain data to be logged and stored for a period of time. A lack of access logs could result in regulatory non-compliance, which can have serious legal and financial implications.\n\n4. **Unexpected Costs**: If unmonitored, unauthorized access could potentially lead to unwanted resource usage, leading to increased and unexpected operational costs.\n\n5. **Loss of Customer Trust**: In the event of a security breach, if data leak is traced back to a failure in logging, it could result in a loss of customer trust, leading to a negative brand image and potential loss in revenue.\n\nTherefore, ensuring that Amazon API Gateway V2 stages have access logging configured is an essential compliance control in AWS. Non-compliance, apart from leading to the mentioned issues, can also have significant financial implications depending on the potential data breaches and regulatory penalties."
      ],
      "x-kaytu-usefulness-example": [
        "```\nExample:\n\nJohn is a Cloud Engineer for an organization using AWS. They built an API using Amazon API Gateway V2 and it is being used by multiple services and hundreds of clients. However, some clients complained of performance issues and others reported unexpected behavior from the API.\n\nJohn believes these issues might be due to certain client requests but he needs more information to diagnose and fix the problem. He needs to identify which requests are causing these problems and rectify them.\n\nHe decides to activate access logging for the API Gateway V2 stage. Access logs provide detailed records of each client request such as client IP, request URI, request method (GET, POST, etc.), request time, response status, etc.\n\nHe adds access log settings to the API Gateway stage. Once enabled, all incoming requests to his API are logged and sent to the specified CloudWatch Logs log group.\n\nAfter analyzing this logged information, John identifies requests triggering bad queries or prolonged processing, which were causing performance issues and unexpected behaviors.\n\nIn this example, the AWS control that checks for Amazon API Gateway V2 stages having access logging configured would have been helpful. If such a control was in place, John could have avoided the issue entirely, as it would have prompted him to configure access logging before any issue had arisen, thereby providing valuable troubleshooting data in real-time.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudtrail_4",
    "Title": "4 Ensure CloudTrail log file validation is enabled",
    "Description": "This control checks whether log file integrity validation is enabled on a CloudTrail trail. CloudTrail log file validation creates a digitally signed digest file that contains a hash of each log that CloudTrail writes to Amazon S3. You can use these digest files to determine whether a log file was changed, deleted, or unchanged after CloudTrail delivered the log.",
    "QueryID": "aws_cloudtrail_trail_validation_enabled",
    "DocumentURI": "policies/aws_foundational_security_cloudtrail_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "data_integrity"
      ],
      "foundational_security_item_id": [
        "cloudtrail_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudTrail"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Cost of non-compliance to this AWS control could be significant and it includes:\n\n1. **Security Breach Considerations:** If file integrity validation is not enabled and the logs are manipulated, it would become difficult to detect security breaches. Attackers could exploit this by tampering with the logs to hide or cover up their tracks. This could result in undetected breaches, loss of sensitive data, or unauthorized activities.\n\n2. **Audit Failures:** Compliance with various security certifications and standards like ISO 27001, PCI-DSS, and others mandate the requirement of log integrity checks. Not having this control enabled can lead to audit failures, which can result in losing certifications, penalties, and damage to the organization's reputation.\n\n3. **Loss of Traceability:** Log files are important for overall system analysis, debugging the environment, and identifying problematic areas within the application. If log file integrity validation is not enabled, the reliability of these log files gets compromised, making it harder for system admins and developers to troubleshoot and understand system behavior.\n\n4. **Potential Legal and Financial Consequences:** In cases of serious data breaches, inability to present unaltered logs would strip the organization of forensically sound evidence. This can also lead to financial consequences, like fines from regulatory bodies. \n\n5. **Increased Operational Costs:** If logs are tampered or deleted, it could result in increased costs due to the additional man-hours consumed in troubleshooting, inherent data breaches, lawsuits, and possible recovery from backup which can be an expensive and resource-intensive process. \n\nTo avoid these costs, it's crucial to ensure log file integrity validation is enabled for CloudTrail trail. This measure will add an additional layer of security and reliability to the system."
      ],
      "x-kaytu-usefulness-example": [
        "For a communication technology company that runs several applications on AWS, they have a dedicated security team that ensures the integrity of their systems, including their cloud-based applications. They have recently been faced with incidents of security breaches and they suspect some logging files might have been tampered with.\n\nUsing this AWS control that checks whether log file integrity validation is enabled on a CloudTrail trail can be immensely useful for this team. It would allow them to promptly discern if any log file from their applications was altered, deleted, or remains unchanged after CloudTrail delivered it. This way they can speedily identify any potentially suspicious activities or breaches in their system. \n\nIn their case, they could use the function as follows:\n\n```\nresource \"aws_cloudtrail\" \"example\" {\n  dependson = [\"aws_s3_bucket.example\", \"aws_iam_role.example\"]\n  \n  name                          = \"example\"\n  s3_bucket_name                = \"${aws_s3_bucket.example.bucket}\"\n  s3_key_prefix                 = \"prefix\"\n  include_global_service_events = true\n  enable_log_file_validation    = true\n}\n```\n\nThe above infrastructure-as-code (IaC) script creates a configuration for CloudTrail with `enable_log_file_validation` set to `true` indicating that log file integrity validation is enabled on the CloudTrail trail. As a result, if any unauthorized changes occur, they will be alerted promptly."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudtrail_5",
    "Title": "5 Ensure CloudTrail trails are integrated with Amazon CloudWatch Logs",
    "Description": "This control checks whether CloudTrail trails are configured to send logs to CloudWatch Logs. The control fails if the CloudWatchLogsLogGroupArn property of the trail is empty.",
    "QueryID": "aws_cloudtrail_trail_integrated_with_logs",
    "DocumentURI": "policies/aws_foundational_security_cloudtrail_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "cloudtrail_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudTrail"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control could be significant, and is manifested in several ways:\n\n1. **Loss of Visibility and Auditability**: AWS CloudTrail provides event history of your AWS account activity, including actions taken through the AWS Management Console, AWS SDKs, command line tools, and other AWS services. If trails are not configured to send logs to CloudWatch Logs, you lose the capability to monitor, store, and access log files from AWS services in real-time. This could lead to a lack of visibility and auditability for system events - a crucial aspect of maintaining system security and health.\n\n2. **Potential Compliance Violations**: If your business is subject to industry-specific regulations (like HIPAA, GDPR, or PCI-DSS), non-compliance with this control could lead to regulatory violations. Most of these regulations have mandates around logging and monitoring which would arguably not be fulfilled without configuring CloudTrail to send logs to CloudWatch Logs.\n\n3. **Delayed Incident Response**: CloudTrail combined with CloudWatch Logs, could allow your security \u0026 operations team to detect and respond to critical security incidents more quickly. If these logs are not configured correctly, it could cause significant delays in identifying and responding to these incidents.\n\n4. **Increased Operational Costs**: If this control is not complied with, then precious time may be wasted by your operations team in troubleshooting and problem-solving. The absence of prompt, consolidated logging data could lead to increased manpower efforts and ultimately, higher operational costs.\n\n5. **Damage to Reputation**: If a security breach does occur, and it becomes apparent that it was due to non-compliance with basic security controls such as this, it could severely damage the company's reputation.\n\nTherefore, it's important to ensure that AWS CloudTrail trails are correctly configured to send logs to CloudWatch Logs, considering the high cost of non-compliance."
      ],
      "x-kaytu-usefulness-example": [
        "`AWS Control` is a service that can automatically evaluate your Amazon Web Services resources for compliance with security standards and best practices. A good example instance of useful could be:\n\nA company is required to meet certain regulatory standards, like the GDPR, which requires complete logs of all actions taken by any operator within their systems. To this end, they've implemented AWS Control to consistently monitor and evaluate their AWS resources.\n\nIn this specific example, ensuring that CloudTrail trails are configured to send logs to CloudWatch Logs is essential. AWS CloudTrail provides a history of AWS API calls for the account, while Amazon CloudWatch Logs can be used to monitor, store, and access log files. Therefore, by having this configuration, they ensure all activity is being documented and stored appropriately for audits and inspections.\n\nThe AWS Control will check to see if the CloudWatchLogsLogGroupArn property of the trail is empty - if it is, the control will fail, indicating that the trail is not correctly configured to send logs to CloudWatch Logs. Consequently, the company might be in danger of falling foul of GDPR regulations.\n\nThus, having this AWS Control in place allows the company to quickly detect issues with their logging procedures, fix them before they become problems, and stay compliant with their necessary regulatory standards."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudfront_1",
    "Title": "1 CloudFront distributions should have a default root object configured",
    "Description": "This control checks whether an Amazon CloudFront distribution is configured to return a specific object that is the default root object. The control fails if the CloudFront distribution does not have a default root object configured.",
    "QueryID": "aws_cloudfront_distribution_default_root_object_configured",
    "DocumentURI": "policies/aws_foundational_security_cloudfront_1.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resources_not_publicly_accessible"
      ],
      "foundational_security_item_id": [
        "cloudfront_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudFront"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can result in extra costs, both financial and operational, including:\n\n1. **Inefficient Use of Resources:** Without a default root object set up, a CloudFront distribution might end up using more server resources to retrieve and return objects. This inefficient use of resources can lead to higher operational costs.\n\n2. **Poor User Experience:** If a user requests the root URL of your distribution and a default object is not specified, CloudFront returns an error. This can potentially degrade the user experience, leading to customer churn and potential loss in revenue.\n\n3. **Inconsistent Behavior:** Consistent server behavior is critical for applications to function reliably. Without a default object, the server response can be unpredictable, leading to application instability and potential downtime. This can have related costs in terms of troubleshooting, development time and even customer compensation for service disruption.\n\n4. **Security Risks:** With no default root object configured, unwanted files could inadvertently be exposed to the web, leading to potential information leaks. The cost of such breaches can include reputational damage, as well as financial penalties from data protection regulators.\n\n5. **SEO Impacts:** A missing default homepage could be detrimental to your site's Search Engine Optimization (SEO). Lower site rankings can indirectly affect your revenue stream if your business relies heavily on web traffic.\n\nThus, ensuring compliance with this AWS control is not only essential for the optimal and secure functioning of your CloudFront distribution, but also helps to avoid unnecessary extra costs."
      ],
      "x-kaytu-usefulness-example": [
        "```\nConsider an e-commerce company that uses Amazon CloudFront for its CDN to deliver web content. When a user accesses the website (let's say, www.abc.com), the website's landing page (like index.html) should be returned.\n\nThe root object feature in CloudFront allows the company to define this object. For instance, setting 'index.html' as the default root object, so when users access www.abc.com, they are shown 'index.html' by default which is the website's landing page in this case.\n\nThis AWS control, which checks whether a CloudFront distribution has a configured root object, is beneficial in such a scenario. If a root object is not set, the control will fail, alerting the developers about the potential issue in the system. This helps in quickly solving the issue and ensuring that the end-users do not face any discrepancies, thus improving the user experience and the website's overall efficiency.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudfront_2",
    "Title": "2 CloudFront distributions should have origin access identity enabled",
    "Description": "This control checks whether an Amazon CloudFront distribution with Amazon S3 Origin type has Origin Access Identity (OAI) configured. The control fails if OAI is not configured.",
    "QueryID": "aws_cloudfront_distribution_origin_access_identity_enabled",
    "DocumentURI": "policies/aws_foundational_security_cloudfront_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_policy_configuration"
      ],
      "foundational_security_item_id": [
        "cloudfront_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudFront"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the mentioned AWS control can be discussed under the following points:\n\n1. **Security Risk:** Amazon CloudFront helps in delivering content with low latency and high transfer speeds. If your CloudFront distribution doesn't have Origin Access Identity configured, then the S3 bucket from which resources are being distributed might be left open for public/anonymous access. This poses a huge security threat as unauthorized individuals can access, modify, or delete your sensitive data.\n\n2. **Financial Costs:** Unauthorized access to your S3 buckets due to non-compliance may lead to unexpected financial costs. Anyone with access can utilize unregulated bandwidth or perform untraceable processes which may show up on your bill. Additionally, if sensitive data is leaked, it could lead to financial losses from any subsequent lawsuits or penalties.\n   \n3. **Reputation Damage:** If unauthorized access to your data does occur, it can potentially damage your business's reputation. This might lead to loss of existing customers and potentially deter new customers from using your services, which could have substantial long-term effects on your business.\n\n4. **Regulatory Non-Compliance:** If your business operates in an industry that is subject to regulatory standards (like healthcare, finance, or government), failing to prevent unauthorized access to confidential data might lead to non-compliance with those standards. This can result in hefty penalties and fines.\n\n5. **Data Loss:** With public access to your S3 bucket, there's a high risk of data loss. An unauthorized user can delete important information either maliciously or unintentionally.\n\nThus, it is necessary to comply with this AWS control and ensure that Origin Access Identity is properly configured for all CloudFront distributions with an S3 origin."
      ],
      "x-kaytu-usefulness-example": [
        "In an instance where a company is storing confidential business data in an Amazon S3 bucket and wants to distribute this data via CloudFront, they would require this AWS Control. \n\nThe use of Origin Access Identity (OAI) would be crucial to ensure that only CloudFront can access the data in the S3 bucket and not the public. Without OAI, if the S3 bucket permissions are misconfigured, it can lead to a data leak that can be accessed by anyone, risking the exposure of confidential data. Thus, the OAI configuration check prevents such incidents and enhances the security of data distribution. \n\n```markdown\nExample:\n\n- **Company**: XYZ FinTech Ltd.\n- **Scenario**: The company wants to distribute a weekly financial report through their website hosted on AWS. The data for these reports is stored on an Amazon S3 bucket and distributed via Amazon CloudFront.\n- **Use of AWS Control**: To ensure that only authorized personnel (via CloudFront) have access to the reports stored in the S3 bucket, this control is employed. It checks if the OAI is configured for the CloudFront distribution with the S3 bucket. If it finds that the OAI is not configured, it raises an alert, preventing unauthorized access and potential data leaks.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudfront_3",
    "Title": "3 CloudFront distributions should require encryption in transit",
    "Description": "This control checks whether an Amazon CloudFront distribution requires viewers to use HTTPS directly or whether it uses redirection. The control fails if ViewerProtocolPolicy is set to allow-all for defaultCacheBehavior or for cacheBehaviors.",
    "QueryID": "aws_cloudfront_distribution_encryption_in_transit_enabled",
    "DocumentURI": "policies/aws_foundational_security_cloudfront_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transit"
      ],
      "foundational_security_item_id": [
        "cloudfront_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudFront"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control can lead to multiple potential costs including:\n\n## 1.  Data Security Risk\n\nIf ViewerProtocolPolicy is set to 'allow-all', it means your CloudFront distribution allows both HTTP and HTTPS for viewer connections. Information transmitted over HTTP is not secured which makes it prone to man-in-the-middle attacks. Eavesdroppers can access sensitive data like customer information, login credentials, or credit card details. This presents a data security risk which can lead to financial losses and damage to the company's reputation if a breach occurs.\n\n## 2. Non-Compliance Penalties\n\nFor businesses handling sensitive information like personal data, health information, or cardholder data, allowing unencrypted connections could mean non-compliance with standards such as GDPR, PCI DSS, or HIPAA. Non-compliance can result in severe penalties and fines, depending on the regulation.\n\n## 3. Loss of Customer Trust\n\nData breach due to unsecured connections can negatively affect customers' trust in the company. This could lead to loss of customers and decrease in sales. \n\n## 4. Costs associated with a potential data breach\n\nA data breach can result in significant costs to identify the cause of the breach, correct the security vulnerabilities, and notify and compensate the affected individuals. \n\nPreventing non-compliance with this AWS control is crucial in maintaining the security posture and reputation of your company. It's recommended to enforce HTTPS for all viewer connections to your Amazon CloudFront distributions."
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider an online e-commerce company that serves content to its users via an Amazon CloudFront distribution. The company needs to ensure that all its communications with the users' web browsers are encrypted in order to prevent possible information theft and to gain customers' trust.\n\nLet's say that company hasn't set the ViewerProtocolPolicy correctly and it's set to 'allow-all'. This would mean that communication between the users and the company's servers could potentially occur over unsecured HTTP connections, exposing sensitive information like customers' personal data and payment information.\n\nThis is where the AWS control comes in. By checking that the ViewerProtocolPolicy is not set to 'allow-all', the AWS control ensures that all communication is being done over HTTPS, adding a layer of security. If the control fails, the company knows that it needs to alter its settings to enforce HTTPS and hence improve their security measures. This is just one instance where this AWS control can be extremely useful."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudfront_4",
    "Title": "4 CloudFront distributions should have origin failover configured",
    "Description": "This control checks whether an Amazon CloudFront distribution is configured with an origin group that has two or more origins. CloudFront origin failover can increase availability. Origin failover automatically redirects traffic to a secondary origin if the primary origin is unavailable or if it returns specific HTTP response status codes.",
    "QueryID": "aws_cloudfront_distribution_configured_with_origin_failover",
    "DocumentURI": "policies/aws_foundational_security_cloudfront_4.md",
    "ManualVerification": false,
    "Severity": "Low",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "cloudfront_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudFront"
      ],
      "x-kaytu-explanation": [
        "Low"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS (Amazon Web Services) Control can lead to higher costs due to various factors such as:\n\n1. **Loss of Business:** If the primary origin for a CloudFront distribution fails and there is no origin failover setup, there could be down time. This could lead to loss of business as services that are dependent on AWS may face outage.\n\n2. **Increased Operational Cost:** In case the primary origin fails, and you do not have origin failover setup, you will need resources to manually switch to back-up servers. This could increase operational cost, as your team will have to spend time diagnosing the issue, bringing up secondary servers and then re-routing the traffic.\n\n3. **Potential Data Loss:** If services fail and data isn't properly backed up, there could be cases of data losses which could be detrimental to the business.\n\n4. **Loss of reputation:** Prolonged unavailable services could also lead to a loss of reputation and customer trust, which can indirectly harm your business's bottom line. \n\n5. **Penalties and Fines:** Depending upon the sector in which your business operates, non-compliance can lead to monetary penalities and fines from regulatory bodies.\n\n6. **Difficulty in troubleshooting:** Without a failover system in place, identifying and fixing areas of failure within your system could become more difficult, leading to longer periods of downtime or suboptimal performance.\n\nHence, ensuring the AWS Control of having a CloudFront distribution configured with an origin group having two or more origins is advantageous. This allows for automatic redirection of traffic to a secondary origin in case of primary origin failure, thereby increasing overall availability and robustness of your AWS services."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nLet's imagine an online retail company that relies heavily on its e-commerce platform running on AWS. They have a global customer base and use CloudFront to distribute web content quickly to their customers. The company has a primary origin server located in the USA (US), and a secondary server in the European Union (EU) in the case of failover.\n\nOn Black Friday, their site experiences an enormous amount of traffic. Unfortunately, an issue arises in the US data center, causing the primary origin server to go offline. Normally, this would cause a significant disruption in service and potentially lead to loss in revenue.\n\nHowever, because the company utilized this AWS Control and configured their CloudFront distribution to have an origin group with the secondary server in the EU, their service is still up and running. CloudFront was able to automatically redirect traffic to the secondary origin when it detected that the primary origin (US server) was unavailable. As a result, the site stayed operational despite the issues in the US data center, preserving the company's revenue and maintaining a positive user experience for their customers."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudfront_5",
    "Title": "5 CloudFront distributions should have logging enabled",
    "Description": "This control checks whether server access logging is enabled on CloudFront distributions. The control fails if access logging is not enabled for a distribution.",
    "QueryID": "aws_cloudfront_distribution_logging_enabled",
    "DocumentURI": "policies/aws_foundational_security_cloudfront_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "logging"
      ],
      "foundational_security_item_id": [
        "cloudfront_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudFront"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS (Amazon Web Services) control will have the following potential costs:\n\n1. **Lack of Visibility and Traceability**: Without server access logging, organizations lose traceability on who accessed what resources at which time. This limits the organization's ability to identify unusual or suspicious behavior, which can be a crucial indicator of a security breach.\n\n2. **Hindrance in Troubleshooting**: Logging plays a significant role in troubleshooting application or system issues. If server access logging is not enabled, it could hinder the ability to quickly diagnose and resolve performance or operational issues.\n\n3. **Failure in Audit Compliance**: Compliance to industry standards and regulations often requires logging of all activities. If access logging is not enabled, it might result in noncompliance with standards such as GDPR, PCI-DSS, ISO 27001, etc. This could lead to hefty fines and potential loss of business due to breach of trust with customers.\n\n4. **Legal Risks**: In case of a data breach or other legal issues, logs are often crucial pieces of evidence that can protect or harm the company's standing in court. A lack of thorough logs may thus pose significant legal risks.\n\n5. **Delay in Incident Response**: Without detailed logs, it may take longer to identify and respond to incidents. This could potentially prolong the exposure of sensitive data or damage from an incident.\n\n6. **Financial Loss**: Non-compliance with this control can result in financial loss due to fines, increased time and resources needed for troubleshooting, loss of customer trust and potential business, and more. \n\nIn summary, enabling server access logging on CloudFront distributions is not an optional feature, but a critical part of secure and responsible system management. Failure to comply with this control can have severe financial, operational, and legal repercussions."
      ],
      "x-kaytu-usefulness-example": [
        "For example, a company manages a large website that involves lot of customer interactions and they use AWS CloudFront for content delivery. In this case, enabling server access logging is highly beneficial.\n\nThis is because the server access logging allows the company to capture detailed records about each user's request and helps in understanding traffic patterns or troubleshooting issues. More specifically, by enabling logging, the company can get details like the client's IP address, user agent, request ID, and latencies which can be further analyzed for trends and patterns. \n\nAlso, logs can be used to track any malicious activity on the website. Whenever there's a security incident, logs serve as an important resource to understand the sequence of events that led to the incident. \n\nBy having this AWS Control check regularly, the company could ensure that their logging is always enabled, therefore always collecting valuable data for analysis and enhancing the overall security posture. \n\nThe markup representation can be:\n\n```markdown\nAWS Control Check: CloudFront Server Access Logging\n\n- Objective: Ensure server access logging is enabled for CloudFront distributions\n- Failure: If server access logging is NOT enabled\n- Usefulness: Captures detailed records for each request, aids in understanding traffic pattern, useful in troubleshooting, help in detecting malicious activities.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudfront_6",
    "Title": "6 CloudFront distributions should have AWS WAF enabled",
    "Description": "This control checks whether CloudFront distributions are associated with either AWS WAF or AWS WAFv2 web ACLs. The control fails if the distribution is not associated with a web ACL.",
    "QueryID": "aws_cloudfront_distribution_waf_enabled",
    "DocumentURI": "policies/aws_foundational_security_cloudfront_6.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "protective_services"
      ],
      "foundational_security_item_id": [
        "cloudfront_6"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudFront"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can be detrimental and might lead to multiple risks, both financial and reputational. Not associating your CloudFront distributions with AWS WAF or AWS WAFv2 web ACLs can leave your resources unprotected against common web threats such as SQL injection and Cross-Site Scripting (XSS), which can lead to data breaches.\n\n1. **Security risk**: Without this control, an attacker can exploit vulnerabilities in your application to compromise your system or disrupt your service, which could lead to unauthorized access, data loss, or service disruption.\n\n2. **Financial Impact**: An attack could have a significant financial cost. Attacker can use up your AWS resources leading to financial burden due to extra charges incurred. Additionally, data breaches can result in hefty fines especially if your organization needs to meet certain compliance requirements (eg: GDPR, HIPAA)\n\n3. **Reputational Damage**: A breach or service interruption can severely damage the reputation of your company, affecting your customer's trust and leading to potential loss of business.\n\nTherefore, compliance to this control by ensuring that your CloudFront distributions are associated with a AWS WAF web ACL is crucial in maintaining a secure and reliable service on AWS."
      ],
      "x-kaytu-usefulness-example": [
        "AWS CloudFront is a reliable and secure content delivery service from AWS. It brings the data, applications, and APIs closer to the users through its worldwide network of data centers. However, when these distributions are exposed to the Internet, they are susceptible to various web attacks.\n\nHere's where AWS WAF comes into play. It is a web firewall that helps protect your CloudFront distributions from web exploits that could affect application availability, compromise security, or consume excessive resources.\n\nThe control checks whether your CloudFront distributions are associated with either AWS WAF or AWS WAFv2 web ACLs to ensure they are protected as a precautionary measure against common web exploits.\n\n```\nExample:\n1. You own a business that has an application with a significant number of users across the globe. When users interact with your application, they necessitate the delivery of dynamic, static, and streaming content. Therefore, you use CloudFront to deliver this content with lower latency and high speed. But the open nature of an internet-facing application needs the implement of a strong security mechanism as it is continuously vulnerable to numerous web attacks. Here, you can utilize AWS WAF.\n\n2. Suppose you have a significant amount of sensitive customer data that can be exploited if not well defended. In creating an extra safety fence for this data, you choose to integrate AWS WAF with your CloudFront distributions. If there is a control that checks whether CloudFront distributions are actually associated with AWS WAF, you'll be assured that all distributions are secure.\n\nPlease remember that this control will fail if there is a distribution that isn't associated with a web ACL, urging you to pay attention to the security of that particular distribution. Thus, the control is an effective way of ensuring that all CloudFront distributions are secure, which in turn, aids in maintaining the security, privacy, and integrity of your data.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudfront_7",
    "Title": "7 CloudFront distributions should use custom SSL/TLS certificates",
    "Description": "This control checks whether CloudFront distributions are using the default SSL/TLS certificate CloudFront provides. This control passes if the CloudFront distribution uses a custom SSL/TLS certificate. This control fails if the CloudFront distribution uses the default SSL/TLS certificate.",
    "QueryID": "aws_cloudfront_distribution_use_custom_ssl_certificate",
    "DocumentURI": "policies/aws_foundational_security_cloudfront_7.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transi"
      ],
      "foundational_security_item_id": [
        "cloudfront_7"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudFront"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control could result in several costs, including:\n\n1. **Security Risks**: Using default SSL/TLS certificates can open the chances of man-in-the-middle attacks where unauthorized parties can potentially intercept, eavesdrop or alter the communication between two systems. This can lead to data breaches, loss of sensitive information and unauthorized system access.\n\n2. **Lack of Trust**: SSL/TLS certificates are often used to certify the authenticity of a website. Using a custom SSL certificate enables businesses to verify their identity to their users and builds trust. Users may not trust a website that uses a default SSL/TLS certificate, which can lead to a decrease in traffic or loss of potential customers.\n\n3. **Cost of Remediation**: If a security incident does occur due to non-compliance, the cost to investigate and remediate the issue can be high. This could include systems repair, data recovery, conducting forensic investigations, and implementing enhanced security measures.\n\n4. **Compliance Penalties**: Some industries and regions have stringent regulations around data protection and privacy. Non-compliance can lead to hefty fines, legal penalties, and even sanctions.\n\n5. **Reputation Damage**: Non-compliance could lead to reputation damage if customers and partners perceive the organization as not taking necessary measures to secure their systems and data. This can impact the organization's market position and could result in loss of business.\n\nIn summary, it's crucial to comply with this AWS control to minimize potential security risks, establish trust with users, avoid potentially high costs from security incidents, avoid non-compliance penalties, and maintain a strong business reputation."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, an e-commerce company has its website hosted on AWS and uses CloudFront for content delivery. To gain the trust of its customers, the company purchases a custom SSL/TLS certificate from a reputable certificate authority and configures it with the CloudFront distribution. This helps in enhancing the security of their customers' sensitive data such as credit card information, login credentials etc.\n\n```markdown\nIt's a good practice to use a custom SSL/TLS certificate for the following benefits:\n1. **Enhanced Security**: Custom certificates usually offer a better security level, as it includes organization's details and customers trust sites with reputable certificates.\n2. **Brand Trust**: Custom certificates allow to display company's name in the address bar, confirming the site is indeed managed by your organization. This increases customer's trust in the site.\n3. **Higher SEO Ranking**: Sites with trusted SSL certificates get a ranking boost in search results of Google.\n\nBy configuring AWS control in this manner, the company ensures that only the custom certificate is used for secure connections, not the default Cloudfront certificate. This setup helps maintain a high level of trust among its customers and uphold the company’s brand reputation, while also providing a better SEO ranking on search engines.\n```\nUsing the control in the context above assures the company that their user's data is secure and monitored, enhancing customer trust and brand reputation. It also ensures that they follow SEO best practices, which is beneficial for their business."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudfront_8",
    "Title": "8 CloudFront distributions should use SNI to serve HTTPS requests",
    "Description": "This control checks if Amazon CloudFront distributions are using a custom SSL/TLS certificate and are configured to use SNI to serve HTTPS requests. This control fails if a custom SSL/TLS certificate is associated but the SSL/TLS support method is a dedicated IP address.",
    "QueryID": "aws_cloudfront_distribution_sni_enabled",
    "DocumentURI": "policies/aws_foundational_security_cloudfront_8.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "cloudfront_8"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudFront"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control can impact an organization in several ways. \n\n1. **Increased Costs**: Using a dedicated IP address for each CloudFront distribution instead of SNI (Server Name Indication) increases costs. Each viewer that uses HTTPS must be served using a dedicated IP address, which can quickly become expensive with many viewers. \n\n2. **Limited Scalability**: The scalability of your applications can be limited. If you’re using dedicated IP addresses for a large number of distributions, you may run into IPv4 address space limitations.\n\n3. **Security Risks**: SNI is a protocol that allows multiple domain names to use SSL certificates from the same IP address. Not using this mechanism can pose potential security vulnerabilities, as traffic may be directed through less secure routes.\n\n4. **Efficiency**: Without using SNI, you won't be able to efficiently serve multiple websites over HTTPS from the same IP address. \n\n5. **Compliance and Reputation**: If the AWS configuration is part of a compliance requirement, the non-compliance could lead to penalties, audit failures, and potential reputational damage. \n\nIn summary, non-compliance with this control could lead to increased AWS costs, compromised application scalability, potential security vulnerabilities, inefficiencies and potential damage to an organization's reputation."
      ],
      "x-kaytu-usefulness-example": [
        "```\nFor instance, an online e-commerce platform uses Amazon CloudFront for content delivery. The website has high traffic and contains sensitive user data, including payment information. To ensure secure transactions and protect user data, TLS encryption is required. \n\nTo maximize the security and maintain the authenticity, the platform uses its own custom SSL/TLS certificate instead of the default AWS's one. Consequently, the platform needs to ensure that all CloudFront distributions use this custom certificate and also configure distributions to use SNI (Server Name Indication) for serving HTTPS requests. \n\nSNI helps in hosting multiple secure websites on a single IP address, thus reducing costs and managing resources efficiently. In contrast, if the platform uses a dedicated IP address instead of SNI for each secure website, it increases the magnitude of administrative effort and cost. Therefore, this control is particularly useful for the platform's tech management to ensure the configurations are set correctly, contributing to efficient functioning and secure, cost-effective operations.\n```\nSuch controls are also crucial for maintaining compliance with security standards or regulations, like PCI-DSS, which require strong encryption for sensitive data transmission."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudfront_9",
    "Title": "9 CloudFront distributions should encrypt traffic to custom origins",
    "Description": "This control checks if Amazon CloudFront distributions are encrypting traffic to custom origins. This control fails for a CloudFront distribution whose origin protocol policy allows 'http-only'. This control also fails if the distribution's origin protocol policy is 'match-viewer' while the viewer protocol policy is 'allow-all'.",
    "QueryID": "aws_cloudfront_distribution_custom_origins_encryption_in_transit_enabled",
    "DocumentURI": "policies/aws_foundational_security_cloudfront_9.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transit"
      ],
      "foundational_security_item_id": [
        "cloudfront_9"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudFront"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the AWS control that checks if Amazon CloudFront distributions are encrypting traffic to custom origins can be huge. It can lead to:\n\n1. **Security Breaches:** If the HTTP protocol is allowed, data sent between the CloudFront distributions and the origin servers are susceptible to potential eavesdropping, information disclosure, data tampering, and man-in-the-middle (MITM) attacks. If sensitive data is transmitted, this could result in its exposure, leading to reputational damage and loss of customer trust.\n\n2. **Regulatory Penalties:** If an organization operates in a regulated industry (like healthcare or finance) or handles sensitive customer data, failure to encrypt this data across all connections could lead to significant regulatory fines and penalties due to non-compliance with various laws like HIPAA, GDPR, PCI DSS, etc.\n\n3. **Loss of Confidentiality and Integrity of Data:** With 'http-only' or 'allow-all' policies, the data's confidentiality and integrity are put at risk. Attackers may intercept or manipulate the data, which can lead to incorrect data being stored, used, or analyzed.\n\n4. **Incurred Costs:** Breaches arising from unencrypted data often lead to substantial costs in forensic investigation, remediation efforts, downtime, increased insurance costs, and potential lawsuits or arbitration.\n\n5. **Loss of Business:** Damage to the firm's reputation may lead to loss of business. Customers may lose trust in the company's capacity to protect their data and subsequently decide to take their business elsewhere.\n\nIn conclusion, it is essential that proper encryption protocols be followed in CloudFront distributions to avoid these potential costs."
      ],
      "x-kaytu-usefulness-example": [
        "Here is an example of how this AWS Control can be useful:\n\nExample of AWS Control:\n\n```\n#### AWS Control Example: CloudFront Distribitions Encryption\nA software development company named 'DigiCraft' has a web application deployed on a custom origin server and they use Amazon CloudFront for content delivery and caching. To ensure secure communication between CloudFront and the origin server, the developers have configured the origin protocol policy. \n\nHowever, they are not sure if the distribution is encrypting traffic to custom origins or not. They want to prevent any possible data breach from unencrypted traffic which could expose user's sensitive data. AWS Control comes in useful here.\n\nBy applying this AWS Control, they can automatically check if the Amazon CloudFront distributions in their AWS environments are correctly configured to encrypt traffic to the custom origins. \n\nHere, this AWS Control will check the Origin Protocol Policy setting. If it allows only 'http-only', the control will fail because it's not a secured protocol. The same goes for the scenario where the Origin Protocol Policy is set to match viewer, but the viewer protocol policy is set to allow all (unsecured transfer).\n\nSo, by using this AWS Control, 'DigiCraft' can proactively ensure the required encryption for the Amazon CloudFront Distributions, adding a layer of security to their operations.\n\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudfront_10",
    "Title": "10 CloudFront distributions should not use deprecated SSL protocols between edge locations and custom origins",
    "Description": "This control checks if Amazon CloudFront distributions are using deprecated SSL protocols for HTTPS communication between CloudFront edge locations and your custom origins. This control fails if a CloudFront distribution has a CustomOriginConfig where OriginSslProtocols includes SSLv3.",
    "QueryID": "aws_cloudfront_distribution_no_deprecated_ssl_protocol",
    "DocumentURI": "policies/aws_foundational_security_cloudfront_10.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transit"
      ],
      "foundational_security_item_id": [
        "cloudfront_10"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudFront"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-Compliance to this control can have severe implications, particularly from a security and financial perspective.\n\n1. **Security Implications**: SSLv3 is a deprecated and insecure version of SSL that is susceptible to a type of attack called POODLE (Padding Oracle On Downgraded Legacy Encryption). POODLE is a man-in-the-middle vulnerability that takes advantage of the protocol's flaw. Using deprecated SSL protocols for HTTPS communication makes your cloud environments vulnerable to data breaches and spread of malware. \n\n2. **Financial Implications**: In case of a security breach, it can result in significant financial losses. The cost associated with immediate incident response, alongside potential regulator-imposed fines if data were exposed, can be significant. In addition, there are likely to be longer-term financial implications, with potential lawsuits and reputational damage leading to loss of business. \n\n3. **Compliance Implications**: Many industry guidelines and regulations require that all systems utilize strong encryption protocols. Utilizing SSLv3 could result in a failure to comply with these standards leading to further fines and sanctions. For instance, compliance standards like PCI-DSS do not allow the use of weakened or deprecated encryption protocols like SSLv3. Hence, non-compliance to this control could prevent an organization from attaining or maintaining these regulatory compliances.\n\n4. **Operational Implications**: Deprecated protocols often do not support modern and efficient cipher suites or features, which can result in poor performance for end-users and more operational overhead. \n\nTherefore, all CloudFront distributions should ensure they are not using deprecated SSL protocols like SSLv3 and instead use a more secure and modern protocol such as TLS 1.2 or TLS 1.3."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\n```\nLet's say that you have a streaming service that uses Amazon CloudFront for content delivery. Customers from all over the world use different types of devices and browsers to access your service. Security is paramount for you, but also the compatibility with older devices or browsers that might still use old SSL protocols.\n\nYou ensured that encryption in transit is enabled for any connections to or from your service. But recently, you receive a security audit report that says some of the SSL protocols that you are using are deprecated and are known to have security vulnerabilities.\n\nYou immediately update the SSL protocols for most parts of your AWS services. However, some of the CloudFront distributions still use the deprecated SSLv3 protocol due to oversight. \n\nThe AWS Control that checks if Amazon CloudFront distributions are using deprecated SSL protocols, helps you identify this issue. \n\nThe control would check all your CloudFront distributions and fails if any of them still has a CustomOriginConfig where OriginSslProtocols includes SSLv3. It helps you pinpoint which distributions are still using vulnerable protocols, and you can swiftly update them, improving the overall security stature of your service.\n\nAdditionally, continually using this control would ensure that in the future if any of the SSL protocols get deprecated or vulnerabilities are discovered, you can swiftly identify and rectify the situation.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudfront_12",
    "Title": "12 CloudFront distributions should not point to non-existent S3 origins",
    "Description": "This control checks whether Amazon CloudFront distributions are pointing to non-existent Amazon S3 origins. The control fails for a CloudFront distribution if the origin is configured to point to a non-existent bucket. This control only applies to CloudFront distributions where an S3 bucket without static website hosting is the S3 origin.",
    "QueryID": "aws_cloudfront_distribution_no_non_existent_s3_origin",
    "DocumentURI": "policies/aws_foundational_security_cloudfront_12.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_configuration"
      ],
      "foundational_security_item_id": [
        "cloudfront_12"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudFront"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "If AWS controls detect that a CloudFront distribution is pointing to a non-existent S3 bucket, the cost of non-compliance can include various aspects:\n\n- **Data Availability Issues**: If your CloudFront distribution is configured to point to a non-existent S3 bucket, your data or web content may not be reachable to end users. This may cause breakdown in processes and operations that rely on the data or services hosted on that CloudFront distribution, leading to operational disruptions and potential loss of business.\n\n- **Performance Degradation**: Typical use cases for CloudFront include serving static website content or accelerating the delivery of dynamic content. If a CloudFront distribution's origin is pointing to a non-existent S3 bucket, this could lead to performance degradation or failure to deliver content to users, affecting user experience and potentially damaging your business's reputation.\n\n- **Increased Costs**: Non-compliance may trigger AWS to re-route web requests to a backup origin or return an error, thereby increasing your costs in the form of data transfer or request costs. You might also incur costs due to time and resource spent troubleshooting and correcting the configuration error.\n\n- **Non-Compliance with Best Practices or Policies**: This configuration could also be a violation of your internal best practices or compliance requirements to ensure that services are properly configured. It might result in penalties during audits, or compromise integrity of IT governance.\n\nTo prevent such issues, it's important all CloudFront distributions are correctly configured to point to an existent and properly configured S3 bucket."
      ],
      "x-kaytu-usefulness-example": [
        "As an example, suppose an eCommerce company XYZ uses Amazon Web Services to host their online platform. Their system is configured such that they use Amazon S3 for storing product images and Amazon CloudFront to speed up the distribution of these images to their customers globally. \n\nOne day, an inexperienced staff member mistakenly delete an Amazon S3 bucket, which happen to be the origin for their Amazon CloudFront distribution. This disrupts the delivery of product images on their platform.\n\nIn this situation, the \"AWS control for checking CloudFront distributions pointing to non-existent S3 origins \" looks like this:\n\n```\nResource: \"AWS::Cloudfront::distributionId\"\nControl: \"NonExistentS3BucketOrigin\"\nDescription: \"This control checks whether Amazon CloudFront distributions are pointing to non-existent Amazon S3 origins.\"\n```\n\nApplying the control will immediately flag the issue and alert the platform admins regarding the non-existent S3 bucket. The admins can then quickly take action to fix the issue, such as creating a new S3 bucket, moving product images to the new bucket, and updating CloudFront to use the new bucket as its origin. This helps to minimize the disruption to their eCommerce platform, thereby avoiding potential profit loss and negative customer experience. Hence, the usefulness of the control is in minimizing potential disruption caused by misconfiguration between S3 and CloudFront."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elasticache_1",
    "Title": "1 ElastiCache for Redis clusters should have automatic backups scheduled",
    "Description": "This control evaluates if Amazon ElastiCache for Redis clusters have automatic backup scheduled. The control fails if the SnapshotRetentionLimit for the Redis cluster is less than 1.",
    "QueryID": "aws_elasticache_redis_cluster_automatic_backup_retention_15_days",
    "DocumentURI": "policies/aws_foundational_security_elasticache_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "backups_enabled"
      ],
      "foundational_security_item_id": [
        "elasticache_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ElastiCache"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance with this AWS control is potentially high. \n\nIn markup format:\n\n1. **Data Loss**: If automatic backups aren't scheduled and your Amazon ElastiCache for Redis clusters experiences an outage, a failure or a malicious attack, you could experience significant data loss. This could lead to irrevocable damage to your business operations and customer relationships.\n\n2. **Operational Disruption**: Without a backup, recovery in case of a disaster can take longer, causing prolonged operational disruption.\n\n3. **Financial Impact**: The cost associated with data recovery, regaining lost customers, or reputational damage can be very high.\n\n4. **Audit Failure**: Failure to maintain backups could potentially lead to audit failure, resulting in penalties and fines if the organization is obliged to comply with certain regulations (e.g. GDPR).\n\n5. **Non-Compliance with SLAs**: If you have a SLA (Service Level Agreement) with your customers which guarantees a certain level of data availability and preservation, non-compliance with this control could lead to breach of such agreements, leading to potential financial and reputational risks.\n\nTherefore, it is crucial to ensure that all Amazon ElastiCache for Redis clusters have automatic backup scheduled with a SnapshotRetentionLimit greater than or equal to 1."
      ],
      "x-kaytu-usefulness-example": [
        "Instance of Usefulness:\n\nA useful instance of this Amazon Web Services (AWS) ElastiCache control is during a disaster recovery scenario or an accidental deletion within your organization's IT environment. \n\nIf an organization has a large database stored in an Amazon ElastiCache for Redis clusters, that is critical for business operations. If an unfortunate event like a system crash, hardware failure, accidental deletion, or a cyber attack occurs, the loss of this information can severely hamper the organization's operations and productivity. \n\nBy setting the `SnapshotRetentionLimit` for more than 1, the control ensures that automatic backups of the ElastiCache for Redis clusters are scheduled and maintained. These backups can be used to restore the lost or damaged data, thereby significantly reducing the recovery time and preserving business continuity.\n\nExample: \n\nSuppose a financial trading firm uses Amazon ElastiCache for Redis to cache real-time trading data. Any failure or loss of data can result in significant monetary loss and a delay in trading decisions. By setting the `SnapshotRetentionLimit` to more than 1, this AWS control ensures that automatic backups are scheduled, providing a reliable source for data recovery. This way, the firm can quickly restore its cache cluster to a working state and minimize downtime in case of any unprecedented failures.\n\n```markdown\nResource: AWS::ElastiCache::CacheCluster\nProperties: \n  SnapshotRetentionLimit: '30'\n  CacheNodeType: cache.m4.large\n  Engine: redis\n  NumCacheNodes: '1'\n  VpcSecurityGroupIds: \n    - sg-abcd1234\n  PreferredMaintenanceWindow: sun:03:00-sun:04:00\n  Port: '11211'\n  CacheSubnetGroupName: my-subnet-group\n  CacheSecurityGroupNames: \n    - my-cache-security-group\n```\n\nIn this example, the `SnapshotRetentionLimit` is set to '30', which means that backups are retained for 30 days. This setting makes sure that the organization has sufficient time to detect any issues and has enough backups for recovering the data."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elasticache_2",
    "Title": "2 Minor version upgrades should be automatically applied to ElastiCache for Redis cache clusters",
    "Description": "This control evaluates whether ElastiCache for Redis automatically applies minor version upgrades to cache clusters. This control fails if ElastiCache for Redis cache clusters do not have minor version upgrades automatically applied.",
    "QueryID": "aws_elasticache_cluster_auto_minor_version_upgrade_enabled",
    "DocumentURI": "policies/aws_foundational_security_elasticache_2.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "vulnerability_patch_and_version_management"
      ],
      "foundational_security_item_id": [
        "elasticache_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ElastiCache"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control results in potential costs including:\n\n1. **Increased risk of security breaches:** Not applying minor version upgrades automatically can potentially expose the cache clusters to vulnerabilities. Hackers can exploit these vulnerabilities to compromise the security of the system. This can lead to data breaches, which may result in regulatory fines and reputational damage.\n\n2. **Performance issues:** Minor version upgrades often include performance improvements. Not applying these upgrades could mean your system is less efficient, which could lead to increased costs long term.\n\n3. **Compatibility issues:** Upgrades often include patches to maintain compatibility with other technologies. If minor version upgrades are not applied, this could lead to software incompatibility, causing disruptions and possibly necessitating costly emergency fixes.\n\n4. **Increased maintenance costs:** If minor version upgrades are not applied automatically, it means your IT team needs to manually handle these upgrades, which can be time-consuming and expensive. \n\nDisclaimer: While this covers some general costs, the exact cost will vary depending on the context and specific situation."
      ],
      "x-kaytu-usefulness-example": [
        "The usefulness of this AWS Control in enhancing the functionality of \"ElastiCache for Redis\" can be exemplified in the following scenario:\n\n\"A company is using AWS ElastiCache for Redis for their real-time analytics, recommendation engines, and caching. The ElastiCache for Redis needs to be up-to-date for optimum performance and to prevent potential vulnerabilities. \n\nWith the help of this AWS Control, the company can evaluate whether minor version upgrades are automatically applied to cache clusters. If not, this control will fail, thus alerting the maintenance team to take action and make sure automatic upgrades are in place. \n\nThis not only helps in maintaining a healthy tech stack but also assists in mitigating risks, enhancing security, ensuring continuous performance improvements, and uninterrupted functioning of the application.\""
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elasticache_3",
    "Title": "3 ElastiCache for Redis replication groups should have automatic failover enabled",
    "Description": "This control checks if ElastiCache for Redis replication groups have automatic failover enabled. This control fails if automatic failover isn't enabled for a Redis replication group.",
    "QueryID": "aws_elasticache_replication_group_auto_failover_enabled",
    "DocumentURI": "policies/aws_foundational_security_elasticache_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "elasticache_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ElastiCache"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control of not enabling automatic failover for Redis replication groups in ElastiCache can lead to serious repercussions. These impacts and their associated costs can be summarized in the following aspects:\n\n1. **Loss of Data and Disruptions in Service**: If automatic failover isn't enabled and the primary node fails, your application will lose its connection to the Redis replication groups. Disruptions can affect your business by causing unacceptable service delays or downtimes which can lead to customer dissatisfaction and revenue loss.\n\n2. **Increased Operational Costs**: Recovery from data loss or service disruption can lead to increased operational costs. These can include employee overtime for crisis management, expenses for data recovery, and potential hardware or software upgrades.\n\n3. **Reputation Damage**: A highly visible failure can harm a company's reputation, impacting customer trust. This can result in loss of current customers and difficulty in acquiring new ones, leading to a potential decrease in market share.\n\n4. **Regulatory Penalties**: Depending on the industry and region of operation, there may be regulatory requirements to ensure data availability and business continuity. Non-compliance with such regulations can lead to financial penalties and legal consequences.\n\n5. **Increased Risk of Data Breach**: During the recovery period from a service disruption, systems might be more vulnerable to security breaches, leading to potential data leaks and infringement of privacy laws, resulting with additional financial and reputation damages.\n\nIn conclusion, the cost of non-compliance to this AWS control can be substantial, affecting both financial and operational aspects of the business. Therefore, it is crucial for organizations to ensure automatic failover is enabled for their Redis replication groups in ElastiCache."
      ],
      "x-kaytu-usefulness-example": [
        "For example, an organization is running a critical application on AWS that relies heavily on ElastiCache for Redis for data storage and retrieval. The application must operate without any interruptions, hence, high availability of the ElastiCache nodes are critically important. \n\nIn this scenario, the specific AWS Control becomes very useful. If automatic failover is enabled for a Redis replication group, it means that if a primary node fails, AWS automatically nominates a replica to be the new primary, resulting in minimum downtime. This ensures uninterrupted performance of the application.\n\nBy using this AWS Control, the organization can constantly make sure that automatic failover is enabled for their ElastiCache Redis replication groups, thus ensuring high availability. If this control fails, it indicates that automatic failover isn't enabled for a Redis replication group, which may lead to prolonged downtime in case of a node failure. The organization can quickly react to this and enable automatic failover to ensure service continuity. \n\nTherefore, using this AWS Control provides a critical layer of protection for applications that cannot afford to have performance interruptions due to failures in ElastiCache nodes."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elasticache_4",
    "Title": "4 ElastiCache for Redis replication groups should be encrypted at rest",
    "Description": "This control checks if ElastiCache for Redis replication groups are encrypted at rest. This control fails if an ElastiCache for Redis replication group isn't encrypted at rest.",
    "QueryID": "aws_elasticache_replication_group_encryption_at_rest_enabled",
    "DocumentURI": "policies/aws_foundational_security_elasticache_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_at_rest"
      ],
      "foundational_security_item_id": [
        "elasticache_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ElastiCache"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can have both financial and reputational costs. \n\n1. **Potential Data Breaches**: Non-encrypted data at rest is vulnerable to unauthorized access which can lead to data breaches. A potential data breach could result in heavy fines depending on the nature of the data, geography, and the regulatory body in charge. Examples of such regulatory bodies are GDPR in the European Union and CCPA in California that can impose fines for data breaches. \n\n2. **Loss of Customer Trust**: In case of a data breach, the reputation of the company can be severely damaged which leads to loss of current and potential customers.\n\n3. **Non-compliance with industry regulations and standards**: If your company is under an industry that requires data to be encrypted at rest as part of its regulations like the healthcare (HIPAA) or payment card industry (PCI DSS), you can face penalties for non-compliance.\n\n4. **Potential Law Suits**: In some cases, data breaches can lead to lawsuits from the affected parties which may result in substantial financial liabilities.\n\n5. **Cost of Remediation**: If a control has failed, it needs to be fixed. The remediation cost differs based on the complexity of the solution and the resources required.\n\nIn short, not encrypting ElastiCache for Redis replication groups at rest may expose your company to substantial risk and potential financial losses. It's thus recommended to adhere to this AWS control to minimize potential risks."
      ],
      "x-kaytu-usefulness-example": [
        "```\nFor instance, a healthcare organization manages sensitive patient data in AWS, storing this information within ElastiCache for Redis replication groups. They are required to comply with data protection regulations, like HIPAA, which mandate that sensitive information must be encrypted at rest and during transit. Hence, by implementing this AWS Control, they can ensure that their data stored in ElamiCache for Redis replication groups is appropriately secured and encrypted at rest. If any of the Redis replication groups is not encrypted, the control will fail, alerting them about the potential compliance issue and data breach risk.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elasticache_5",
    "Title": "5 ElastiCache for Redis replication groups should be encrypted in transit",
    "Description": "This control checks if ElastiCache for Redis replication groups are encrypted in transit. This control fails if an ElastiCache for Redis replication group isn't encrypted in transit.",
    "QueryID": "aws_elasticache_replication_group_encryption_in_transit_enabled",
    "DocumentURI": "policies/aws_foundational_security_elasticache_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "encryption_of_data_in_transit"
      ],
      "foundational_security_item_id": [
        "elasticache_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ElastiCache"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control can have several costs:\n\n**Security Risk:** The primary cost is the security risk to your data. Redis replication groups without in-transit encryption can expose your data to possible interception during transmission, leading to confidential information leakage.\n\n**Regulatory Non-Compliance Fines:** If your organization is under regulatory rules like GDPR, HIPAA, or PCI DSS, which require data encryption during any form of transmission, non-compliance may lead to hefty fines.\n\n**Loss of Customer Trust:** If a data breach occurs because of non-encryption and it becomes public, it could lead to a significant loss of customer trust, affecting your business reputation. \n\n**Potential for Data Tampering:** Without encryption, data tampering is also a risk. Malicious entities can modify the data while in transit.\n\n**Business Continuity Threat:** In some cases, the risk may be significant enough to warrant shutting down operations until the issue is resolved, affecting business continuity.\n\nHere it is in markdown:\n\n```markdown\n1. **Security Risk**: The primary cost is the security risk to your data. Redis replication groups without in-transit encryption can expose your data to possible interception during transmission, leading to confidential information leakage.\n2. **Regulatory Non-Compliance Fines**: If your organization is under regulatory rules like GDPR, HIPAA, or PCI DSS, which require data encryption during any form of transmission, non-compliance may lead to hefty fines.\n3. **Loss of Customer Trust**: If a data breach occurs because of non-encryption and it becomes public, it could lead to a significant loss of customer trust, affecting your business reputation.\n4. **Potential for Data Tampering**: Without encryption, data tampering is also a risk. Malicious entities can modify the data while in transit.\n5. **Business Continuity Threat**: In some cases, the risk may be significant enough to warrant shutting down operations until the issue is resolved, affecting business continuity.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "For example, let's assume we have an organization that deals with sensitive information. They chose to use AWS ElastiCache for Redis to provide a real-time data store for their application. However, they need to ensure that their data is secure at all times, both at rest and during transmission between nodes. \n\nBy using the AWS control to ensure that all ElastiCache for Redis replication groups are encrypted in transit, they can help to maintain the integrity and confidentiality of their data. \n\nIf the control finds an ElastiCache for Redis replication group that isn't encrypted in transit, it would fail. This indicates that there's a breach in the organization's security policy. Thus, the control is useful in helping the organization to identify and promptly address these security gaps. \n\nFollowing is an example of the control in use (in a hypothetical pseudo-code format):\n\n```\naws:ElastiCache:ListReplicationGroups\nFor each ReplicationGroup in ListReplicationGroups\n    If ReplicationGroup.TransitEncryptionEnabled == false\n        ControlStatus = fail\n        Add ReplicationGroup to UnencryptedReplicationGroupsReport\nEnd\n```\n\nIn this illustrative example, the AWS control might scan through all ElastiCache for Redis replication groups. If it discovers a group where data isn't being encrypted in transit, the control fails and a record of the group is added to a report. This continuous checking of encryption ensures the company's sensitive data is always protected when in transit."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elasticache_6",
    "Title": "6 ElastiCache for Redis replication groups before version 6.0 should use Redis AUTH",
    "Description": "This control checks if ElastiCache for Redis replication groups have Redis AUTH enabled. The control fails for an ElastiCache for Redis replication group if the Redis version of its nodes is below 6.0 and AuthToken isn't in use.",
    "QueryID": "aws_elasticache_replication_group_redis_auth_enabled",
    "DocumentURI": "policies/aws_foundational_security_elasticache_6.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "elasticache_6"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ElastiCache"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control could lead to various costs that the organization might have to bear, these are as follows:\n\n1. **Security Issues**: The Redis AUTH Command is vital in providing an authentication level to the server. As the Redis server is unprotected by default, not complying might make your database vulnerable to unauthorized access, potentially leading to data theft, data corruption, and other security incidents.\n\n2. **Loss of Customer Trust**: The possible data leakages and breaches might result in the loss of customer trust, that might be very costly for any organization in both the short-term and long-term perspective.\n\n3. **Financial Implications**: Apart from the direct financial losses due to data breaches, the organization might also be liable to pay the hefty regulatory fines and penalties for not complying with data protection norms.\n\n4. **Operational Efficiency**: An efficient data management system is of utmost importance for smooth operations. A lack of such checks might even lead to a complete shutdown in worst-case scenarios.\n\n5. **Regulatory Issues**: Bearing non-compliance could also make the company liable to regulatory concerns which might result in legal actions beyond the financial implications.\n\n6. **Reputation Damage**: Finally, such non-compliance may lead to reputational damage that can have long-lasting impacts on the business. \n\nIt's important to ensure that adequate compliance checks and measures have been taken by organizations to prevent such scenarios."
      ],
      "x-kaytu-usefulness-example": [
        "### Scenario\n\nA company has deployed an application that relies on AWS ElastiCache to store and retrieve data. The application uses multiple Redis instances, each belonging to a Redis replication group for redundancy and improved performance. Due to the sensitive nature of some of this data, it is crucial to ensure that unauthorized access to this data is prevented.\n\nIn this context, the AWS Control that checks if ElastiCache for Redis replication groups have Redis AUTH enabled is extremely useful. \n\nFor example, the company could run a compliance check using this control:\n\n```markdown\n- Control: \"Check if ElastiCache for Redis Replication Groups have Redis AUTH enabled\"\n- Description: This control checks that all Redis replication groups in use have Redis AUTH enabled. The control fails if a Redis replication group is using a Redis version below 6.0 and if the AuthToken isn't in use.\n- Rationale: By enabling AUTH for Redis replication groups, an additional layer of security is added by requiring a password for client connections to the cache node. This helps to prevent unauthorized access to sensitive data stored in the cache.\n- Check: Retrieve the list of all Redis replication groups. For each group, check if Redis version is 6.0 or above, and if AuthToken is in use.\n- Remediation: For any Redis replication groups that failed the check, either upgrade to a Redis version that is 6.0 or above, or enable the use of AuthToken. Test to confirm that Redis AUTH is now enabled for all instances.\n```\n\nThe control would provide an alert if any Redis instances are found which don't use `AuthToken` and are not of the required version, ensuring high security for their data stored in Redis cache."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elasticache_7",
    "Title": "7 ElastiCache clusters should not use the default subnet group",
    "Description": "This control checks if ElastiCache clusters are configured with a custom subnet group. The control fails for an ElastiCache cluster if CacheSubnetGroupName has the value default.",
    "QueryID": "aws_elasticache_cluster_no_default_subnet_group",
    "DocumentURI": "policies/aws_foundational_security_elasticache_7.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "elasticache_7"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ElastiCache"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS (Amazon Web Services) Control that states ElastiCache clusters should be configured with a custom subnet group, and not use the `default` value for `CacheSubnetGroupName`, can lead to several negative impacts:\n\n1. **Security Risk**: Using the default subnet group could put your ElastiCache clusters at risk because it might be overly permissive. If an attacker gains access to your default subnet, they could have access to potentially all your resources within that subnet. Setting a custom subnet allows you to set specific, restrictive permissions, reducing the attack surface.\n\n2. **Lack of Isolation**: There won't be an appropriate level of network segmentation and isolation between your resources. This means resources that should not be publicly accessible could potentially be exposed, increasing the risk of data breach.\n\n3. **Reduced Efficiency**: Traffic flow to and from your ElastiCache may not be optimized. By configuring a custom subnet group, you have control over selecting the subnets that are close to your workload, which could improve latency and performance for cache operations.\n\n4. **Governance Issues**: It may impact your ability to organize and manage your resources effectively, which is especially important in large-scale workloads or in systems where strict compliance and governance rules require advanced configuration.\n\n5. **Cost Implications**: Resources used inefficiently could inadvertently drive up costs, such running services in regions that are more expensive or that don't optimally serve your users.\n\n6. **Audit and Compliance Issues**: Non-compliance to this control could result in failing your security audits, which may be required in regulated industries. Some regulations might have strict policies regarding network setup and using a default value might be against such policies, potentially leading to legal and financial implications.\n\nIt's recommended to remediate any non-compliance to this control by configuring your ElastiCache clusters with custom subnet groups."
      ],
      "x-kaytu-usefulness-example": [
        "```markdown\n### Example: E-commerce Website\n\nSuppose you are running an e-commerce website where it's pivotal to manage data retrieval speed for providing a seamless shopping experience. You use AWS ElastiCache to cache the the frequently accessed data and thus accelerate data retrieval.\n\nYour infrastructure comprises multiple ElastiCache clusters that are spread across various AWS regions for enhanced resilience and data locality.\n\nTo correctly route the traffic between your instances and ElastiCache clusters, you use Amazon's Virtual Private Cloud (VPC) and custom subnet groups. This setup allows your resources to have private, secured access to the caching layers and simplify network management.\n\nHowever, if a cluster was mistakenly configured with the \"default\" CacheSubnetGroupName, it would not offer the same level of network control you implemented in the custom subnet groups, potentially leading to incorrect routing and security issues.\n\nIn this case, the AWS control, which checks if ElastiCache clusters are configured with a custom subnet group, would help you identify the aforementioned problem before it causes serious implications by flagging any clusters using the \"default\" CacheSubnetGroupName as a failed control. Hence, you can swiftly rectify your setup to ensure smooth, secured operations.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_autoscaling_1",
    "Title": "1 Auto Scaling groups associated with a load balancer should use load balancer health checks",
    "Description": "This control checks whether your Auto Scaling groups that are associated with a load balancer are using Elastic Load Balancing health checks. This ensures that the group can determine an instance's health based on additional tests provided by the load balancer. Using Elastic Load Balancing health checks can help support the availability of applications that use EC2 Auto Scaling groups.",
    "QueryID": "aws_autoscaling_group_with_lb_use_health_check",
    "DocumentURI": "policies/aws_foundational_security_autoscaling_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "inventory"
      ],
      "foundational_security_item_id": [
        "autoscaling_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/AutoScaling"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance with this AWS control to use Elastic Load Balancing health checks for Auto Scaling groups associated with a load balancer can have several potential impacts:\n\n1. **Operational Risks \u0026 Outages**: Without using Elastic Load Balancing health checks, unhealthy instances in your Auto Scaling groups may not be replaced in time, leading to service disruptions and reduction in availability of your application.\n\n2. **Performance Issues**: If unhealthy instances are not removed and replaced, it can lead to degraded performance of your applications, leading to a poor user experience.\n\n3. **Increased Costs**: Without these health checks, more resources may be consumed by unhealthy instances, leading to an increase in operational costs.\n\n4. **Reduced Efficiency**: The health checks play a crucial role in efficiently scaling the resources. Non-compliance may lead to inefficient use of resources.\n\n    ```markdown\n    # AWS Control Non-compliance Costs:\n\n    - **Operational Risks \u0026 Outages:** Service disruptions and a reduction in application availability due to not replacing unhealthy instances in a timely manner.\n    \n    - **Performance Issues:** Degraded performance of applications and a potential poor user experience due to unhealthy instances not being removed and replaced.\n    \n    - **Increased Costs:** Higher operational expenses due to the consumption of more resources by unhealthy instances.\n    \n    - **Reduced Efficiency:** Inefficient use of resources because of the lack of effective scaling due to non-compliance with the use of health checks.\n    ```\n   \nIn conclusion, non-compliance with the control can lead to service disruptions, a decrease in the availability and performance of your apps, inefficient resource use, and increased operational costs."
      ],
      "x-kaytu-usefulness-example": [
        "For example, suppose you manage a web-based application that relies on instances in an EC2 Auto Scaling group to serve users. During peak traffic times, your application may spin up additional instances to handle the increased load. However, if one of those instances encounters an error and becomes unhealthy, it could disrupt the performance and availability of your application.\n\nTo mitigate this risk, you have associated your Auto Scaling group with an Elastic Load Balancer, which evenly distributes incoming application traffic across multiple EC2 instances. You have specified that the Elastic Load Balancer health checks are used to determine the health status of instances. These checks are more extensive than the default EC2 health checks, as they also test your applications' responses to ensure that they are returning the expected content.\n\nFor example, a healthy response could be a HTTP 200 status code for web servers. If the response is anything other than expected, the instance is considered unhealthy.\n\nBy integrating the Elastic Load Balancing health checks with your Auto Scaling group, AWS can detect unhealthy instances more reliably and replace them automatically. This contributes to the high availability and robustness of your web application, ensuring that users can access it at all times, regardless of the traffic volume or the health status of individual instances."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_autoscaling_2",
    "Title": "2 Amazon EC2 Auto Scaling group should cover multiple Availability Zones",
    "Description": "This control checks whether an Auto Scaling group spans multiple Availability Zones. The control fails if an Auto Scaling group does not span multiple availability zones.",
    "QueryID": "aws_autoscaling_group_multiple_az_configured",
    "DocumentURI": "policies/aws_foundational_security_autoscaling_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "autoscaling_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/AutoScaling"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to an AWS Control that checks whether an Auto Scaling group spans multiple Availability Zones can result in several consequences including:\n\n1. **Increased Downtime Risk:** If the Auto Scaling group only operates in a single availability zone, in the event of a failure in that zone, the application or service using that group would become unavailable. Non-compliance puts your system in a risky state where you are more exposed to outages.\n\n2. **Reduced System Resilience:** The use of multiple availability zones in AWS provides a high level of system resilience, as the failure of an instance in one zone can be swiftly replaced by an instance in another zone. Without this, your system loses this resilience which can cost you in terms of customer trust, system downtime and potential revenue loss.\n\n3. **Non-Compliance Penalties:** Depending on the nature of your application or service, non-compliance with this control could lead to fines, penalties, or sanctions from regulatory bodies if the practice is against conditions set by such bodies.\n\n4. **Loss of Data:** Data could be permanently lost if it's only hosted in one zone and that zone experiences a critical failure. \n\n5. **Increased Maintenance Costs:** Recovery from a zone failure where an Auto Scaling group doesn't span multiple zones can incur additional costs in system administration time, potentially higher usage fees and could require the unplanned purchase of additional resources to manage the recovery process.\n\n6. **Loss of Reputation:** Prolonged downtimes due to such non-compliance can impact a company's reputation and result in the loss of business or users.\n\nIn conclusion, this practice of not spanning an Auto Scaling group across multiple zones violates best practices for high availability and fault tolerance, which forms one of the core values of using cloud services like AWS. Hence, it is recommended to ensure compliance for robust and resilient service provision."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nConsider a global organization that uses AWS for cloud-based services and they have implemented an auto-scaling group for their web server cluster. This serves a large number of daily users. \n\nDuring peak times, demand increases causing the need for more web servers, thus enters the job of an Auto Scaling group which automatically increases the number of active servers. \n\n```xml\n\u003cAutoScalingGroup\u003e\n  \u003cname\u003eweb-server-cluster\u003c/name\u003e\n  \u003cMinSize\u003e3\u003c/MinSize\u003e\n  \u003cMaxSize\u003e10\u003c/MaxSize\u003e\n  \u003cDesiredCapacity\u003e6\u003c/DesiredCapacity\u003e\n  \u003cAvailabilityZones\u003e\n    \u003cmember\u003eus-west-2a\u003c/member\u003e\n    \u003cmember\u003eus-west-2b\u003c/member\u003e\n  \u003c/AvailabilityZones\u003e\n  ...\n\u003c/AutoScalingGroup\u003e\n```\n\nIn the example above, the web server cluster with Auto Scaling group is set to operate between a minimum of three to a maximum of ten instances. The Auto Scaling group spans both `us-west-2a` and `us-west-2b` availability zones. If, at any point, an issue arises in one of these availability zones, such as a power outage or network failure, the web servers in the failing zone can be automatically allocated to the functioning zone. \n\nThis example illustrates the importance of having an Auto Scaling group span multiple availability zones, providing redundancy and continuous functionality for the web server cluster in case of any unexpected failures or issues in a single availability zone."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_autoscaling_3",
    "Title": "3 Auto Scaling group should configure EC2 instances to require Instance Metadata Service Version 2 (IMDSv2)",
    "Description": "This control checks whether IMDSv2 is enabled on all instances launched by Amazon EC2 Auto Scaling groups. The control fails if the Instance Metadata Service (IMDS) version is not included in the launch configuration or if both IMDSv1 and IMDSv2 are enabled.",
    "QueryID": "aws_autoscaling_launch_config_requires_imdsv2",
    "DocumentURI": "policies/aws_foundational_security_autoscaling_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "autoscaling_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/AutoScaling"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can potentially result in the following costs:\n\n1. **Security Risk**: IMDSv2 enhances security as compared to IMDSv1 by preventing unauthorized interceptions. If not enabled, there might be a risk of data breaches leading to data loss, legal consequences, and reputational harm. The cost of such security incidents can potentially be huge, depending upon the specific context and data involved.\n\n2. **Compliance Costs**: For companies under regulation requiring strict security measures, not complying with this control might result in heavy fines and penalties. Some organizations may also require this control to comply with their internal security policies and standards, non-compliance of which can lead to internal disciplinary actions.\n\n3. **Operational Issues**: If both IMDSv1 and IMDSv2 are enabled, it might lead to conflicting signals and confusion. There might be an operational overhead in managing and troubleshooting the issues arising from this.\n\n4. **Future Remediation Costs**: Non-compliance to AWS security controls may require future efforts and investments to remediate the issues, move towards compliance, and upgrade to IMDSv2.\n\nIt's crucial to note that the specific cost of non-compliance can vary greatly based on factors like the organization's size, industry, regulatory environment, the kind of data they handle, among others."
      ],
      "x-kaytu-usefulness-example": [
        "As an example of the usefulness of this AWS control, consider an organization that maintains an auto-scaling web application infrastructure hosted on Amazon EC2 services. The application instances need to access IAM roles, network configuration, AMIs or user-data to ensure the expected behavior of the application. All this sensitive data is obtained through the Amazon EC2 Instance Metadata Service (IMDS). \n\nHowever, there is risk of exposing such crucial data to unauthorized entities in the event of a successful SSRF (Server Side Request Forgery) attack on one of the application instances. To mitigate this risk, Amazon introduced IMDSv2 which is much more secure due to advanced protection measures like session-oriented requests, and mandatory PUT header requests to get the session token.\n\nBy using this AWS control, the organization can ensure that all the instances launched by the Auto Scaling groups are only using the enhanced, more secure IMDSv2, significantly reducing the risk of SSRF attacks. If IMDSv1 is in use or if both versions are enabled, which poses potential security risks, the control will cause a failure, alerting the organization to take necessary actions to rectify the setup. This constant vigilance can help the firm in maintaining a stronger security posture."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_autoscaling_4",
    "Title": "4 Auto Scaling group launch configuration should not have metadata response hop limit greater than 1",
    "Description": "This control checks the number of network hops that a metadata token can travel. The control fails if the metadata response hop limit is greater than 1.",
    "QueryID": "aws_autoscaling_launch_config_hop_limit",
    "DocumentURI": "policies/aws_foundational_security_autoscaling_4.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "autoscaling_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/AutoScaling"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Network hops count the number of devices like routers through which data has to pass between its source and destination. In AWS, this control is a measure to ensure that metadata responds within a local network environment and does not leave this specified environment.\n\nNon-compliance with this control can lead to several potential costs, challenges, or risks:\n\n1. **Security Risks:** If the metadata token travels beyond the hop limit of 1, it increases the chances of potential interception, misuse, or unauthorized access of sensitive metadata by malicious entities during transit. Metadata can contain important details such as usernames, passwords, API keys, etc., so any breach could lead to compromised security.\n\n   ```\n   Potential Costs: Damage to company reputation, financial loss due to breach, loss of client's trust, potential lawsuits or fines due to non-compliance to data protection laws if sensitive data was exposed.\n   ```\n\n2. **Performance Degradation:** The more hops data must traverse, the more latency it can introduce, potentially affecting the performance of your application. \n\n   ```\n   Potential Costs: Decreased user satisfaction, potential loss of customers, affects on SEO rankings for web applications due to slow load times.\n   ```\n\n3. **Compliance Issues:** For organizations governed by compliance or legal requirements about data locality and secure data transfer (like GDPR or HIPAA), allowing metadata to traverse more paths can lead to violation of these requirements.\n\n   ```\n   Potential Costs: Legal penalties or fines due to non-compliance, loss of business licenses, potential civil suits.\n   ```\n\n4. **Increased Debugging Complexity:** When metadata makes unnecessary hops, it can be harder to trace and debug network issues.\n\n   ```\n   Potential Costs: Increased expenditure on IT for debugging, more time invested leads to slower issue resolution, potential downtimes impacting business operations.\n   ```\n\nGiven these potential costs, it's vital to remain compliant with AWS's control policy regarding metadata token travel."
      ],
      "x-kaytu-usefulness-example": [
        "AWS control for checking the number of network hops a metadata token can travel is useful in securing Amazon EC2 and Amazon Elastic Block Store (EBS) resources. \n\n```\nExample: \n\nAn organization dealing with sensitive customer data must ensure that data is not maliciously exploited. One way to do this is by ensuring tokens do not travel far, which increases the risk of interception and misuse. With this control, the metadata response hop limit is set to 1. If it exceeds this limit, it indicates a potential security risk, prompting the control to fail and alert the security team. This way, adherence to the security best practices and compliance regulations is assured, strengthening the organization's overall security posture.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_autoscaling_5",
    "Title": "5 Amazon EC2 instances launched using Auto Scaling group launch configurations should not have Public IP addresses",
    "Description": "This control checks whether an Auto Scaling groups associated launch configuration assigns a public IP address to the group's instances.",
    "QueryID": "aws_autoscaling_launch_config_public_ip_disabled",
    "DocumentURI": "policies/aws_foundational_security_autoscaling_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "autoscaling_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/AutoScaling"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control could be significant and can affect both security and operational aspects of an organization.\n\n### Security Risks\n\n1. **Unauthorized Access**: If Auto Scaling groups assign public IP addresses to instances, this could potentially expose your instances to unauthorized access or malicious activities like hacking, Distributed Denial of Service (DDoS) attacks, data breaches, etc.\n\n2. **Non-compliance to regulations**: Certain sensitive industries like healthcare, banking, etc, have stringent regulations around data privacy and security (like PCI-DSS, GDPR, etc.). Assigning public IPs could potentially create a point of non-compliance, and breach of such compliance could lead to hefty penalties.\n\n### Operational Risks\n\n1. **Unexpected costs**: Data transfer costs between the Internet and AWS can be expensive. By having public-facing instances, one could inadvertently increase the amount of outbound data, thereby incurring unexpected costs.\n\n2. **Reduced performance**: In case of a DDoS attack or a high number of invalid access requests, the recall performance of your AWS service can reduce drastically leading to service disruption and poor user experience.\n\nTo mitigate these risks, it's recommended to limit public IP address assignments only to necessary instances, apply Security Groups and Network Access Control List (NACL) rules, and segregate the network design between public and private subnets appropriately."
      ],
      "x-kaytu-usefulness-example": [
        "\u003e `Control: AWS::AutoScaling::AutoScalingGroup`\n\nThe following example demonstrates an instance of usefulness for the AWS control that checks whether an AutoScaling group's associated launch configuration assigns a public IP address to the group's instances.\n\nSuppose you're managing a high-traffic web application that requires load balancing and automatic scaling of resources on AWS. For security and privacy concerns, you don't want your Auto Scaling groups' instances to be directly accessible from the public internet. \n\nFor this scenario, you might want to ensure that the instances in the Auto Scaling group aren't assigned public IP addresses.\n\nHere is the AWS cloud formation template in YAML format:\n\n```yaml\nResources: \n  MyAutoScalingGroup: \n    Type: \"AWS::AutoScaling::AutoScalingGroup\"\n    Properties: \n      AvailabilityZones: \n        - us-west-2\n      LaunchConfigurationName:  \n        Ref: \"MyLaunchConfiguration\"\n      MinSize: \"1\"\n      MaxSize: \"5\"   \n      DesiredCapacity: \"3\"\n  MyLaunchConfiguration: \n    Type: \"AWS::AutoScaling::LaunchConfiguration\"\n    Properties: \n      AssociatePublicIpAddress: \"false\"\n      ImageId: \"ami-0773391ae604c49a4\"  \n      InstanceType: \"t2.micro\" \n```\n\nIn the pulumi Script\n\n```\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.autoscaling.Group(\"example\", {desiredCapacity: 5, maxSize: 10, minSize: 5});\nconst associatedPublicIp = aws.ec2.getLaunchConfiguration({\n    name: example.launchConfiguration,\n}, { async: true }).then(associatedPublicIp =\u003e associatedPublicIp.associatePublicIpAddress);\n\nconsole.log(\"The associated public IP is \"+associatedPublicIp)\n```\n\nIn the script above, the `AssociatePublicIpAddress: \"false\"` script ensures that the attribute for assigning a public IP address to each instance in the Auto Scaling group is set to false.\n\nSo, if there's any configuration error or oversight, this control will help you detect it and avoid potential data leaks or attacks on your instances. This way, you can enhance the security of your application in AWS."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_autoscaling_6",
    "Title": "6 Auto Scaling groups should use multiple instance types in multiple Availability Zones",
    "Description": "This control checks whether an Amazon EC2 Auto Scaling group uses multiple instance types. The control fails if the Auto Scaling group has only one instance type defined.",
    "QueryID": "aws_autoscaling_use_multiple_instance_types_in_multiple_az",
    "DocumentURI": "policies/aws_foundational_security_autoscaling_6.md",
    "ManualVerification": false,
    "Severity": "Low",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "high_availability"
      ],
      "foundational_security_item_id": [
        "autoscaling_6"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/AutoScaling"
      ],
      "x-kaytu-explanation": [
        "Low"
      ],
      "x-kaytu-noncompliance-cost": [
        "The AWS Control refers to the need for leveraging diversified instance types in an Amazon EC2 Auto Scaling group. Non-compliance to this control, where an Auto Scaling group only holds one instance type, can cause several potential issues, which effectively incur a cost. \n\n1. **Limited scalability**: If your applications experience an upswing in demand, having a single instance type might limit the performance and scalability opportunities. Amazon EC2 offers multiple instance types to cater to varying workloads and capacity needs. Not making use of this could limit your application's capacity to scale up efficiently, hence slowing down performance.\n\n2. **Potential resource wastage**: Amazon EC2 instances come in many types and sizes, each suited to different types of workloads. If you're only using one instance type, that may not be the most economical option for all your services, as some might need less computing power and others might need more. Using just one type can lead to wasting expensive resources where cheaper instances could be sufficient.\n\n3. **Risk of Interruption**: AWS offers purchasing options like Spot Instances which allow customers to take advantage of unused EC2 capacity in AWS Cloud. If you only use one instance type and that instance becomes unavailable or its spot price increases, your application can be interrupted. By diversifying instances, your Auto Scaling group can choose the best types and pricing models according to availability and cost.\n\n4. **Lack of Resiliency**: Single instance type might lack the required resiliency. By using multiple instance types, you can achieve better fault tolerance across different types and families, ensuring that if one instance type has an issue, your applications won't be affected as it can automatically be shifted to another instance type.\n\nIn terms of cost, it's hard to quantify without concrete case studies or scenarios, but these points above highlight the possible business risks and potential financial implications due to increased resource wastage, sub-optimal performance, and reduced resiliency."
      ],
      "x-kaytu-usefulness-example": [
        "```\nConsider a global e-commerce company that has a large audience and experiences periods of massive traffic spikes during sales events. The company uses an Amazon EC2 Auto Scaling group to manage the resources needed for its website. \n\nThe Auto Scaling policy is such that during traffic spikes, the system automatically increases the number of EC2 instances to handle the increased load, and decreases it during normal traffic conditions. \n\nIf they are using only one instance type and that instance type runs into availability issues in a specific region during the peak time, their website could potentially go down due to lack of necessary resources.\n\nTo avoid this, they could use multiple instance types in their Auto Scaling group. These instance types could be distributed across multiple AWS regions and availability zones. This can provide a fail-safe against any availability issues, as AWS can auto scale using the different instance types available.\n\nTherefore, the AWS Control that checks whether an Amazon EC2 Auto Scaling group uses multiple instances types is useful for this e-commerce company. It ensures that the company uses more than one EC2 instance type, thereby avoiding potential downtimes and improving business continuity.\n\nFor instance, if the initial instance type was 't2.micro', they could add 't2.small' and 't2.medium' as additional instance types in their Auto Scaling group. As a result, if 't2.micro' instances run out in any region or availability zone, the system will automatically start using 't2.small' or 't2.medium' instances, ensuring the website remains up and running.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_autoscaling_9",
    "Title": "9 EC2 Auto Scaling groups should use EC2 launch templates",
    "Description": "This control checks whether an Amazon EC2 Auto Scaling group is created from an EC2 launch template. This control fails if an Amazon EC2 Auto Scaling group is not created with a launch template or if a launch template is not specified in a mixed instances policy.",
    "QueryID": "aws_autoscaling_group_uses_ec2_launch_template",
    "DocumentURI": "policies/aws_foundational_security_autoscaling_9.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "resource_configuration"
      ],
      "foundational_security_item_id": [
        "autoscaling_9"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/AutoScaling"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control of using EC2 launch templates with Auto Scaling groups can lead to several risks and costs:\n\n1. **Inconsistent configurations**: Without using launch templates, you risk launching instances with inconsistent configurations. This could lead to application errors and operational issues, which might lead to an increased time and financial cost to diagnose and resolve. \n\n2. **Inefficient resource management:** Launch templates enable the automatic management of instance types, purchase options, and distribution. Not using them can lead to inefficient usage of resources, potential excess costs, and management overheads.\n\n3. **Reduced scalability**: Auto Scaling groups with launch templates help in maintaining the desired capacity to match your needs. Failure to implement this could lead to difficulties in scaling, increased costs, or insufficient resources during high demand periods.\n\n4. **Security vulnerabilities**: Launch templates ensure that specific security settings, like IAM roles, security groups, and key pairs, are consistently applied to all instances in the Auto Scaling group. Without them, you could introduce security holes, which may result in potential violation of compliance requirements and financial penalties besides increased risk of security breaches.\n\n5. **Increased costs**: Using mixed instances policies with launch templates can help optimize costs by using multiple instance types and purchase options. Non-compliance can lead to higher operational costs.\n\n6. **Operational Disruptions**: Non-compliance may lead to operational disruptions due to accidental deletion or modification of configurations, which may ultimately impact business continuity and lead to financial penalties due to service level agreement (SLA) violations.\n\nTo summarize, the cost of non-compliance can manifest in the form of financial penalties, increased operations and security management overheads, potential security breaches, and inefficient resource utilization."
      ],
      "x-kaytu-usefulness-example": [
        "Here's an example:\n\nLet's consider a scenario where you have a web app that experiences a significant fluctuation in traffic. In order to handle varying loads efficiently and maintain high availability, you opt to use Amazon EC2 Auto Scaling.\n\nHowever, you need to ensure that all your EC2 instances are uniformly configured to minimize inconsistencies and troubleshooting complications. As such, you decide to implement a Launch Template. This will provide a configuration template for your instances, specifying things like the instance type, security groups, and block device mapping, amongst other settings.\n\nBy enforcing this AWS control, you ensure that all of your EC2 instances within the Auto Scaling group are created from this uniform template. This then simplifies management and enhances consistency across all your instances. This further ensures that if a mixed instances policy is used, a launch template must be specified, maintaining a standardized approach to instance configuration.\n\nThis control is beneficial in ensuring consistency, efficient troubleshooting and management, and alignment with best practice governance of AWS resources. It flags any instances not using the launch template as failed and thereby not adhering to the standards set in your organization."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_secretsmanager_1",
    "Title": "1 Secrets Manager secrets should have automatic rotation enabled",
    "Description": "This control checks whether a secret stored in AWS Secrets Manager is configured with automatic rotation. Secrets Manager helps you improve the security posture of your organization. Secrets include database credentials, passwords, and third-party API keys. You can use Secrets Manager to store secrets centrally, encrypt secrets automatically, control access to secrets, and rotate secrets safely and automatically.",
    "QueryID": "aws_secretsmanager_secret_automatic_rotation_enabled",
    "DocumentURI": "policies/aws_foundational_security_secretsmanager_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_development"
      ],
      "foundational_security_item_id": [
        "secretsmanager_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SecretsManager"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control of automatically rotating secrets stored in AWS Secrets Manager can result in multiple costs for an organization:\n\n1. Security Costs:\n   - If secrets are not rotated automatically, the chances for those secrets to be compromised or exposed rise significantly over time. An unrotated secret provides a longer window of opportunity for unauthorized users, including malicious actors, to access and use the secret. \n\n2. Financial Costs:\n   - If a secret is compromised, potential data breaches can result in hefty fines, not to mention the financial losses due to malicious activities.\n\n3. Compliance Costs:\n   - The organization might be violating compliance regulations like GDPR, HIPAA, SOX, etc., which require PII and other sensitive data to be protected, resulting in potential penalties.\n\n4. Operational Costs:\n   - Manually rotating secrets or in response to a security incident would take up IT resources' time and focus away from their core tasks.\n\n5. Reputational Costs:\n   - In case of a data breach due to unrotated secrets, the brand reputation could take a hit, which could seriously affect the future business opportunities and customer trust. \n\nTherefore, by ensuring automatic rotation of secrets, an organization can minimize the risk of unauthorized access, comply with regulatory requirements and improve the overall security posture."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, take an online e-commerce platform that uses the AWS platform for handling its backend operations. Each aspect of its infrastructure, be it user administration, order management, inventory control, or payment processing, requires different credentials for different services. Also, there might be third-party APIs for payment gateways or delivery logistics, which further require secure credentials.\n\nNow, imagine a scenario where the platform's user administration credentials are compromised. If the system is not configured to rotate these keys automatically, it could lead to critical data breaches and severe damage to the business. \n\nBy using the AWS Secrets Manager, these important credentials are stored securely with automatic encryption. This Control, which checks whether a secret stored in Secrets Manager is configured with automatic rotation, adds an extra layer of security. It ensures that even if these secrets somehow get leaked, they would be rotated automatically according to the schedule you defined, making the exposed secrets obsolete.\n\nHence, this control is highly useful for maintaining the security and integrity of the e-commerce platform's operations, keeping their secrets safe, and mitigating the after-effects of any potential security breaches."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_secretsmanager_2",
    "Title": "2 Secrets Manager secrets configured with automatic rotation should rotate successfully",
    "Description": "This control checks whether an AWS Secrets Manager secret rotated successfully based on the rotation schedule. The control fails if RotationOccurringAsScheduled is false. The control does not evaluate secrets that do not have rotation configured.",
    "QueryID": "aws_secretsmanager_secret_rotated_as_scheduled",
    "DocumentURI": "policies/aws_foundational_security_secretsmanager_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_development"
      ],
      "foundational_security_item_id": [
        "secretsmanager_2"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SecretsManager"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control comes in two major forms: \n\n1. **Security Risk**: If secrets are not rotated as scheduled, it increases the risk of unauthorized users gaining access over time. It's considered best practice to regularly change secrets (such as passwords, API keys etc.) to reduce the risk of these secrets getting compromised. Non-compliance could potentially lead to breaches, unauthorized access to sensitive information, and disruption to your operations or services.\n\n2. **Financial Cost**: In case of a breach due to non-rotation of secrets, the financial implications can be significant. Costs could include those associated with interruption to normal business operations, investigations, remediations, potential fines from regulatory bodies for non-compliance with data protection laws, not to mention reputational damage which could affect future business.\n\nTherefore, this control is crucial in maintaining a secure and trusted AWS environment. Non-compliance to it not only jeopardizes the data and resources in the AWS environment, but could also lead to substantial financial loss."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, you are operating a software company which deals with sensitive user data. Your system infrastructure uses AWS cloud services. Your software system uses Secrets Manager which holds crucial data like API keys, passwords, and database credentials. To fortify the security of these secrets, you have configured a rotation policy. \n\nHowever, unexpected errors may halt the rotation process. If rotation does not occur as scheduled, it may lead to potential security vulnerabilities - outdated secrets can be exploited by rogue elements. \n\nThis is where AWS Control comes in - it automatically checks whether the secrets rotation occurred successfully, based on the rotation schedule you've defined. If the RotationOccurringAsScheduled is false, the control fails and you will be notified. This allows you to take the necessary steps to address the issue, ensuring the rotation policy is effectively upheld, and your sensitive data remains secure."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_secretsmanager_3",
    "Title": "3 Remove unused Secrets Manager secrets",
    "Description": "This control checks whether your secrets have been accessed within a specified number of days. The default value is 90 days. If a secret was accessed even once within the defined number of days, this control fails.",
    "QueryID": "aws_secretsmanager_secret_last_used_1_day",
    "DocumentURI": "policies/aws_foundational_security_secretsmanager_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "secretsmanager_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SecretsManager"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can be classified into financial cost, reputational cost and business continuity cost.\n\n1. **Financial Cost:** Non-compliance could lead to monetary fines or penalties imposed by regulatory authorities. Additionally, any data breach resulting from unsecured secrets could lead to financial losses due to theft of sensitive financial data. The organization might also need to engage cybersecurity services for incident management and remediation which can be costly.\n\n2. **Reputational Cost:** If an unsecured secret leads to a data breach, not only can it lead to financial loss but can also damage the organization's reputation significantly. Customers are likely to lose trust in a company if their data is compromised, and negative press coverage can also impact the organization's public standing, which can result in loss of business, decreased revenue, and loss of current and potential customers.\n\n3. **Operational and Business Continuity Cost:** Failure to comply with this control could lead to downtime of services if the exposed secrets are exploited, causing disruptions to normal operations. This could result in loss of potential revenue, decrease in customer satisfaction or potential termination of contracts if Service Level Agreements (SLAs) are not met.\n\nHence, it's imperative to ensure all secrets are accessed securely and within the specified number of days to prevent potential data breaches, avoid fines and penalties, and maintain the trust of customers and stakeholders."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nConsider a scenario where your company is managing sensitive client data and its usage through AWS Secrets Manager. AWS Secrets Manager helps to protect access to applications, services, and IT resources. \n\nEnsuring the secrets or access credentials haven't been unnecessarily accessed or misused is crucial for maintaining data security and integrity. \n\nBy applying the AWS Control, '[check-secrets-last-accessed](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-controls.html#securityhub-controls-aws-foundational-secrets.last-accesed)', a measure can be put in place to keep an eye on any secret that was accessed within a given timeframe, default is 90 days.\n\nIf any secret or credential was accessed within the 90 day period, this control signals a fail. For instance, if an outdated service or a former employee accessed the secret credentials, the control would detect it and raise a flag for review. \n\nThis function is especially useful ensuring there is no unauthorized access to your AWS secrets and mitigating potential security risks, making it an essential part of your AWS security and compliance measures."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_secretsmanager_4",
    "Title": "4 Secrets Manager secrets should be rotated within a specified number of days",
    "Description": "This control checks whether your secrets have been rotated at least once within 90 days. Rotating secrets can help you to reduce the risk of an unauthorized use of your secrets in your AWS account. Examples include database credentials, passwords, third-party API keys, and even arbitrary text. If you do not change your secrets for a long period of time, the secrets are more likely to be compromised.",
    "QueryID": "aws_secretsmanager_secret_automatic_rotation_lambda_enabled",
    "DocumentURI": "policies/aws_foundational_security_secretsmanager_4.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_access_management"
      ],
      "foundational_security_item_id": [
        "secretsmanager_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/SecretsManager"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the AWS control that ensures secrets have been rotated at least once within 90 days could be potentially enormous depending on the nature of the compromised data and the damage inflicted by unauthorized access.\n\n1. **Data Breach**: If secrets like database credentials are compromised, sensitive information stored in those databases could be leaked. This may include customer data, proprietary business data, confidential information, etc. This eventually leads to loss of trust by customers or partners, damage to business reputation, and possible lawsuits.\n\n2. **Financial Loss**: Unauthorized usage of third-party API keys could result in hefty charges if they are used to access premium services or to perform operations that have associated costs.\n\n3. **Regulatory Fines and Penalties**: Many industries are subject to regulations that mandate certain standards of data protection. Non-compliance with these regulations and subsequent data breaches could result in significant fines and penalties.\n\n4. **Business Disruption**: If secrets are compromised and misused, this can lead to disruption of services leading to loss of business.\n\nIn simple terms, non-compliance to this control could create an open door for unauthorized individuals to gain access to highly sensitive and critical information, which when misused can severely affect the organization's finance, reputation, and operations. Rotation of secrets within the recommended time frame is a key measure to avoid such potential threats."
      ],
      "x-kaytu-usefulness-example": [
        "For example, let's consider the case of a company that heavily uses AWS services. The company has various databases in RDS, multiple instances running in EC2, and uses API gateway to manage APIs. They also integrate third-party services that require API keys.\n\nOn day 1, they initialize all their services with specific secrets. If they set the secrets and forget about them, there is a possibility for these secrets to be compromised over time due to repeated usage, potential system vulnerabilities, or even from within the organization (an unhappy employee might misuse it).\n\nNow, imagine that there's a hacker who has somehow got access to these secrets. The hacker can manipulate the databases, tamper with the company's infrastructure, and use their third-party service inappropriately, which can lead to massive data loss, financial damage, and reputation harm.\n\nIf the company had a system in place to rotate secrets at least once every 90 days, any compromised secret would only be valid for a maximum of 90 days. After that period, even if the hacker tries to use the secrets, they wouldn't work, because they've already been rotated. This control hence acts as a crucial aspect of security management, minimising potential damage.\n\nThis example instance demonstrates how checking whether your secrets have been rotated at least once within 90 days can be extremely useful in maintaining the integrity, confidentiality, and security of your AWS account and resources. Additionally, it also helps in meeting compliance requirements that mandate password or secret rotations within a certain time period."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_cloudformation_1",
    "Title": "1 CloudFormation stacks should be integrated with Simple Notification Service (SNS)",
    "Description": "This control checks whether an Amazon Simple Notification Service notification is integrated with a CloudFormation stack. The control fails for a CloudFormation stack if there is no SNS notification associated with it.",
    "QueryID": "aws_cloudformation_stack_notifications_enabled",
    "DocumentURI": "policies/aws_foundational_security_cloudformation_1.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "application_monitoring"
      ],
      "foundational_security_item_id": [
        "cloudformation_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudFormation"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control could lead to several potential costs or risks:\n\n1. **Loss of Real-Time Visibility:** Without integrating Amazon Simple Notification Service (SNS) with your CloudFormation stack, you miss out on establishment of communication between AWS services. This may limit your ability to receive real-time updates about your stack operations, leading to reduced visibility and potential delays in noticing and addressing issues.\n\n2. **Delayed Troubleshooting:** When an issue arises, it can significantly hinder your troubleshooting efforts. You might not become aware of a problem until it has already caused damage, which could result in longer system downtime and eventually higher costs to get back to normal operations.\n\n3. **Increased Risk of Failure:** AWS SNS service can deliver notifications about your CloudFormation stack events. When not integrated, you won't receive this information, increasing the risks of undetected failures.\n\n4. **Service Disruption:** Critical operations can be disrupted if SNS notifications are not triggered for CloudFormation stacks. This could result in business interruptions, affecting customer satisfaction, and can potentially have financial repercussions.\n\n5. **Decreased Operational Efficiency:** AWS SNS can help in seamless automation of operations and response to environment changes or errors, hence increasing operational efficiency. Non-compliance can lead to inefficiencies in operations, which might end up costing time and resources.\n\n6. **Compliance Violation Penalty:** Non-compliance to this control might also violate regulations or internal policies that could result in penalties, depending on the regulatory regime in place for your industry or organization. \n\nIn conclusion, non-compliance to this control could impact operational efficiency, increase risk exposure and possibly lead to regulatory penalties."
      ],
      "x-kaytu-usefulness-example": [
        "Example instance:\n\nConsider a scenario where a company uses AWS CloudFormation to manage and provision their AWS infrastructure. They have a complex stack of services running concurrently and constantly modifying their stack based on evolving requirements. \n\nWithout monitoring, it would be challenging to keep track of all changes and know exactly when something happens, such as stack creation, update or deletion. \n\nBy enabling an Amazon Simple Notification Service (SNS) notification to a CloudFormation stack, the control can provide real-time notifications about these activities. This would help to facilitate efficient tracking, managing, and debugging systems.\n\nIn such cases, if a CloudFormation stack does not have any SNS notification associated with it, it would fail according to this control. This would alert the operations team of the missing connection between SNS and CloudFormation. Thus, the AWS control is crucial to ensure the robustness and resilience of the company's AWS infrastructure.\n\nUsefulness:\n\nThe control helps to ensure the necessary notifications are in place for critical events in the deployment and lifecycle of CloudFormation stacks, thereby contributing to the overall system reliability and operational awareness. Moreover, the AWS Control is also beneficial in maintaining compliance with organizational policies or industry standards related to system monitoring and responsiveness."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_networkfirewall_3",
    "Title": "3 Network Firewall policies should have at least one rule group associated",
    "Description": "This control checks whether a Network Firewall policy has any stateful or stateless rule groups associated. The control fails if stateless or stateful rule groups are not assigned.",
    "QueryID": "aws_networkfirewall_firewall_policy_rule_group_not_empty",
    "DocumentURI": "policies/aws_foundational_security_networkfirewall_3.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "networkfirewall_3"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/NetworkFirewall"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "If an AWS Control checks that a Network Firewall policy has any stateful or stateless rule groups associated, and the control fails indicating that these rule groups are not assigned, the implications may include:\n\n1. **Security Risks:** Stateless or stateful rule groups in AWS network firewall policy offer specific security configurations that monitor and control incoming and outgoing network traffic based on predetermined security rules. Therefore, if these rule groups are not configured correctly or are absent, it could potentially expose the associated resources and data to various security threats, including unauthorized access, data breaches, and other types of cyberattacks.\n\n2. **Data Compliance Issues:** Many industries are subject to regulations that mandate the protection of data through adequate network security measures. If an auditable control like this fails, it may mean the organization is not compliant with relevant data protection laws, which may result in fines, sanctions, or even legal action.\n\n3. **Operational Disruptions:** If network traffic isn't correctly managed due to the absence of these rule groups, it can lead to operational issues. For example, legitimate traffic may be blocked, causing disruption in services, impacting business operations and causing loss of productivity.\n\n4. **Reputation Damage:** Any security breach resulting from inadequate firewall configurations may lead to loss of customer trust and negatively impact an organization's reputation, which could have long term effects on business prospects. \n\n5. **Financial Impact:** The combination of potential fines, remediation costs, and business losses due to operational disruption or loss of customers makes non-compliance a costly mistake."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, envision running a medium-sized tech company with several projects hosted on AWS. Your organization constantly uses different AWS services, including AWS Network Firewall to safeguard your critical infrastructure. To reduce vulnerabilities and protect against various types of cyber threats, it's imperative to establish rules that control and manage incoming and outgoing network traffic. However, there could be scenarios where a network firewall policy is created but rule groups aren't assigned due to oversight or errors. \n\nThis AWS Control would be beneficial in identifying such situations. When it checks if a Network Firewall policy has any stateful or stateless rule groups affiliated, it will fail if they aren't assigned. This would alert your IT team that a specific firewall policy doesn't have rule groups associated. As a result, they could promptly take action, reducing the gap in your defense strategy and improving your overall security posture. This AWS Control, therefore, plays a crucial role in maintaining the integrity of the network firewall rules, ensuring they are appropriately configured, and makes the task of auditing and checking for errors easier, while maintaining data security and compliance."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_networkfirewall_4",
    "Title": "4 The default stateless action for Network Firewall policies should be drop or forward for full packets",
    "Description": "A firewall policy defines how your firewall monitors and handles traffic in Amazon VPC. You configure stateless and stateful rule groups to filter packets and traffic flows. Defaulting to Pass can allow unintended traffic.",
    "QueryID": "aws_networkfirewall_firewall_policy_default_stateless_action_check_full_packets",
    "DocumentURI": "policies/aws_foundational_security_networkfirewall_4.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "networkfirewall_4"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/NetworkFirewall"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control relates to the security of your Amazon VPC (Virtual Private Cloud), particularly regarding the handling of its traffic by your firewall policy. It involves how your firewall scrutinizes and manages incoming and outgoing traffic. By using stateless and stateful rule groups, you can filter packets and control traffic flows.\n\nDefaulting to Pass can result in the following costs:\n\n1. **Security Risks**: Allowing unintended traffic increases the potential for security breaches such as DDoS attacks and could enable unauthorized access to sensitive data. This can lead to data loss or theft.\n\n2. **Regulatory Non-compliance**: For industries that deal with sensitive information such as healthcare, finance and others that have strict regulatory standards like HIPAA or PCI DSS, non-compliance with these regulations due to a security breach can lead to substantial fines and legal action.\n\n3. **Reputational Damage**: In the event of a data breach, the damage to your business's reputation could be significant, impacting customer trust and potentially leading to loss of business.\n\n4. **Incident Response Costs**: If a security incident occurs, the associated costs to identify, contain, and remediate the issue can be significant. This includes the potential need for external consultants or security experts.\n\n5. **Potential Data Loss**: Unfiltered traffic can lead to data breaches and loss of valuable business information.\n\nAs such, compliance with the AWS control on firewall policies is crucial to ensuring adequate security for traffic in your Amazon VPC. It's recommended that the default be set to Deny or Drop, ensuring only explicitly allowed traffic can pass. \n\n\u003e **Note:** This is a high-level overview of potential costs and doesn't include all potential scenarios or factors that might influence these costs. It's always recommended to consult with a security professional or engage in a thorough risk assessment to understand the full implications for your specific situation."
      ],
      "x-kaytu-usefulness-example": [
        "Suppose you are running a multi-tiered web application in your VPC, with web servers on the public subnet and your database servers on the private subnet. You only want your web servers to be able to access your database servers, and all other connections should be denied. \n\nHere, Firewall Policy can be a useful AWS control.\n\n```markup\nnamespace AWS/FirewallPolicy\nresources\n  - name: firewall-policy-web-to-db-access\n    properties\n      StatefulRuleGroupReferences: \n        - ResourceArn: arn:aws:ec2:us-west-2:123456789012:subnet/subnet-123abc45\n      StatelessRulesAndCustomActions:\n        StatelessRules:\n          - Priority: 1\n            RuleGroupReference:\n              ResourceArn: arn:aws:ec2:us-west-2:123456789012:subnet/subnet-abcde123\n        CustomActions:\n          - CustomActionName: CustomAllowAction\n            ActionDefinition:\n              PublishMetricAction:\n                Dimensions:\n                  - Value: MyDimensionValue\nDefaultActions:\n  - Type: FORWARD\n    ForwardConfig:\n      ForwardTargetConfigs:\n        - NetworkLoadBalancerArn: arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/net/my-vpc-alb/123abc45ef678\n      Status: ENABLED\n```\n\nIn the above implementation, the firewall policy is designed to allow only specified traffic (webserver to database) and deny all other traffic by default. Custom metrics are also being published for any custom actions taken by the firewall. The potential for unintentional traffic leakage is mitigated since the default behavior isn't set to `PASS`. This ensures that your database servers are protected from unauthorized access, and only your web servers can communicate with them, thus providing a clear instance of the utility and importance of an AWS firewall policy."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_networkfirewall_5",
    "Title": "5 The default stateless action for Network Firewall policies should be drop or forward for fragmented packets",
    "Description": "This control checks whether the default stateless action for fragmented packets for a Network Firewall policy is drop or forward. The control passes if Drop or Forward is selected, and fails if Pass is selected.",
    "QueryID": "aws_networkfirewall_firewall_policy_default_stateless_action_check_fragmented_packets",
    "DocumentURI": "policies/aws_foundational_security_networkfirewall_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "networkfirewall_5"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/NetworkFirewall"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control could lead to potential security risks and vulnerabilities. Here is the cost of non-compliance explained in markup format:\n\n1. **Security Risks**: If the default stateless action for fragmented packets is set to 'Pass', it means these packets are allowed through the firewall without any inspection. These fragmented packets could potentially hold malicious content or be part of a cyber attack (like a DDoS attack). Hence non-compliance could lead to substantial loss of sensitive data or system damage.\n\n2. **Compliance Violations**: Depending on the nature of your business and the market you are operating in, a strong security policy that complies with international standards might be needed. Non-compliance with these controls could lead to violations that could attract heavy fines and legal consequences.\n\n3. **Damage to Reputation**: In case of a security breach, the reputation of the organization could be seriously hurt. Customers' trust could be severely affected which might result in loss of business in both short and long term.\n\n4. **Financial Loss**: In case of a severe security breach, the organization could face financial loss. This could be a direct result of cyber-attacks (like ransomware) or indirect - due to loss of business or heavy fines due to compliance violations.\n\nPorper adherence to this AWS Control can avoid such costly consequences and secure your AWS environment."
      ],
      "x-kaytu-usefulness-example": [
        "For a bank transacting online, security of the data is of utmost importance. They use AWS network services for their operations. This control would ensure that any fragmented packets (which could potentially contain harmful data or serve as a loophole for cyber-attacks) are properly handled. \n\nWhen setting up their Network Firewall policy, the bank would need to ensure that the default stateless action for these fragmented packets is either 'Drop' or 'Forward', rather than 'Pass'. 'Drop' would simply discard the packets, while 'Forward' would push them for further handling and scrutiny. \n\nWith this control in place, the bank can enhance its cyber security measures, safeguard against potential cyber threats and ensure the confidentiality and safety of its customers' data. For instance,\n\n```\nResources:\n  MyVPC:\n    Type: 'AWS::EC2::VPC'\n    Properties:\n      CidrBlock: 10.0.0.0/16\n\n  MyNetworkFirewallPolicy:\n    Type: 'AWS::NetworkFirewall::FirewallPolicy'\n    Properties:\n      FirewallPolicyName: MyFirewallPolicy\n      FirewallPolicy:\n        StatelessDefaultActions:\n          - 'aws:drop'\n        StatelessFragmentDefaultActions: \n          - 'aws:drop'\n```\n\nIn this AWS CloudFormation example, the bank directs the AWS Network Firewall to drop all unidentified stateless traffic and fragmented packets, ensuring no suspicious packets pass through unchecked."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_networkfirewall_6",
    "Title": "6 Stateless network firewall rule group should not be empty",
    "Description": "A rule group contains rules that define how your firewall processes traffic in your VPC. An empty stateless rule group when present in a firewall policy might give the impression that the rule group will process traffic. However, when the stateless rule group is empty, it does not process traffic.",
    "QueryID": "aws_networkfirewall_stateless_rule_group_not_empty",
    "DocumentURI": "policies/aws_foundational_security_networkfirewall_6.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "secure_network_configuration"
      ],
      "foundational_security_item_id": [
        "networkfirewall_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/NetworkFirewall"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the AWS Control pertaining to an empty stateless rule group involves:\n\n1. **Security Costs**: This includes potential data breaches, unauthorized access, and infiltration of your Virtual Private Cloud (VPC) due to the lack of safeguards to filter and monitor the incoming traffic.\n\n2. **Operational Costs**: It could lead to a malfunction or disruption in the system processes. When an empty stateless rule group fails to process traffic, some critical functions may cease to operate, hence affecting availability and reliability of services, which could result in downtime.\n\n3. **Negative Impact on Reputation**: The occurrence of security and operational issues could tarnish the reputation of your organization, leading to loss of customer trust and confidence which in turn could reduce the patronage of your services.\n\n4. **Financial Losses**: These could stem from potential data breaches, regulatory fines for non-compliance, and revenue loss from downtime.\n\n5. **Regulatory Compliance Costs**: In regulated industries, the consequences of non-compliance may include substantial fines and penalties, and even legal ramifications.\n\nTo mitigate these costs, it's imperative to ensure that your firewall policy effectively processes and filters traffic, and doesn’t contain an empty stateless rule group. Moreover, regular revision and updates of firewall rule groups should be maintained for effective traffic management of your VPC."
      ],
      "x-kaytu-usefulness-example": [
        "The following is an example of how an empty stateless rule group can be valuable in AWS:\n\nIn a scenario where you have a multistage development environment - with separate development, testing and production stages. You might need to shut off traffic to the testing environment temporarily while maintaining firewall policies.\n\nThis is where an empty stateless rule group comes in handy. Without changing the overall structure of your firewall policy, you can redirect the traffic meant for the testing environment to an empty stateless rule group. As empty rule groups do not process any traffic, this effectively shuts off inbound and outbound traffic to the testing environment without changing anything else.\n\nHere's an example in AWS CLI commands:\n\n```bash\n# Create an empty rule group \naws network-firewall create-rule-group \\\n    --rule-group-name example-group \\\n    --type STATELESS \\\n    --capacity 100\n\n# Update firewall policy to use the empty rule group for testing traffic\naws network-firewall update-firewall-policy \\\n    --firewall-policy-name example-policy \\\n    --firewall-policy '{ \"StatelessRuleGroupReferences\": [ { \"ResourceArn\": \"arn:aws:network-firewall:us-west-2:012345678901:stateless-rulegroup/example-group\" } ] }'\n```\n\nBy doing so, the testing environment can be isolated when necessary, without the need for major reconfigurations or disruptions to the production environment."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_foundational_security_elasticbeanstalk_1",
    "Title": "1 Elastic Beanstalk environments should have enhanced health reporting enabled",
    "Description": "This control checks whether enhanced health reporting is enabled for your AWS Elastic Beanstalk environments.Elastic Beanstalk enhanced health reporting enables a more rapid response to changes in the health of the underlying infrastructure. These changes could result in a lack of availability of the application.",
    "QueryID": "aws_elastic_beanstalk_enhanced_health_reporting_enabled",
    "DocumentURI": "policies/aws_foundational_security_elasticbeanstalk_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "aws_foundational_security": [
        "true"
      ],
      "category": [
        "Compliance"
      ],
      "foundational_security_category": [
        "application_monitoring"
      ],
      "foundational_security_item_id": [
        "elasticbeanstalk_1"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/ElasticBeanstalk"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control could cost an organization in several ways:\n\n1. **Downtime Costs**: Without enhanced health reporting, an organization might not become aware of critical issues with the AWS infrastructure until a problem has already occurred. This could lead to an unplanned downtime of the application, resulting in potential loss of revenue and customer satisfaction. \n\n2. **Incident Response Costs**: Without early detection of issues, the time and resources spent on incident response and post-incident analysis could significantly increase. This includes time spent by IT teams diagnosing and resolving the issue and potential third-party consultancy costs.  \n\n3. **Data Loss Costs**: If the health issue leads to data corruption or loss, and if you have not enabled regular backups, there might be significant cost associated in terms of lost business opportunity, customer trust, and potentially regulatory fines, especially if sensitive data is involved.\n\n4. **Reputational Damage Costs**: Extended downtime or data loss can result in damage to the organization's reputation. This reputational damage can potentially lead to loss of customers and decrease in profits in the long run.\n\n5. **Compliance Fines**: Depending on the industry in which the organization operates, non-compliance to the AWS control could also lead to substantial fines by regulatory bodies. \n\nTherefore, non-compliance to this control could result in significant financial costs for an organization, as well as potential reputational damage that may take a long time to recover from. It is advisable for organizations to enable Elastic Beanstalk enhanced health reporting to avoid such risks."
      ],
      "x-kaytu-usefulness-example": [
        "Here's an example instance of usefulness for the control in markup format: \n\n```\nAWS Elastic Beanstalk - Enhanced Health Reporting\n\nInstance: \n\nA media streaming company 'StreamAway' uses AWS Elastic Beanstalk to manage and deploy its application services. However, they have experienced periodic application outages which were difficult to diagnose and resolve promptly, affecting the user experience. \n\nTo remediate the issue, the company decided to enable enhanced health reporting on their AWS Elastic Beanstalk environments. With this feature enabled, the team was able to identify and troubleshoot issues within the underlying infrastructure much faster, effectively reducing the number of outages and duration of downtimes. The enhanced health reporting provided a more insightful and comprehensive overview of the environment status, and health of the AWS resources in real-time. \n\nThe use of enhanced health reporting has been instrumental in maintaining a high quality of service delivery, improving user satisfaction, and facilitating quicker responses to potential application health issues.\n```"
      ]
    },
    "Managed": true
  }
]