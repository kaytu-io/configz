[
    {
        "ID": "aws_cis_v140_1_1",
        "Title": "1.1 Maintain current contact details",
        "Description": "Ensure contact email and telephone details for AWS accounts are current and map to more than one individual in your organization.",
        "QueryID": null,
        "DocumentURI": "policies/aws_cis_v140_1_1.md",
        "ManualVerification": true,
        "Severity": "Medium",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.1"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "manual"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Medium"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this AWS control can cost your organization in several ways such as:\n\n1. **Business Continuity Risks**: If the contact email and phone details are not current or only linked to one person, there is a risk of business discontinuity. In case the sole contact leaves the organization or is unable to respond due to an emergency, it could delay response time to critical alerts and incidents.\n\n2. **Security Risks**: AWS sends important security notifications to the registered contact details. If these are outdated or ignored by a single point of contact, your infrastructure could be left vulnerable to potential threats or malicious activities.\n\n3. **Operational Inefficiencies**: Communication breakdowns between AWS and your organization could lead to operational inefficiencies. Important information about updates, changes or issues with services may be missed.\n\n4. **Financial Penalties**: In certain regulated industries, failure to maintain accurate contact information could potentially lead to compliance issues and subsequently financial penalties.\n\n5. **Loss of Reputation**: Repeated delays or issues in handling AWS incidents due to outdated contact information can damage your organization's reputation over time.\n\nTo avoid these costs, it is crucial to keep the contact email and telephone details current and accessible to multiple responsible individuals in your organization. AWS allows multiple email addresses to be associated with AWS accounts to ensure the organization receives important messages, especially those related to security and billing."
            ],
            "x-kaytu-usefulness-example": [
                "This AWS control is useful in several situations. \n\nFor example, in a large organization with several departments leveraging AWS services, keeping the contact email and telephone details updated and mapped to multiple individuals can prevent potential disruptions of service. If AWS needs to contact the organization for issues like security breaches or payment failures, they won't be restricted to only one person who may not be available at a particular time. \n\nSecondly, by having contacts from different departments, it ensures that the relevant individuals are informed depending on the nature of the problem. For instance, for a billing issue, AWS can contact someone in the finance department instead of a software engineer who may not be the right person to handle billing queries.\n\nFinally, it can be highly useful in case of emergencies like potential security breaches or service disruptions. If AWS needs to inform your organization urgently, having multiple individuals to contact increases the chances of swift communication and rapid response to mitigate any adverse effects.\n\nHere's how you might use this control in a markup format:\n\n```markdown\n---\nAWSCurrentContacts:\n  - Name: John Doe\n    Email: john.doe@example.com\n    Phone: +18001234567\n    Role: System Administrator\n  - Name: Jane Smith\n    Email: jane.smith@example.com\n    Phone: +18007654321\n    Role: Billing Specialist\n---\n```\nPlease replace the names, email addresses, phone numbers and roles with your actual data. This way, AWS can reach out to the most appropriate contact depending on the situation."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_2",
        "Title": "1.2 Ensure security contact information is registered",
        "Description": "AWS provides customers with the option of specifying the contact information for account's security team. It is recommended that this information be provided.",
        "QueryID": "aws_account_alternate_contact_security_registered",
        "DocumentURI": "policies/aws_cis_v140_1_2.md",
        "ManualVerification": false,
        "Severity": "Low",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.2"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "manual"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Low"
            ],
            "x-kaytu-noncompliance-cost": [
                "For organizations, non-compliance to this AWS control can lead to several negative repercussions:\n\n1. **Loss of Important Notifications**: AWS sends vital notifications regarding security incidents, alerts, or updates to the contact information specified. Not providing or keeping this information updated may lead to missing out critical cybersecurity notifications. This lack of information could delay your organization's response to critical threats or attacks worsening the damage.\n\n2. **Delay in Resolution of Security Incidents**: In case of a security incident, AWS would require to reach out to the security team for immediate actions. Not having this information may cause delays in resolution causing potential damage to data and resources.\n\n3. **Infrastructure Vulnerability**: Without contact information of the responsible security team, AWS would not know who to inform about potential vulnerabilities in your infrastructure. Not receiving and, therefore, not addressing these issues could leave your infrastructure susceptible to breaches.\n\n4. **Compliance Failures**: Depending on your industry, not providing this information may also be a breach of certain cybersecurity standards or regulations that your organization adheres to, leading to penalties or loss of certifications (e.g. ISO27001, PCI-DSS).\n\n5. **Financial Cost**: In case of a breach, the clean-up cost, penalty for non-compliance, and loss of business due to reputational damage can be far greater than maintaining compliance.\n\nTherefore, non-compliance to this control may lead to considerable operational, reputational and financial risks."
            ],
            "x-kaytu-usefulness-example": [
                "```markdown\nOne notable instance when specifying the contact information for the account security team is crucial in AWS would be in the face of potential security breaches.\n\nFor example, consider a large corporation running its applications on Amazon Web Services. One day, an automated AWS security system detects unusual data access patterns that suggest an active security breach. Because the corporation provided contact information for its security team when setting up their AWS account, AWS can immediately notify the corporation's dedicated security team.\n\nOnce alerted by AWS, the security team can react quickly to address the security issue, mitigating any potential damage. Hence, the potential impact of the security breach is minimized. Therefore, providing the account security team's contact information proves to be useful and extremely critical in maintaining the system's overall security.\n```"
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_3_1",
        "Title": "3.1 Ensure CloudTrail is enabled in all regions",
        "Description": "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).",
        "QueryID": "aws_cloudtrail_multi_region_read_write_enabled",
        "DocumentURI": "policies/aws_cis_v140_3_1.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "3.1"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "3"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudTrail"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to the AWS CloudTrail control can result in a variety of costs that could potentially impact an organization:\n\n1. **Security Risks:** Without AWS CloudTrail, organizations would lack visibility and auditability of actions taken within their AWS environment. This could expose an organization to security breaches as anomalous or malicious activities could go unnoticed. If a security breach does occur, the lack of logging information makes it more challenging to investigate and remediate the issue.\n\n2. **Regulatory Fines:** Organizations operating under stringent regulations such as GDPR, HIPAA, PCI DSS, may be required to maintain detailed access logs for compliance purposes. Not having the capability to produce these logs might result in penalties and fines.\n\n3. **Operational Issues:** Logs are valuable in troubleshooting and identifying operational issues. Without AWS CloudTrail, it may become difficult to understand system behavior, making issue identification and resolution a resource-intensive process.\n\n4. **Legal and Forensic Costs:** CloudTrail logs are crucial for forensic investigations in the event of a security incident or legal proceedings. Without a detailed activity log, it may add to the legal costs as it becomes more complex to reconstruct the event's history.\n\n5. **Reputational Damage:** In case of a security breach, the inability to quickly discover and respond may lead to prolonged exposure which can harm an organization's reputation.\n\nIn summary, non-compliance to the AWS CloudTrail control could potentially impact an organization in terms of security risks, regulatory fines, operational efficiency, legal and forensic costs, and reputation."
            ],
            "x-kaytu-usefulness-example": [
                "For example, an organization has multiple teams working on various AWS services in different geographical locations and wants to monitor and track each team's activities and actions on AWS. This is where AWS CloudTrail becomes crucial, as it captures every single API call made by your teams and delivers a breakdown in the form of log files.\n\nCloudTrail provides the following benefits:\n\n- **Security Analysis and Troubleshooting:** You can use CloudTrail logs to identify the most recent changes made in your AWS environment. If any unexpected action or behavior is found, you can trace back the identity of the API caller, the source IP address, request parameters, and the response elements returned. This gives you a clear picture of what happened, who did it, when it was done, and from where it was done.\n\n- **Regulatory Audit:** CloudTrail's log records are designed to meet multiple regulatory standards (like SOX, HIPAA). Each API call record contains details about the event type, its source IP address, its date and time, its user, its resource, and much more. This information can help audit and compliance teams to demonstrate the effectiveness of controls over time.\n\n- **Resource Monitoring and Insights:** CloudTrail also generates event history of your AWS management console, SDK, CLI activity, and provides visibility into user activity by recording AWS Management Console actions and API calls. You can get actionable insights about your AWS environment and how your resources are being used.\n\nExample of CloudTrail Log:\n```markup\n{\n    \"eventVersion\": \"1.07\",\n    \"userIdentity\": {\n        \"type\": \"IAMUser\",\n        \"principalId\": \"AIDAJQABLZS4A3QDU576Q\",\n        \"arn\": \"arn:aws:iam::123456789012:user/Alice\",\n        \"accountId\": \"123456789012\",\n        \"accessKeyId\": \"AKIAIOSFODNN7EXAMPLE\",\n        \"userName\": \"Alice\",\n        \"sessionContext\": {\n            \"attributes\": {\n                \"mfaAuthenticated\": \"false\",\n                \"creationDate\": \"2022-01-01T00:00:00Z\"\n            }\n        }\n    },\n    \"eventTime\": \"2022-01-01T00:00:00Z\",\n    \"eventSource\": \"s3.amazonaws.com\",\n    \"eventName\": \"GetBucketAcl\",\n    \"awsRegion\": \"us-east-1\",\n    \"sourceIPAddress\": \"127.0.0.1\",\n    \"userAgent\": \"[S3Console/0.4, aws-internal/3]\",\n    \"requestID\": \"DEMO8F7666878F82E\",\n    \"eventID\": \"0033757f-5e30-4471-a629-6609b5c7698e\"\n```\nSo, this example shows that CloudTrail is indeed a powerful tool for any organization that needs better visibility into application performance, improves security, complies with audit requirements, and simplifies operational troubleshooting."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_3",
        "Title": "1.3 Ensure security questions are registered in the AWS account",
        "Description": "The AWS support portal allows account owners to establish security questions that can be used to authenticate individuals calling AWS customer service for support. It is recommended that security questions be established.",
        "QueryID": null,
        "DocumentURI": "policies/aws_cis_v140_1_3.md",
        "ManualVerification": true,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.3"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "manual"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this Security Control can result in several cost implications:\n\n1. **Security Incident Costs:** Not setting up security questions makes your AWS account vulnerable to unauthorized access. This security breach could potentially lead to misuse of your resources, disruption of activities, data loss, or compromise of sensitive information. As a result, you may have to bear costs associated with incident response and recovery, investigation, potential legal liabilities, and remediation actions.\n\n2. **Operational Costs:** Without security questions, the AWS support team might take longer to validate an individual's identity when they contact customer service for assistance. This delay could lead to longer downtime or operational inefficiency, resulting in indirect costs to your organization.\n\n3. **Regulatory Compliance Costs:** If your organization is in a regulated industry where you're required to follow certain data protection standards (like GDPR, HIPAA, etc.), non-compliance with such a basic security control may lead to hefty fines and sanctions.\n\n4. **Reputation and Trust Costs:** In case of any security breach, it could affect business reputation leading to loss of customer trust and potential business opportunities, which could have far-reaching financial implications in the long run. \n\n5. **Audit Costs:** In case of audits, non-compliance with such recommended security measures could lead to penalties and also increase the costs associated with the audit if the auditing process is prolonged due to inadequate security controls. \n\nIn conclusion, while setting up security questions may seem like a small task, not doing so can have significant cost implications and can leave your AWS account exposed to security vulnerabilities."
            ],
            "x-kaytu-usefulness-example": [
                "Example:\n\nAn eCommerce company experiences a sudden issue with its website hosted on AWS, which results in a halt in its online sales activity. In such an urgent scenario, they need to get assistance from AWS customer service. \n\nThe customer support executive at AWS will ask the security questions defined by the account owner to verify the caller's identity. This is to ensure that they are speaking to the right person and not providing confidential information to a potential fraudster. In this case, having pre-established security questions enhances the security of communication and allows for swift issuance resolution. \n\n```markdown\nAs an eCommerce company, we understand the importance of our website uptime. Once we had an unexpected issue with our AWS-hosted servers. Thankfully, we had set security questions with AWS. When we contacted AWS customer support, they immediately asked us the security questions to authenticate our call. This allowed us to quickly access support and resolve the issue, ensuring we kept our downtime to a minimum. We realized the importance of setting those security questions on AWS - it not only ensured that our information was dealt with securely, but it also helped us access the necessary support quickly.\n```\n"
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_4",
        "Title": "1.4 Ensure no 'root' user account access key exists",
        "Description": "The 'root' user account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the 'root' user account be removed.",
        "QueryID": "aws_iam_root_user_no_access_keys",
        "DocumentURI": "policies/aws_cis_v140_1_4.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.4"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this AWS control can be costly both financially and operationally for a number of reasons:\n\n1. **Security Breaches:** If root user access keys are compromised, unauthorized users potentially could gain complete access to the AWS account. This could lead to unauthorized actions such as launching EC2 instances, adding/removing users, changing configurations, removing databases, or even shutting down services.\n\n2. **Financial Impact:** Unauthorized usage of AWS services can lead to significant financial costs. For example, an attacker might start large and expensive EC2 instances or perform a high volume of API requests.\n\n3. **Regulatory Compliance:** Many compliance regulations require limiting access on a need-to-know and least-privilege basis. Having root user access keys contradicts these principles and can lead to non-compliance penalties.\n\n4. **Data Loss and Business Disruption:** An attacker with root access could potentially corrupt or remove critical data. This could result in significant business disruption or even business failure if vital data is irrecoverable.\n\n5. **Reputation Damage:** A security breach can lead to severe reputation damage for a company. Customers might lose trust and opt for competitors' services.\n\nFor all these reasons, AWS recommends not using root user access keys. Instead, you should leverage AWS Identity and Access Management (IAM) to securely control access to AWS services and resources."
            ],
            "x-kaytu-usefulness-example": [
                "For example, consider that your organization has hired a new developer, John, who will need to periodically access your AWS account. As a best practice, never provide John with direct root access. Instead, you should create an IAM user for John and only assign him the necessary permissions he needs to work. 'Root' user access keys possess full control over all AWS services which considerably increases the risk if it gets compromised. \n\nBy removing the root access keys, you will reduce the risk of accidental disruption or malicious activities. Thus, it becomes useful in creating a secure AWS environment and ensuring that all access follows the principle of least privilege--that is, individuals should only have the permissions and access they need to perform their jobs, nothing more. \n\nEven in cases where you need to have programmatic access or command-line access to AWS services, you can achieve this through IAM users without having to utilize the root account. \n\nTherefore, removing access keys associated with the 'root' user account greatly improves the security posture of your environment."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_3_2",
        "Title": "3.2 Ensure CloudTrail log file validation is enabled",
        "Description": "CloudTrail log file validation creates a digitally signed digest file containing a hash of each log that CloudTrail writes to S3. These digest files can be used to determine whether a log file was changed, deleted, or unchanged after CloudTrail delivered the log. It is recommended that file validation be enabled on all CloudTrails.",
        "QueryID": "aws_cloudtrail_trail_validation_enabled",
        "DocumentURI": "policies/aws_cis_v140_3_2.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "3.2"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "3"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudTrail"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to the AWS control that recommends file validation to be enabled on all CloudTrails can lead to several costly consequences:\n\n1. **Data Tampering Risk:** Without file validation, the integrity of your logs cannot be assured. Malicious actors could alter or delete logs undetected, obscuring their actions or making forensic analysis more difficult. \n\n2. **Security Breach Detection Failure:** Log files are critical to detecting and responding to a security breach. If you can’t trust the integrity of your logs, you may miss critical warning signs or fail to properly understand the extent of a breach.\n\n3. **Regulatory Non-Compliance Penalties:** Depending on the industry or the data you're handling, you may be required to comply with certain regulations (like GDPR, HIPAA or SOX). Some regulations hold you to strict logging requirements. If you do not validate your logfiles, and a regulator discovers this, you may be subject to hefty fines.\n\n4. **Higher Incident Response Costs:** If a security incident does occur, knowing exactly what transpired is key to responding effectively. As the logs are the trail to the activities in the environment, not having trustworthy logs can lead to longer response times, and hence increased labor costs due to prolonged incident response and forensic investigation.\n\n5. **Loss of Customer Trust:** If a data breach occurs and it goes undetected due to unreliable logs, the resulting damage (financial, reputation) could be significant due to loss of customer trust.\n\nHence, the cost of non-compliance to this AWS control goes far beyond any financial repercussions – it has the potential to put your whole business at risk."
            ],
            "x-kaytu-usefulness-example": [
                "CloudTrail log file validation can be very useful in the following scenario:\n\nJohn works as a system administrator in a multinational company. They use AWS for their infrastructure and regularly monitor their CloudTrail logs for any security-related event. Recently, they found some suspicious activities in their system but couldn't conclude if the logs were manipulated or deleted by an attacker after compromising the system. \n\nTo avoid such scenarios in future, John decided to enable CloudTrail log file validations. This feature creates a digitally signed digest file for each CloudTrail log. In the future, when investigating any security event, John can now refer to this digest file to confirm if the logs were tampered or not. This way they can maintain the integrity of their logging information, and ensure that all logs are reliable, even if they face similar security incidents. They can also ensure compliance with auditing standards by maintaining the validity of their logs, which is a crucial requirement for many multinational companies."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_1",
        "Title": "4.1 Ensure a log metric filter and alarm exist for unauthorized API calls",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.",
        "QueryID": "aws_log_metric_filter_unauthorized_api",
        "DocumentURI": "policies/aws_cis_v140_4_1.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.1"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "The cost of non-compliance to this particular AWS control (real-time monitoring of API calls by routing CloudTrail logs to CloudWatch logs followed by establishment of corresponding metric filters and alarms for unauthorized API calls) could be significant. These potential costs are elaborated below:\n\n1. **Security Breaches**: Unauthorized API calls may indicate unwarranted or malicious activity within your AWS environment. Lack of real-time monitoring might cause these activities to go undetected, leading to potential data breaches, unauthorized access to confidential or sensitive information, or even changes in the infrastructure. \n\n2. **Regulatory Violations**: For industries regulated by standards such as GDPR, PCI-DSS or HIPAA, ensuring security of sensitive data is mandatory. Non-compliance with this control could lead to violations of such regulations, resulting in hefty fines and penalties, or sanctions.\n\n3. **Resource Misuse**: Unauthorized API calls could be a result of excess or inappropriate utilization of computing resources, which can lead to a significant increase in costs over time.\n\n4. **Reputation Damage**: Any data breach or security incident can damage the reputation of an organization, impacting customer trust and loyalty, as well as potential loss of future business opportunities.\n\n5. **Remediation Costs**: Identifying the cause of unauthorized API calls after a security incident has occurred can necessitate substantial invested time and resources in remedial measures.\n\nIn summary, non-compliance to this AWS control could lead to financial, operational and reputational costs, along with potential regulatory fines. It's always advisable to follow AWS recommendations for a secure and optimized AWS environment."
            ],
            "x-kaytu-usefulness-example": [
                "For example, suppose you are running a web service that uses AWS. Your service receives a large number of API calls every day. To ensure the security and healthy operation of your system, you need to constantly monitor these API calls and detect any abnormal activities.\n\nBy directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms, you can monitor your API calls in real time. When an unauthorized API call is made, the metric filter will detect it and trigger an alarm. This way, you can receive instant notifications about the incident.\n\nAn instance can be:\n\n```markdown\n- For a business running an e-commerce platform on AWS, monitoring all API calls in real time is crucial. Each API calling the system can be a potential attack vector. For example, an attacker might try to gain unauthorized access to sensitive user data or disrupt the service.\n\n  By setting up a metric filter and an alarm for unauthorized API calls, the unauthorized access attempt can be detected and addressed promptly. When an unauthorized API call is made, AWS CloudWatch will trigger an alarm. The system administrators will be notified, and they can immediately investigate the incident.\n\n  This real-time monitoring system can help the e-commerce business protect user data, maintain system integrity, and ensure smooth service operation. It is an essential component of the platform's security infrastructure.\n```\nOverall, this AWS control is highly useful in real-time threat detection and system security improvement."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_3_3",
        "Title": "3.3 Ensure the S3 bucket used to store CloudTrail logs is not publicly accessible",
        "Description": "CloudTrail logs a record of every API call made in your AWS account. These logs file are stored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL) applied to the S3 bucket that CloudTrail logs to prevent public access to the CloudTrail logs.",
        "QueryID": "aws_cloudtrail_bucket_not_public",
        "DocumentURI": "policies/aws_cis_v140_3_3.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "3.3"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "3"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudTrail"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with the AWS Control, specifically not restricting public access to the S3 bucket that CloudTrail logs to, can have significant cost implications:\n\n1. **Security Breaches** - Unauthorized entities may gain access to your AWS environment's highly sensitive information (like access keys, IP addresses, etc.), which can cause severe security breaches. The cost of handling cyber threats and data breaches can be very high.\n\n2. **Regulatory Penalties** - Non-compliance can lead to substantial financial penalties, legal costs, and reputation damage due to the violation of privacy regulations or other regulations like GDPR, HIPAA, SOX, etc.\n\n3. **Loss of Client Trust** - If your clients find out that you are not managing their cloud data properly, you may lose their trust, which will definitely impact your business relationship and can lead to loss of revenue.\n\n4. **Remediation Costs** - Once a breach or non-compliance is identified, enterprises need to spend on incident investigation, and post-incident cleanup. Along with this financial cost, there is also a time cost associated with these activities.\n\n5. **Audit Failure** - A company failing an audit due to non-compliance with AWS Control policies may face financial penalties and could also face an increase in the cost of future audits as more resources will have to be consumed in order to pass. \n\nIn conclusion, it is significantly less costly to comply with the control and prevent public access to CloudTrail logs."
            ],
            "x-kaytu-usefulness-example": [
                "**Scenario:** You're an AWS administrator in a midsize software development company. One day, you notice that an unknown and illegitimate API call was made to the AWS account. You suspect there might have been unauthorized access to AWS resources. You need to investigate what happened, which resources were accessed, and from where the request originated.\n\nWith AWS CloudTrail, you can easily do this. The records that CloudTrail logs provides crucial information about each API call, such as the source IP address of the requester, the time of the request, the parameters requested, and the response elements returned by the AWS service. All this data can greatly aid in your forensic analysis.\n\nCloudTrail stores these logs in an Amazon S3 bucket. Ensuring that this bucket policy or access control list (ACL) is set up to prevent public access to the CloudTrail logs is an essential part of maintaining security compliance in your organization.\n\nFor instance, the logging bucket could be misconfigured, or there might be an overly permissive policy that allows public read or write access. If the logs were publicly accessible, an attacker could alter or delete them, hindering your ability to audit and investigate suspicious activity. They could also use the information in the logs to plan further attacks.\n\nTherefore, the recommendation to prevent public access to the CloudTrail logs helps safeguard crucial data and strengthens your overall security stance."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_5",
        "Title": "1.5 Ensure MFA is enabled for the 'root' user account",
        "Description": "The 'root' user account is the most privileged user in an AWS account. Multi-factor Authentication (MFA) adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their username and password as well as for an authentication code from their AWS MFA device.",
        "QueryID": "aws_iam_root_user_mfa_enabled",
        "DocumentURI": "policies/aws_cis_v140_1_5.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.5"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "#### Non-compliance to AWS Control: Multi-factor Authentication (MFA) on the 'root' user account \n\nThe cost of non-compliance to this control is multifold:\n\n1. **Security Threats**: By not enabling MFA for the root user account, you expose your AWS resources to heightened risk, as unauthorized individuals may gain access with just the root credentials. Compromised root user accounts can have severe implications, such as data breaches, unauthorized access or alterations to your AWS services, which may lead to service disruption or even shut-down.\n\n2. **Financial Cost**: In case of a breach due to the lack of MFA in a root account, it may result in massive financial losses. Attackers could start, stop, or terminate instances, increase capacities, or carry out any other spend-inducing operations leading to inflated AWS bills.\n\n3. **Compliance Violations**: Many industries such as finance, healthcare, and others have regulations and laws that dictate stringent security protocols for any data managed. Non-compliance with MFA on a root account may lead to violations of compliance requirements (like PCI DSS, HIPAA, etc.) and could result in hefty fines and penalties.\n\n4. **Loss of Reputation**: An organization's reputation may be severely damaged if it's found that a data breach or security incident occurred due to the lack of basic security provisions like MFA on root AWS accounts. This might lead to loss of business and the need for extensive PR efforts to restore customer trust.\n\n5. **Impediments to Business Continuity**: If a root user's account is compromised, it can lead to serious disruptions in business operations. The cost and time spent on recovery can be significant.\n\nIt's strongly recommended by AWS to secure root user accounts with MFA. This minimizes the risk posed by lost or stolen credentials and is a fundamental part of any robust security strategy."
            ],
            "x-kaytu-usefulness-example": [
                "Example Instance:\n\nImagine that you are the CEO of a midsize company that runs its IT infrastructure on AWS. Your company handles sensitive customer data, and it's your responsibility to ensure that this data is always secure. You've heard about the increasing number of cybercrime incidents, where hackers gain unauthorized access to important business accounts by brute-forcing passwords or exploiting system vulnerabilities. \n\nTo ensure that your AWS data is protected from unauthorized access, you've decided to implement Multi-Factor Authentication (MFA) for your AWS 'root' user account. This way, even if your password gets compromised, the hacker would still need to provide another method of authentication – the authentication code from the MFA device that you have secured offline. \n\nYou sleep easy knowing that your AWS account is protected by MFA, and the increasingly sophisticated methods that hackers use to gain unauthorized access to critical systems and data will be less likely to breach your account. Consequently, you've just minimized the risk of a data breach that could potentially cost millions of dollars in damages and pose a threat to the reputation of your business."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_5_1",
        "Title": "5.1 Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports",
        "Description": "The Network Access Control List (NACL) function provide stateless filtering of ingress and egress network traffic to AWS resources. It is recommended that no NACL allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.",
        "QueryID": "aws_vpc_network_acl_remote_administration",
        "DocumentURI": "policies/aws_cis_v140_5_1.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "5.1"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "5"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/VPC"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this AWS control could lead to several potential costs:\n\n1. **Security Breaches**: Allowing unrestricted ingress access to sensitive network ports like SSH (22) and RDP (3389) could make your AWS resources susceptible to hacking and unauthorized access. These ports take care of remote server administration and hence are an attractive target for hackers.\n\n2. **Loss of Sensitive Data**: In case of a security breach, sensitive data could be compromised. This could lead to a loss of intellectual property and confidential customer data.\n\n3. **Regulatory Fines**: Non-compliance could lead to breach of data privacy regulations, like GDPR or HIPAA, resulting in heavy fines.\n\n4. **Business Downtime**: Unauthorized access of your AWS resources could result in disruptive activities that could hamper the regular operation of your services. This could lead to business downtime and loss of revenue.\n\n5. **Reputational Damage**: Data breaches have severe reputational costs. Your customers could lose trust in your ability to secure their data, resulting in potential loss of business.\n\n6. **Incident Response and Recovery Costs**: Post a security breach, you will have to invest in incident response and recovery activities, for example, forensic investigations, recovery of lost data, strengthening security posture, which will come at a cost."
            ],
            "x-kaytu-usefulness-example": [
                "For Example:\n\n\"Sarah, a developer in an enterprise company, has deployed an application on an Amazon EC2 instance. To secure her application, she has implemented Network Access Control List (NACL) to filter both inbound and outbound traffic. However, she does not want the EC2 instance to be openly accessible for SSH (port 22) or RDP (port 3389) from any IP address due to security reasons. \n\nUsing the NACL function, Sarah configures the rules to deny access to these ports from all IP addresses except the ones from her office network. In this case, NACL provides a vital firewall at the subnet level, ensuring that only authorized personnel are allowed to administer the server, helping in preventing unauthorized access and potential security breaches. \n\nThis is a prime illustration of how NACL can restrict unrestricted ingress access to remote server administration ports and elevate the security posture of the AWS resources.\""
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_2",
        "Title": "4.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).",
        "QueryID": "aws_log_metric_filter_console_login_mfa",
        "DocumentURI": "policies/aws_cis_v140_4_2.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.2"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "## Cost of Non-compliance to the AWS control: \n\nNot complying with the said AWS control can have several implications, including the following:\n\n**1. Security Breaches -** If console logins are not protected by multi-factor authentication (MFA) and are not being monitored, it opens opportunities for unauthorized access to your AWS resources, leading to potential security breaches, data leaks, or malicious activities.\n\n**2. Increased Vulnerability -** Not using MFA and failing to monitor API calls increases vulnerability to attacks such as brute-force, phishing, and man-in-the-middle attacks.\n\n**3. Compliance Failure -** Many cybersecurity regulations, standards, and laws require multi-factor authentication and real-time monitoring. Non-compliance with these could result in failing audits, hefty fines, and legal strife.\n\n**4. Financial Losses -** A successful attack due to non-compliance might lead to significant financial losses. This could result from data theft, resource misuse (such as running large instances or data transfers), or the fines imposed due to compliance failure.\n\n**5. Damage to Reputation -** Data breaches can lead to a severe loss of trust among customers and partners, leading to potential business loss and a tarnished reputation that might take years to recover.\n\n**6. Operational Disruptions -** An attacker with access to your AWS resources might disrupt your services, causing downtime or performance issues that can impact business operations or customer experience. \n\nIn conclusion, non-compliance to the stated AWS control is a risky venture that might lead to security breaches, legal trouble, financial loss, damage to reputation, and operational disruptions."
            ],
            "x-kaytu-usefulness-example": [
                "An example of when this control is extremely useful is within a large organization, where there may be multiple employees with access to the company's AWS Console. \n\nIf an attacker is able to compromise one of the employees' AWS Console credentials, they could potentially gain access to sensitive company information and system resources. \n\nBy having a real-time monitoring of API calls feature in place, with CloudTrail Logs directed to CloudWatch Logs and alarm set up for console logins not protected by MFA, the moment an unauthorized user tries to access AWS Console without MFA, the security team would get an immediate alert. This will allow the security team to take swift action and prevent any potential security threats or mishaps.\n\n```markup\n- `CloudTrail Config:`\n    - S3 Bucket: your-log-bucket\n    - CloudWatch Logs: Enabled\n    - CloudWatch Logs Group: your-log-group\n- `CloudWatch Alarms Config:`\n    - Filter Name: NoMFAConsoleLogin\n    - Filter Pattern: { $.eventName = \"ConsoleLogin\" \u0026\u0026 $.additionalEventData.MFAUsed = \"No\" }\n    - Metric Namespace: LogMetrics\n    - Metric Name: NoMFAConsoleLoginCount\n    - Alarm: Whenever NoMFAConsoleLoginCount \u003e 0\n```\n\nWith this configuration, you get notified whenever a console login without MFA happens. This gives you the opportunity to quickly assess the situation, take remedial actions and enhance you security posture."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_5_2",
        "Title": "5.2 Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports",
        "Description": "Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.",
        "QueryID": "aws_vpc_security_group_remote_administration",
        "DocumentURI": "policies/aws_cis_v140_5_2.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "5.2"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "5"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/VPC"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "The cost of non-compliance to this AWS Control stating that no security group should allow unrestricted ingress access to remote server administration ports can be quite severe and includes:\n\n1. **Security Breach:** Unauthorized users or malicious entities can exploit the open ports, resulting in compromised systems. They can gain complete control of the system, leading to the breach of confidential information.\n\n2. **Network Attacks:** Unrestricted ingress access can lead to attacks such a port scanning, Denial of Service (DoS), and Distributed Denial of Service (DDoS). These attacks can disrupt operations leading to financial loss and damage to the company's reputation.\n\n3. **Non-Compliance Penalties:** If your organization is subject to regulations such as GDPR, HIPAA, or PCI DSS, non-compliance with this control can lead to hefty fines and penalties.\n\n4. **Loss of Trust:** Customers and partners trust an organization to handle their data responsibly. A breach could damage the organization's reputation, and rebuilding trust could take a lot of time and resources.\n\n5. **Financial Cost:** Repairing the damages caused by the breach, as well as potential penalties or lawsuits, could lead to significant financial loss. Plus, increased insurance premiums and the cost of implementing additional security measures also add up to the overall financial cost. \n\n6. **Data Loss:** An attack can lead to data corruption or loss, which can significantly impact business operations.\n\nTo mitigate these risks, it's essential to implement security best practices, like restricting inbound and outbound traffic to only what's necessary, monitoring and regularly reviewing security group rules, and using multi-factor authentication for privileged accounts."
            ],
            "x-kaytu-usefulness-example": [
                "For example, consider a company that has deployed their web application on an AWS EC2 instance. The application needs to communicate with clients on the internet and needs access to a database on another EC2 instance within the same VPC. Also, administrators need to have SSH access to the server for maintenance and updates.\n\nIn this case, they would set up a security group with the following rules.\n\n**Ingress rules:**\n\n1. Allow TCP traffic from any IP on port 80 (HTTP) and 443 (HTTPS) for the internet users to access the web application. \n2. Allow TCP traffic on the port used by the database (let's say port 3306 for a MySQL database) only from the IP of the EC2 instance running the web application. This will restrict database access to only that application.\n3. Allow TCP traffic on port 22 (SSH) only from the IP ranges of the company's administrators. This enables the least privilege access for server administration.\n\n**Egress rules:**\n\n1. Allow all outbound traffic so the application can reply to the client's requests and access the database.\n\nBy these security measures, the company can ensure that only necessary ports are exposed to the required entities providing a secure environment for the web application. \nAny attempt to access the SSH port 22 from an unauthorized IP or the database from any other server except the web application server, would be automatically blocked by the AWS security group, thereby preventing potential security breaches."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_3_4",
        "Title": "3.4 Ensure CloudTrail trails are integrated with CloudWatch Logs",
        "Description": "AWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, realtime analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.",
        "QueryID": "aws_cloudtrail_trail_integrated_with_logs",
        "DocumentURI": "policies/aws_cis_v140_3_4.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "3.4"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "3"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudTrail"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with the AWS control that recommends sending CloudTrail logs to CloudWatch Logs could result in hefty costs in several ways:\n\n1. **Increased Security Risks**: CloudTrail is an essential tool for auditing and monitoring AWS resources. If CloudTrail logs are not sent to CloudWatch Logs, it increases the risk of failing to identify suspicious activities or malicious attacks, possibly leading to data breaches or compliance issues.\n\n2. **Loss of Real-time Analysis Ability**: Without using CloudWatch Logs, your ability to perform real-time analysis is lost. This could increase the response time to critical events and incidents or cause you to miss them altogether.\n\n3. **Operational Issues Tracking**: CloudTrail logs provide visibility into the operations of your AWS environment. Without real-time visibility, troubleshooting operational issues or investigating incidents would be more complicated, leading to more extended downtimes.\n\n4. **Regulatory Compliance Failure**: Many regulatory standards (such as HIPAA, GDPR, PCI DSS, etc.) require auditing capabilities and maintaining proper logs as part of their compliance requirements. Not sending CloudTrail logs to CloudWatch Logs could result in non-compliance with these regulatory standards, which could lead to hefty fines.\n\n5. **Increased Costs**: A poorly monitored AWS environment can result in increased costs - both in terms of cost inefficiencies (due to unoptimized resources) and potential data loss or data breaches. \n\nThus, it's advisable to follow this AWS Control: configure CloudTrail to send logs to CloudWatch Logs for real-time analysis, incident detection, and maintaining regulatory compliance."
            ],
            "x-kaytu-usefulness-example": [
                "For example, an Application Developer within a large organization has just completed coding a new web-based application. The developer has used a variety of AWS services including AWS Lambda, Amazon S3, Amazon DynamoDB, and AWS API Gateway in the development of the application. \n\nBefore making the application live, the developer would like to test the application thoroughly to identify any unexpected actions, errors or security vulnerabilities. By using AWS CloudTrail, the developer can record all API calls made by the application. \n\nFor instance, if there is an unexpected write operation to a DynamoDB table or an unauthorized attempt to access an S3 bucket, these API calls would be recorded in CloudTrail, including details such as the identity of the API caller, the time of the API call and the source IP address. These details provide the developer with actionable information to debug the issue.\n\nMoreover, the developer can configure CloudTrail to send logs to CloudWatch Logs for real-time analysis. By setting up appropriate metric filters and alarms in CloudWatch, the developer can receive immediate notifications if there are any API calls that could potentially indicate a functionality issue or a security threat.\n\nCloudTrail logs stored in a designated S3 bucket can also be used for long-term analysis. These logs provide valuable insights for optimizing the application and enhancing the security posture in the future. For instance, by reviewing the logs, the developer can understand the typical usage patterns of the application and identify any unnecessary API calls to reduce the cost.\n\nThus, AWS CloudTrail proves to be highly useful in application testing, debugging, live monitoring, cost optimization, security auditing, and long-term behavioral analysis."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_6",
        "Title": "1.6 Ensure hardware MFA is enabled for the 'root' user account",
        "Description": "The 'root' user account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. For Level 2, it is recommended that the root user account be protected with a hardware MFA.",
        "QueryID": "aws_iam_root_user_hardware_mfa_enabled",
        "DocumentURI": "policies/aws_cis_v140_1_6.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.6"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this AWS control could have significant costs monetarily, in terms of time, and for an organization's reputation. Below are some potential costs associated with non-compliance:\n\n1. **Financial Loss:** A compromised 'root' user account can lead to unauthorized access to the AWS resources, resulting in financial loss. This could include data breaches, uncontrolled consumption of resources, and potential sabotage of the organization's online infrastructure. \n\n2. **Regulatory Fines and Legal Costs:** Depending on the industry and the nature of the data stored or processed by an organization in AWS, not protecting a 'root' user account with MFA may violate data protection and privacy laws. There might be regulatory fines or penalties for this, and potentially legal costs if the breach results in litigation.\n\n3. **Loss of Customer Trust and Business Reputation:** If a security breach happens due to non-compliance, it can seriously impact the goodwill and reputation of the organization. This negative publicity can deter current and potential customers, and harm business relationships.\n\n4. **Operations Setback:** Recovery from a security breach can take considerable time and resources. Aside from the financial aspect, this can affect business continuity and the ability to meet business objectives.\n\n5. **Audit Failure:** If an audit takes place, failing to have this level of security in place could result in a failure to pass, which can have its own repercussions, such as preventing the acquisition of certain industry certifications.\n   \nTherefore, it is crucial to meet this AWS control and protect the 'root' user account with MFA to ensure the security of AWS services and resources."
            ],
            "x-kaytu-usefulness-example": [
                "Example:\n\nA financial institution has adopted AWS as part of their technological infrastructure. As such, protection of sensitive data and robust security measures are particularly critical. To ensure maximum security, they decided to enable MFA for their 'root' user account. \n\nWhile setting up the policy, they chose to go for a hardware MFA as recommended for Level 2 protection. With this system, anytime the root user logs in to the AWS website, they're required to input not just their username and password, but also an authentication code provided by their hardware MFA device. \n\nThis significantly reduces the chance of cyberattacks and unauthorized access. Even if an attacker manages to discover the root account password, they would still need the physical MFA device to complete the authentication. This greatly enhances the security layer protecting their AWS resources and data, ensuring adherence to compliance regulations in the process."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_3",
        "Title": "4.3 Ensure a log metric filter and alarm exist for usage of 'root' account",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for root login attempts.",
        "QueryID": "aws_log_metric_filter_root_login",
        "DocumentURI": "policies/aws_cis_v140_4_3.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.3"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to this AWS Control opens up your system to a significant number of risks, including:\n\n1. **Security Risk:** Without real-time monitoring of API calls, it would be difficult to detect and respond promptly to unauthorized access to your AWS services or data breaches.\n\n2. **Regulatory and Compliance Risk:** Many regulations and standards such as PCI DSS, HIPAA, etc. require monitoring and logging of system activities. Non-compliance could lead to failure in audits, fines, and penalties. \n\n3. **Operational Risk:** Without this control, there could be operational issues in your environment which will not be detected on time causing downtime or other negative impact on your services.\n\n4. **Reputation Risk:** Any successful breach or system downtime could damage your business reputation, leading to loss of customer trust and future business.\n\n5. **Financial Cost:** In addition to potential fines and penalties, organizations could also face financial losses due to data breaches, system downtime, or unauthorized activities including data theft, modification, or destruction of data.\n\nHence, non-compliance to this AWS Control - Real-time monitoring of API calls, specifically root login attempts, can potentially have substantial financial, operational, reputational, and regulatory implications."
            ],
            "x-kaytu-usefulness-example": [
                "Example:\n\nAWS infrastructure has features to monitor API calls by using AWS CloudTrail Logs. Moreover, it can also link these logs to CloudWatch Logs to establish metric filters and alarms. If any suspicious activity is detected, such as a root login attempt, these alarms can help in identifying potential security threats. \n\nLet's say an organization operates a high-security application on their AWS environment- storing highly sensitive customer data. They have multiple AWS users, but they've decided that for security reasons root login should not be used. \n\nThe IT department of the organization can then set up CloudTrail Logs to monitor API calls and direct these logs to CloudWatch. They can also establish a metric filter and alarm for root login attempts. \n\nIf anyone tries to use root login, this would instantly trigger an alarm - notifying the IT department about this security threat.\n\n```markdown\n1. From the AWS Management Console, enable AWS CloudTrail to create a trail with the following settings:\n   - Trail name: `Root_Login_Trail`\n   - Apply trail to all regions: `Yes`\n   - Read/Write events: `All`\n   - Create a new S3 bucket: `Yes`\n  \n2. To direct the CloudTrail Logs to CloudWatch, navigate to CloudWatch Settings and enable CloudWatch Logs with the following settings:\n   - Log group name: `Root_Login_Log_Group`\n   - IAM role: `Choose an existing role that has access to CloudWatch Logs and CloudTrail`\n\n3. Now, create a metric filter to parse the logs that match a specific event. In this case, the event is root login.\n\n4. Finally, create an alarm for the metric filter:\n   - Whenever: `RootLogin`\n   - Statistic: `No. of Occurrences`\n   - Period: `5 minutes`\n   - Conditions: `Greater than: 0`\n   - Actions: `Send a notification to: IT_security@company.com`\n```\nWith the above configuration, the organization has an effective system in place for real-time monitoring of root login attempts - addressing a potential security threat."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_4",
        "Title": "4.4 Ensure a log metric filter and alarm exist for IAM policy changes",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.",
        "QueryID": "aws_log_metric_filter_iam_policy",
        "DocumentURI": "policies/aws_cis_v140_4_4.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.4"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to this AWS Control could potentially incur several costs:\n\n1. **Security risk**: Without real-time monitoring, unauthorized or nefarious activities could occur without immediate detection. This leaves the system susceptible to a data breach, exposure of sensitive data, or unauthorized changes. This could lead to cleanup costs, damage to reputation and may have legal or compliance implications.\n   \n2. **Lack of Accountability**: IAM policies define who has what permissions. If these policies are changed, it could potentially grant higher-level permissions to users who shouldn’t have such access. Without monitoring, it would be difficult to identify who made such changes, making the system less transparent and accountable.\n    \n3. **Operational Disruption**: Unauthorized changes to IAM policies could disrupt business operations. If access is mistakenly revoked, legitimate users may be unable to perform their job functions leading to operational delays and possible financial losses.\n     \n4. **Compliance Violations**: For businesses in regulated industries or those with contractual obligations to monitor logs in real-time, not doing so could result in penalties or fines. Furthermore, the inability to produce audit logs when required could also result in non-compliance with industry regulations like GDPR, HIPAA, PCI-DSS, etc.\n    \n5. **Forensics and Incident Response**: In the event of a security incident, not having real-time logs can hamper incident response efforts and make it more difficult to trace back attacks, analyze the attack vectors, and recover from incidents.\n    \n6. **Increased Costs**: Finally, trying to retroactively establish real-time monitoring after an incident can be far more expensive than proactively setting it up. Non-compliance can lead to large unexpected and unplanned costs associated with incident response, damage mitigation, data recovery, etc."
            ],
            "x-kaytu-usefulness-example": [
                "Example:\n\nImagine you run a large-scale application on AWS which involves numerous microservices, each interacting with different AWS resources by making use of various APIs. You have a team of engineers who manage these services and have access to your AWS environment.\n\nOne day, an unknown IAM policy change happens which leads to several services failing as they can't access the required resources. Degradation in application performance occurs and soon after, customers start complaining about issues.\n\nIn such a scenario, if Real-time monitoring of API calls were set up by directing CloudTrail Logs to CloudWatch Logs and an alarm was established for changes made to IAM policies, you would have received a notification the exact moment that unexpected IAM policy change occurred. You could have quickly identified the change, evaluate its impact, and possibly even revert it, long before it severely affected your application and its users. This is how real-time monitoring of API calls can be very useful in maintaining the health and performance of your application."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_5_3",
        "Title": "5.3 Ensure the default security group of every VPC restricts all traffic",
        "Description": "A VPC comes with a default security group whose initial settings deny all inbound traffic, allow all outbound traffic, and allow all traffic between instances assigned to the security group. If you don't specify a security group when you launch an instance, the instance is automatically assigned to this default security group. Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that the default security group restrict all traffic.",
        "QueryID": "aws_vpc_default_security_group_restricts_all_traffic",
        "DocumentURI": "policies/aws_cis_v140_5_3.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "5.3"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "5"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/VPC"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "The cost of non-compliance to this AWS control can have both financial and operational repercussions. AWS (Amazon Web Services) Control that pertains to VPC (Virtual Private Cloud) and its security group settings holds significant importance in ensuring the security and integrity of your deployed AWS resources.\n\nIf you choose not to comply with this control:\n1. **Security Risk**: If the default security group does not restrict all traffic, it may leave your VPC and the resources within it, such as EC2 instances, exposed to potential security threats like a data breach, hacking attempts, or DDoS attacks. Your sensitive data might be compromised, leading to loss of reputation and potential legal consequences.\n   \n2. **Operational issues**: Non-compliance can cause operational issues. Unrestricted traffic can lead to unexpected system behavior or performance issues. These issues might range from overconsumption of bandwidth to heavier workloads on your resources, affecting their performance.\n\n3. **Increased Costs**: In security breach situations, recovery can be costly. You may need to invest in incident response, system recovery, and restoring lost data. Besides, unrestricted outbound traffic can lead to an increase in data transfer costs. \n\n4. **Regulatory Penalties**: If your industry has standards or regulations about data safety (HIPAA in healthcare, PCI DSS in payment industries, or GDPR in European region), non-compliance can lead to heavy fines and penalties from regulatory bodies. \n\nTo mitigate these risks, it’s crucial to follow AWS’ recommended practices for VPC security and ensure that security groups are configured to restrict all unnecessary traffic."
            ],
            "x-kaytu-usefulness-example": [
                "An example of the usefulness of the default security group in AWS VPC is in the context of a company called 'XYZ Corp' operating in the healthcare sector and using AWS services to host its clinical data. \n\nThe company plans to create a new microservice architecture for handling patients' electronic health records (EHR). This means launching several new EC2 instances as part of this infrastructure. XYZ Corp. makes use of the default security group feature of the AWS VPC when launching these instances.\n\n```markdown\n### Example Instance of Usefulness for AWS VPC Default Security Group \n\n1. **Basic Security:** By not specifying a security group during the launch of these instances, AWS automatically assigns them under the default security group. This feature provides an immediate layer of security by denying all inbound traffic and allowing only outbound traffic.\n\n2. **Internal Traffic Control:** The default security group allows all traffic between instances within the group. This is useful for XYZ Corp. as the microservices (EC2 instances) need to intercommunicate to function appropriately.\n\n3. **Customized Rules:** Despite the initial default rules providing some level of security, XYZ Corp needs stricter control due to the sensitive nature of the data handled. They modify the rules of the default security group, enabling strict control over what kind of traffic goes in and out.\n\n4. **Stateful Inspection:** The default security group of AWS VPC offers stateful filtering of traffic. This means the responses to allowed inbound traffic are also allowed, even if outbound traffic is restricted. This function is essential for XYZ's application which requires session consistency to function smoothly.\n\nIn summary, for XYZ Corp, the default security group in an AWS VPC provides a customizable, immediately available, and context-aware first line of defense for their new EHR handling microservices, requiring minimal setup effort and ensuring secure operation.\n```"
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_7",
        "Title": "1.7 Eliminate use of the 'root' user for administrative and daily tasks",
        "Description": "With the creation of an AWS account, a 'root user' is created that cannot be disabled or deleted. That user has unrestricted access to and control over all resources in the AWS account. It is highly recommended that the use of this account be avoided for everyday tasks.",
        "QueryID": "aws_iam_root_last_used",
        "DocumentURI": "policies/aws_cis_v140_1_7.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.7"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to the aforementioned AWS control can have serious implications, both financially and in terms of data security. Here are the potential costs:\n\n1. **Security Vulnerabilities**: Since the root user has unrestricted access to all AWS resources, it can become a prime target for potential attacks. If compromised, the attacker can gain complete control over the AWS infrastructure, leading to widespread damage. \n   - _Costs_: The cost of a security breach can be enormous, both in terms of immediate financial loss and long-term reputational damage. Research shows that the average cost of a data breach is $3.86 million (IBM, 2020).\n\n2. **Data Loss**: Given the unrestricted access, misuse of the root user account (either by accident or intentionally) can lead to data loss.\n   - _Costs_: The financial cost of data loss varies by industry and the importance of the lost data, but it can run into hundreds of thousands to millions of dollars.\n\n3. **Financial Mismanagement**: With complete control over all services, any accidental or malicious activities can lead to significant unexpected costs.\n   - _Costs_: Depending on the scale of mismanagement, expenses can skyrocket. For example, if a root user account accidentally spins up several high-capacity EC2 instances and forgets to shut them down, costs can quickly escalate into thousands or even tens of thousands of dollars.\n\n4. **Non-compliance Penalties**: If your industry requires compliance with specific regulations (like GDPR, HIPAA, etc.), unrestricted use of root user can lead to non-compliance.\n   - _Costs_: Non-compliance can incur significant fines. For example, the maximum fine for serious infringements of the GDPR can go up to €20 million or 4% of the company’s global annual turnover, whichever is higher.\n\n5. **Operational Inefficiencies**: Sharing one root user amongst team members can lead to inefficiencies, such as having to constantly log in and out, and potential overwriting of work.\n   - _Costs_: Inefficiencies can lead to wasted employee time, creating additional payroll costs and slowing down project timelines."
            ],
            "x-kaytu-usefulness-example": [
                "The root user on AWS can be helpful in a number of situations. For instance, if a business accidentally deletes critical data or configurations through another user with limited permissions, the root user can quickly recover those resources since it has full access to all AWS services and resources. However, because of the root user's broad access, it is crucial that its credentials be securely stored and primarily used for necessary tasks like setting up Identity and Access Management (IAM), and billing system setup as examples. Regular operations and requests should be performed by users with the minimum required AWS permissions. Using the root user for daily tasks exposes the business to potential security risks, including unauthorized access and potential for accidental deletions or modifications of critical resources."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_3_5",
        "Title": "3.5 Ensure AWS Config is enabled in all regions",
        "Description": "AWS Config is a web service that performs configuration management of supported AWS resources within your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), any configuration changes between resources. It is recommended AWS Config be enabled in all regions.",
        "QueryID": "aws_config_enabled_all_regions",
        "DocumentURI": "policies/aws_cis_v140_3_5.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "3.5"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "3"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/Config"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with the control of enabling AWS Config in all regions could expose your organization to multiple risks, including:\n\n1. **Security Risk**: AWS Config continuously monitors and records your AWS resource configurations, and allows you to automate reviewing and assessing these configurations. If not enabled, you might miss recording changes that could be potential security issues, such as unauthorized configuration changes.\n\n2. **Availability Risk**: AWS Config assists in troubleshooting operational issues by identifying recent changes to resources in your environment that may contribute to failures. Without AWS Config, diagnosing and restoring service from outages or disruptions may take longer, impacting system and business availability.\n\n3. **Audit Risk**: AWS Config simplifies compliance auditing by automatically recording and organizing resource configuration history. Non-compliance may increase the time, effort, and complexity of internal/external audit processes.\n\n4. **Cost Risk**: When properly configured, AWS Config can provide insights into resource allocation and usage. This visibility can help optimize costs by identifying under-utilized resources. If AWS Config isn't enabled, the organization might miss opportunities for cost optimization.\n\n5. **Regulatory Compliance Risk**: Many regulatory standards require maintaining a consistent configuration management process. By not enabling AWS Config, an organization could fall out of compliance with regulations resulting in financial penalties and reputational damage.\n\nThe cost of all these risks would vary depending on factors like the scale of operation, the nature of the business, severity of the breach or issue and regulatory demands. However, such costs might manifest as financial losses, penalties, business downtime, loss of customer trust, and potential reputational damage."
            ],
            "x-kaytu-usefulness-example": [
                "For example, imagine that you have a complex AWS environment with multiple resources, across various regions, and numerous daily changes. In this scenario, it can be quite challenging to keep track of all the resources and their configuration changes manually. \n\nIn this situation, AWS Config can be highly useful to automate the configuration management process by continuously monitoring and recording your AWS resource configurations, and allowing you to automate the evaluation of recorded configurations against desired configurations. \n\n```markup\nWith AWS Config, you can review changes in configurations and relationships between AWS resources, discover existing and deleted AWS resources, determine your overall compliance against the configurations specified in your internal guidelines and much more. \n\nFurther, enabling AWS Config across all regions gives you a centralized view of your AWS assets' state, simplifies resource change tracking across your global infrastructure, and helps in maintaining security, governance, compliance, and auditing requirements.\n```\n\nMoreover, AWS Config can integrate with other AWS services like AWS SNS, AWS CloudTrail, AWS CloudWatch, providing more robustness and flexibility in the overall management of your AWS environment."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_5_4",
        "Title": "5.4 Ensure routing tables for VPC peering are \"least access\"",
        "Description": "Once a VPC peering connection is established, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection.",
        "QueryID": null,
        "DocumentURI": "policies/aws_cis_v140_5_4.md",
        "ManualVerification": true,
        "Severity": "Medium",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "5.4"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "5"
            ],
            "cis_type": [
                "manual"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/VPC"
            ],
            "x-kaytu-explanation": [
                "Medium"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this AWS control can lead to several potential costs. They include:\n\n1. **Network Accessibility Issues**: If routing tables are not accurately updated after establishing a VPC peering connection, resources in the peered VPCs might not be able to communicate. This could affect the productivity of teams resulting in overall inefficiency affecting the smooth run of applications.\n\n2. **Security Risks**: If routes are not as specific as they could be, unnecessary network paths may be created. This could lead to enhanced security risks, as attackers could take advantage of these excess routes to gain unauthorized access to your resources.\n\n3. **Increased Operational Costs**: If the routing tables are incorrectly configured, you may find that there are unnecessary data transfers happening. This adds to the AWS data transfer cost and may significantly inflate your billing, especially if large volumes of data are involved or if the issue goes undetected for an extended period.\n\n4. **Compliance Fines**: If your organization is subject to specific regulatory requirements related to data security and you are not strictly controlling data routing within your VPCs, you might be in non-compliance, which can lead to hefty fines.\n\n5. **Reputational Damage**: Finally, if the non-compliance leads to security issues that cause service disruption, application downtime, or data breaches, this could harm your company's reputation. Loss of customer trust could translate into a significant financial impact in the long run. \n\nTo avoid these potential costs, it is important to ensure that the routing tables are accurately updated upon establishing a VPC peering connection and that the routes are as specific as required, thus minimizing the risk of unnecessary exposure."
            ],
            "x-kaytu-usefulness-example": [
                "AWS VPC Peering is valuable when you have two VPCs that need to share resources but aren't in the same network. For instance, suppose you have two separate office locations, each with its VPC. One office hosts a specific server containing critical data that must be accessed from the other office. To establish a secure, direct connection between the two VPCs, you can create a VPC peering connection.\n\nOnce the peering is established, you need to update the routing tables for the peered VPCs to establish connections between them. For security and specificity, you can set the route to direct to just the specific host (server) on the other side that contains the necessary data. Hence, a routing rule will look like - \n\n```markdown\n- Destination: \u003cserver-ip-address\u003e /32 \n  Target: \u003cpeering-connection-id\u003e\n```\n\nThis AWS control benefits the business by facilitating:\n\n- Enhanced security by keeping network traffic private within the AWS cloud, not exposing data to the public internet.\n- Economizing on bandwidth expenses, as data transferred over VPC Peering doesn't count towards the data transfer cost.\n- Maintaining efficient network routing, allowing targeted connections to specific hosts, minimizing unnecessary network exposure.\n  \nOverall, AWS VPC Peering coupled with precise routing entries provides a compliant and efficient way of managing cross-network access requirements, keeping the traffic secure and costs low."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_5",
        "Title": "4.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.",
        "QueryID": "aws_log_metric_filter_cloudtrail_configuration",
        "DocumentURI": "policies/aws_cis_v140_4_5.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.5"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this control can lead to several risks and costs:\n\n1. **Security Risk:** Without real-time monitoring of API calls, malicious activities, such as unauthorized access, data modification, or data breaches can go unnoticed until significant damage is done. This can lead to data loss, disruption of service, and loss of customer trust.\n\n2. **Compliance Risk:** For organizations subject to regulations that require monitoring and logging of activities, non-compliance with this control can lead to fines and penalties.\n\n3. **Auditing Difficulty:** Without this control, it would be difficult to audit the activities in the AWS environment. This could also lead to non-compliance with certain regulations and standards that require activity auditing.\n\n4. **Incident Response Delays:** Real-time monitoring helps in faster detection of issues and hence timely response to any incidents. Failure to comply may result in extended downtime and more severe damages to the systems and data.\n\n5. **Financial Cost:** In the event of a security incident or breach, the financial cost can be significant. This includes investigation and remediation expenses, regulatory fines, and potential cost of reputational damage or lost business.\n\nAll these costs justify the need for complying with the control of implementing real-time monitoring of API calls, through directing CloudTrail Logs to CloudWatch Logs and setting up corresponding metric filters and alarms."
            ],
            "x-kaytu-usefulness-example": [
                "For instance, if you have a large organization that constantly uses Amazon Web Services (AWS) resources through different API calls, it's vital to keep track of these calls in real-time. Suppose a pivotal API call that can affect the whole organization is accidentally changed or purposely amended for malicious actions. \n\nHere, real-time monitoring of API calls using CloudTrail Logs and CloudWatch Logs demonstrates its usefulness. If a metric filter and alarm have been set up correctly, immediate warning signals will be issued when unauthorized changes to the CloudTrail configurations are detected. \n\nThis enables quick response actions, helping to prevent potential threats or harmful mistakes, thus ensuring smooth, secure, and efficient operations of your AWS resources. \n\n```\nFor example:\n1. You can set up a filter to track any 'DeleteTrail' or 'StopLogging' event - as these can imply attempts to turn off or delete CloudTrail logging itself.\n2. An alarm can be set to notify the administrative team once these suspicious events have been detected.\n3. This real-time monitoring system will alert the team via specified communication channels, such as email or SMS, allowing rapid investigations and remediations.\n\nThis methodology maintains the integrity of the API calls while keeping an audit trail for compliance, security, and troubleshooting needs.\n```"
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_8",
        "Title": "1.8 Ensure IAM password policy requires minimum length of 14 or greater",
        "Description": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are at least a given length. It is recommended that the password policy require a minimum password length 14.",
        "QueryID": "aws_iam_account_password_policy_min_length_14",
        "DocumentURI": "policies/aws_cis_v140_1_8.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.8"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "The cost of non-compliance to this AWS Control can result in numerous consequences impacting multiple areas:\n\n1. **Security Impact**: Non-compliance to this control can make your system vulnerable to intrusion or hacking attempts. Short or simple passwords can be easily guessed or cracked by malicious entities using sophisticated software. This can lead to unauthorized access, data breaches, and potentially significant damage to your systems and data.\n\n2. **Financial Impact**: A security breach as a result of weak passwords may result in financial losses. The breach can lead to data theft, including sensitive client or financial information. Also, it may result in penalties in certain regulated industries for failure to meet security standards. The cost to recover, restore or remedy the damage can be high.\n\n3. **Reputation Impact**: If a data breach occurs due to a weak password policy, the reputation of the organisation can be affected. Customers or clients may lose trust in your organisation's ability to secure their data, resulting in a loss of business. \n\n4. **Regulatory Impact**: In many industries, particularly those that deal with sensitive data (such as financial, healthcare, etc.), there are regulatory requirements for enforcing password complexity and strength. Non-compliance can result in penalties, fines, or other actions by regulatory bodies. \n\n5. **Operational Impact**: An attack that gains internal access due to weak passwords can disrupt operations, potentially disabling key functionalities and impacting productivity or even causing downtime.\n\nHence the implementation of this AWS control which enforces a minimum password length of 14 characters is necessary not only for regulatory and compliance purposes but also for the overall cyber security posture of an organization."
            ],
            "x-kaytu-usefulness-example": [
                "Example:\n\nSuppose a company named \"Tech Solutions Inc\" is using AWS for hosting their workloads and their entire team access the AWS account using IAM users. To ensure that all the IAM users follow a strong password, they have set up the IAM password policy.\n\nHere's how the `Password Policy` might look like:\n\n```markup\n{\n  \"PasswordPolicy\": {\n    \"MinimumPasswordLength\": 14,\n    \"RequireSymbols\": true,\n    \"RequireNumbers\": true,\n    \"RequireUppercaseCharacters\": true,\n    \"RequireLowercaseCharacters\": true,\n    \"AllowUsersToChangePassword\": true\n   }\n}\n```\nIn this example, the company is enforcing every IAM user to set a password of minimum 14 characters in length, which should include symbols, numbers, upper and lowercase characters, and allowing users to change their passwords. With this policy, Tech Solutions Inc is able to ensure the access to their AWS console is secure and that they are following the best practice for password complexity requirements."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_3_6",
        "Title": "3.6 Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket",
        "Description": "S3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket.",
        "QueryID": "aws_cloudtrail_s3_logging_enabled",
        "DocumentURI": "policies/aws_cis_v140_3_6.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "3.6"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "3"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudTrail"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "The cost of non-compliance to the S3 Bucket Access Logging AWS control can have multiple facets:\n\n1. **Security:** Without access logging, malicious activity such as unauthorized access or data breaches may go unnoticed until it's too late, potentially resulting in the loss or exposure of sensitive data.\n\n2. **Auditability:** Access logs are often required for auditing purposes. Without them, your organization may face difficulty in proving compliance with various regulations, potentially resulting in fines or penalties.\n\n3. **Troubleshooting:** In the event of an operational issue, access logs can provide valuable insights for root cause analysis. Without them, it might be harder and take longer to identify and fix the problem.\n\n4. **Accountability:** Logging the activities enables the accountability of actions performed in the system. If there's a lack of logging, it can lead to a lack of accountability.\n\n5. **Legal repercussions:** In certain industries, not maintaining proper logs can lead to serious legal implications.\n\nEssentially, the absence of access logging could lead to increased security risks, potential regulatory fines, longer downtime, and potential legal issues."
            ],
            "x-kaytu-usefulness-example": [
                "For instance, an eCommerce company named XYZ is using AWS S3 buckets for storing their product images. They notice a sudden spike in their AWS billing and suspect unauthorized access or data breach in their AWS S3 bucket. \n\nTo identify the issue, they enable S3 Bucket Access Logging. Once enabled, it starts producing logs that contain all the requests made to their S3 bucket. They can easily review these logs to identify suspicious activities. For example, they may find repeated unauthorized access attempts to a specific file or a sudden surge in data transfer at irregular intervals.\n\nAfter analysis, let's say they identify an IP that is making an excessively high number of requests. They can cross verify this IP in their security module. If the IP is not part of their known network, they can conclude this is a potential data breach. Then they can take necessary actions to prevent further suspicious activities from this IP.\n\nApart from this, they can also use these logs to analyze the daily or weekly traffic to their S3 bucket, identify the most accessed files, determine peak usage times, and so forth. This will help them better understand how their storage resources are utilized, thus, optimizing performance and cost. \n\nTherefore, S3 Bucket Access Logging proves immensely helpful for maintaining security, performance optimization, and cost-effectiveness."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_9",
        "Title": "1.9 Ensure IAM password policy prevents password reuse",
        "Description": "IAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.",
        "QueryID": "aws_iam_account_password_policy_reuse_24",
        "DocumentURI": "policies/aws_cis_v140_1_9.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.9"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "The cost of non-compliance to this particular AWS (Amazon Web Services) IAM (Identity and Access Management) control that recommends the prevention of reuse of passwords can have several implications which predominantly revolve around the themes of security, financial implications, legal/regulatory repercussions and damage to reputation. \n\n1. **Security Implications:**\n   Not adhering to this control can lead to devastating security breaches. If an attacker gets access to an old password which is allowed to be reused, the attacker can gain unauthorized access to confidential data, modify data, wreak havoc on the IT infrastructure, etc.\n\n2. **Financial Implications:**\n   Security breaches can also lead to high financial costs. These costs can originate from fines, the cost of remediation, losses due to downtime or the inability to operate, and increased insurance premiums.\n\n3. **Legal/Regulatory Repercussions:**\n   If a security breach involves sensitive customer data, there can be severe legal or regulatory repercussions. You could be subject to penalties or fines from regulatory bodies, and you may also be sued by affected customers or partners. \n    \n4. **Reputation Damage:**\n   A security breach can cause significant damage to your company's reputation. This can result in loss of customers, lower sales, and difficulties in attracting new business or talent.\n\nPreventing password reuse is a basic security practice that significantly enhances the security posture by reducing the possibility of password guessing or cracking attacks. Hence it's of utmost importance that one be compliant with such AWS IAM Controls."
            ],
            "x-kaytu-usefulness-example": [
                "For an e-commerce website using AWS for hosting, handling transactions, and managing user data, it is essential to maintain strict guidelines for user account security. If a company's system allows users to reuse their passwords, it opens up the possibility of unauthorized access from individuals who may have previously attained a user's password through data breaches or other cyber attacks.\n\nTo prevent such a scenario, the company could implement AWS's IAM password policy that prevents the reuse of passwords. This would ensure that even if a user's old password is compromised, it can't be reused to gain unauthorized access to the account.\n\nIn the markdown:\n\n```markdown\nTo secure our e-commerce website hosted on AWS, we have implemented IAM password policies to ensure the safety and privacy of our user's account information. This policy prevents the reuse of passwords that limits the possibility of unauthorized access. Hence, even if a user's old password is compromised in any way, it cannot be reused to gain illegitimate access to the user's account, thereby maintaining our adherence to providing the highest standards of data protection for our users.\n```\nWith such a control in place, customer's trust in the e-commerce platform increases, as they can confidently interact with the platform without worrying about potential threats to their personal data. \n\nAdditionally, this also complies with many data protection regulations, laws, and standards, thereby cementing their reputation as a responsible online entity."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_6",
        "Title": "4.6 Ensure a log metric filter and alarm exist for AWS Management Console authentication failures",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for failed console authentication attempts.",
        "QueryID": "aws_log_metric_filter_console_authentication_failure",
        "DocumentURI": "policies/aws_cis_v140_4_6.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.6"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to AWS Control, which calls for real-time monitoring of API calls through CloudTrail Logs, CloudWatch Logs, and corresponding metric filters and alarms, can result in significant financial and operational costs.\n\n1. **Increased Security Risks**: Without real-time monitoring and automated alerting for failed console authentication attempts, an organization becomes susceptible to security breaches and unauthorized access to infrastructure and data. Attackers can take advantage of the lack of robust security controls to gain unauthorized access and manipulate the system for malicious activities.\n\n2. **Financial Loss**: In the event of a security breach, there could be significant financial implications such as the cost of incident response, loss of customer or business due to reputation damage, and potential regulatory fines for not ensuring proper security measures.\n\n3. **Operational Disruptions**: Without proper real-time monitoring, any disruption within the system (such as unauthorized, harmful activities) will take longer to identify and rectify, which could lead to delayed services, customer dissatisfaction, and even service downtime.\n\n4. **Non-Compliance Penalties**: If the organization falls under any regulatory requirement that necessitates real-time monitoring (like GDPR, HIPAA, etc.), non-compliance with this control can lead to severe penalties such as substantial fines and sanctions.\n\n5. **Forensic Difficulty**: Non-compliance can escalate the difficulties in event investigation and forensic activities. With the absence of real-time logs and constant monitoring, identifying a system issue or security breach becomes a time-consuming and challenging task.\n\nIn conclusion, to ensure the highest level of security and operational efficiency, compliance with the AWS real-time monitoring control is critical. The cost of non-compliance far outweighs the cost of implementing robust monitoring and alerting mechanisms."
            ],
            "x-kaytu-usefulness-example": [
                "Here is an example where Real-time monitoring of AWS API calls can be extremely useful:\n\nLet's say you are a DevOps Engineer in a company and you're responsible for maintaining the AWS infrastructure. One day, you realize that some resources have unexpectedly been deleted in your AWS environment. These random deletions increase the risk of potential business downtime, which could negatively impact your company's revenue and reputation.\n\nTo prevent such a scenario, you can set up real-time monitoring of API calls using AWS CloudTrail and CloudWatch. By directing CloudTrail Logs to CloudWatch Logs, you can keep track of all API activities happening in your AWS environment, including who made the request, from which IP address the request was made, when the request was made and more.\n\nMoreover, by establishing metric filters and alarms, you can be notified immediately about unusual or unauthorized activities. For instance, if there are repeated failed console authentication attempts happening, it may indicate that someone is trying to break into your AWS account. In this case, an immediate alert from CloudWatch will help your security team promptly respond to the event, limiting the potential damage. \n\nThis is a practical example of where real-time monitoring of AWS API calls can be useful, ensuring the safety, integrity, and smooth operation of your AWS environment."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_3_7",
        "Title": "3.7 Ensure CloudTrail logs are encrypted at rest using KMS CMKs",
        "Description": "AWS CloudTrail is a web service that records AWS API calls for an account and makes those logs available to users and resources in accordance with IAM policies. AWS Key Management Service (KMS) is a managed service that helps create and control the encryption keys used to encrypt account data, and uses Hardware Security Modules (HSMs) to protect the security of encryption keys. CloudTrail logs can be configured to leverage server side encryption (SSE) and KMS customer created master keys (CMK) to further protect CloudTrail logs. It is recommended that CloudTrail be configured to use SSE-KMS.",
        "QueryID": "aws_cloudtrail_trail_logs_encrypted_with_kms_cmk",
        "DocumentURI": "policies/aws_cis_v140_3_7.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "3.7"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "3"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudTrail"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this AWS control can lead to the following costs:\n\n1. **Security Risks:** Not using SSE-KMS may leave your CloudTrail logs vulnerable to unauthorized access or potential data breaches. This can lead to loss of sensitive data, which might have a financial impact, tarnish the reputation of your business and may lead to legal penalties.\n\n2. **Non-Compliance Fines:** Depending on the regulatory standards your business operates under (e.g. GDPR, HIPAA), non-compliance with encryption best practices could result in severe fines or penalties.\n\n3. **Loss of Trust:** In case of a security breach, customer trust could be significantly damaged. This could cost in terms of lost business and reduced brand value.\n\n4. **Data Recovery Costs:** If data is compromised, you may need to spend resources to recover or restore data.\n\n5. **Investigation and Remediation Costs:** Post breach, there will be requirement to investigate the breach source and implement security remediation measures. This takes up resource time and increases operational costs.\n\nIn summary, non-compliance to using SSE-KMS for protecting CloudTrail logs could lead to significant financial, operational, and reputational costs."
            ],
            "x-kaytu-usefulness-example": [
                "For example, consider an organization that deals with sensitive customer data and must comply with strict regulatory compliances, such as the Health Insurance Portability and Accountability Act (HIPAA) in the U.S. The organization uses AWS services to host and process this data. The operations team within this organization frequently uses AWS APIs to access and manage AWS services.\n\nBy enabling AWS CloudTrail, the organization can accurately record all AWS API calls made for an account. This helps track who is accessing what information and when. In case of any suspicious activity or data breach, CloudTrail can provide an audit trail to ascertain the source of the anomaly.\n\nTo further enhance data security, they can configure CloudTrail to use Server Side Encryption (SSE-KMS) with AWS Key Management Service. SSE-KMS provides an extra layer of security by encrypting the log files stored in S3 bucket using keys managed in AWS Key Management Service. The usage of KMS allows stricter control over the encryption keys, such as automatic key rotation, fine-grained access policies, and secure key storage using AWS HSMs.\n\nFor example, the markup snippet below shows how to create a trail with SSE-KMS:\n\n```\naws cloudtrail create-trail --name MyTrail --s3-bucket-name myBucket --kms-key-id alias/MyAliasKey\n```\n\nIn this example, the `create-trail` command creates a trail with the specified name and S3 bucket and uses the specified alias KMS key for encryption.\n\nIn conclusion, combining CloudTrail with SSE-KMS not only fulfills the organization's compliance requirements, but also gives them enhanced control and visibility over their data and operations on AWS."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_3_8",
        "Title": "3.8 Ensure rotation for customer created CMKs is enabled",
        "Description": "AWS Key Management Service (KMS) allows customers to rotate the backing key which is key material stored within the KMS which is tied to the key ID of the Customer Created customer master key (CMK). It is the backing key that is used to perform cryptographic operations such as encryption and decryption. Automated key rotation currently retains all prior backing keys so that decryption of encrypted data can take place transparently. It is recommended that CMK key rotation be enabled.",
        "QueryID": "aws_kms_cmk_rotation_enabled",
        "DocumentURI": "policies/aws_cis_v140_3_8.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "3.8"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "3"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/KMS"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "The cost of non-compliance with this AWS Control, which recommends enabling the AWS Key Management Service (KMS) Customer Master Key (CMK) rotation, includes but not limited to several risk factors:\n\n1. **Security Risk**: If the keys are not rotated on a regular basis, it increases the chances of key exposure. This could allow unauthorized users to access sensitive data, which may result in data breaches.\n\n2. **Non-compliance Penalties**: Not adhering to industry-standard practices and regulations surrounding data encryption and key management could lead to legal penalties and fines, especially in industries such as healthcare or finance, which deal with highly sensitive data.\n\n3. **Reputation Damage**: In case of a data breach due to non-compliance, the public reputation of the organization could severely suffer, leading to customer distrust and potential loss of business. \n\n4. **Loss of Data Access**: CMKs that are not rotated properly or lost cannot decrypt data they had encrypted, leading to potential permanent data loss.\n\nHence, in order to minimize security risks as well as potential non-compliance penalties, it is strongly recommended to regularly rotate the CMKs. The automatic rotation feature offered by AWS KMS ensures that this process happens transparently and does not disrupt the functioning of apps using these keys. It also maintains a seamless encryption and decryption process by retaining all prior backing keys."
            ],
            "x-kaytu-usefulness-example": [
                "Example:\n\nABC Corporation is a global company that has digital assets stored in AWS and needs to maintain a high level of data security due to the sensitive nature of their business. To ensure safety, they use encryption to protect their data.\n\nBy adopting the AWS Key Management Service (KMS), ABC Corporation can rotate, manage, and retire keys as needed securely. Using KMS, they created a Customer Master Key (CMK) with an attached backing key.\n\nRunning a website that processes a lot of personal customer data, ABC Corporation needs to maintain the confidentiality of this data. They encrypt this sensitive data using the backing key associated with the CMK. For each year, a new backing key is generated by AWS KMS due to the enabling of CMK key rotation, ensuring that their security remains tight and up-to-date.\n\nAll previous backing keys are retained, allowing the company to decrypt messages encrypted with older keys, ensuring no data is lost or becomes inaccessible if the key changes.\n\nIn this case, AWS KMS provides ABC Corporation with a hierarchical structure for managing and securing keys used for cryptography, significantly reducing the potential for unauthorized data access or breaches. Automated key rotation feature in KMS ensures that the security hygiene is maintained at an optimum level by renewing the key material at regular intervals."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_7",
        "Title": "4.7 Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for customer created CMKs which have changed state to disabled or scheduled deletion.",
        "QueryID": "aws_log_metric_filter_disable_or_delete_cmk",
        "DocumentURI": "policies/aws_cis_v140_4_7.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.7"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to the mentioned AWS Control(CMK state change monitoring) can lead to several cost implications, including but not limited to:\n\n1. **Financial Loss**: If the CMKs are disabled or deleted without proper authorization, it can lead to data loss. If the lost data was crucial for some form of business analytics or decision making, it might result in financial penalties.\n\n2. **Operational Expenses**: If an unauthorized change occurs, the restoration of services and data can be both time-consuming and expensive. Depending on how critical the data is, you may need to involve emergency IT support, which could significantly increase your operational expenses.\n\n3. **Reputation Damage**: If the CMKs affected are associated with customer data, it might lead to unauthorized access or loss of customer data. Consequently, it might damage reputation, result in loss of customers, and may even attract legal actions.\n\n4. **Non-compliance Penalties**: If your organization is required to comply with specific regulations (like GDPR, HIPAA etc.), non-compliance to these controls might result in hefty non-compliance fines.\n\n5. **Security Costs**: The cost of investigating the breach, identifying the flaws, and reinforcing the security measures can also add up to the cost of non-compliance.\n\nIn summary, neglecting the real-time monitoring and alarming of CMK state changes in AWS can lead to significant and varied costs, which can affect both the short-term financial stability and long-term success of the organization."
            ],
            "x-kaytu-usefulness-example": [
                "For instance, consider a hypothetical scenario where you are working as a Cloud Administrator for XYZ Corp which is involved in dealing with sensitive customer data. Your organization needs to use the AWS Key Management Service (KMS) for encryption and decryption purposes. Each key could potentially be impacting a vast amount of data, and the security of that data can be compromised by the accidental deletion or disabling of these keys.\n\nTherefore, you decide to enable real-time monitoring of any API calls associated with changes in key states for customer created CMKs (Customer Master Keys). This can be achieved by directing CloudTrail Logs to CloudWatch Logs and setting up corresponding metric filters and alarms.\n\nIn the case where any of these CMK's have changed state to disabled or scheduled for deletion, you will receive real-time notifications. This offers you a chance to investigate and potentially prevent any unintended impact on the data security of your company.\n\nThis is especially crucial in a world where compliance and data integrity are paramount and is a prime example of where this AWS control can be useful. Not only does it guarantee the integrity of your sensitive data but it also aids in maintaining regulatory compliance by ensuring encryption keys are not accidentally or maliciously tampered with."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_3_9",
        "Title": "3.9 Ensure VPC flow logging is enabled in all VPCs",
        "Description": "VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. After you've created a flow log, you can view and retrieve its data in Amazon CloudWatch Logs. It is recommended that VPC Flow Logs be enabled for packet \"Rejects\" for VPCs.",
        "QueryID": "aws_vpc_flow_logs_enabled",
        "DocumentURI": "policies/aws_cis_v140_3_9.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "3.9"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "3"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/VPC"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to the AWS Control that recommends enabling VPC Flow Logs for packet \"Rejects\" can result in several negative consequences and potential costs. Here are some key points:\n\n1. **Increased Security Risk**: Without VPC Flow Logs, there is a significant lack of visibility into the IP traffic going to and from the network interfaces. It makes it difficult or even impossible to accurately track and monitor network communications, which could lead to undetected security breaches or unwanted access. This can result in potential data loss or leaking of sensitive information.\n\n2. **Difficulty in Troubleshooting**: In case of any network-related instances rejecting connection requests, the root cause analysis would be challenging without the useful insights provided by VPC Flow Logs.\n\n3. **Regulatory Compliance Issues**: If an organization is operating under regulatory requirements that demand specific network monitoring and logging, then they could face penalties or fines for non-compliance. They could also face the cost of additional audits or scrutiny from regulatory bodies.\n\n4. **Potential Performance Issues**: Without a clear insight into network traffic, performance issues can go undetected. You may end up spending more resources on troubleshooting and recovery.\n\n5. **Loss of Reputation**: In case of a security breach due to the lack of appropriate monitoring and logs, and if it becomes public knowledge, the company stands to lose customer trust and damage to its reputation which can have long-term financial implications.\n\n6. **Costs Related to Rectification**: If issues are detected later, the cost of rectification and mitigation could be high. This might include system downtime, loss of productivity, and increased workload for the IT team.\n\nTo summarize, while the above is not a comprehensive list, these are illustrative of the type and scale of costs that can potentially be incurred through non-compliance with this AWS control. It emphasizes the importance of enabling VPC Flow Logs for packet \"Rejects\" for VPCs."
            ],
            "x-kaytu-usefulness-example": [
                "Example instance:\n\nA company, ABC Corp., has their server architecture set up in a virtual private cloud (VPC). However, they have been experiencing repeated attempts of unauthorized access to their servers. The administrators are struggling to isolate the source and destination IP addresses causing these security issues. \n\nBy enabling VPC Flow Logs, specifically capturing packet \"Rejects\", they can monitor all the IP traffic going to and from their servers. VPC Flow Logs will provide data on rejected connections showing the source IP, destination IP, port, protocol, and whether the traffic was allowed or denied.\n\nBy further integrating this functionality with Amazon CloudWatch Logs, ABC Corp. can retrieve, filter, and analyze this logged data. This can help the company identify the source of these repeated unauthorized access attempts, assisting in taking necessary steps towards improving their network security. \n\nAlso, setting alerts based on certain patterns or conditions (like multiple rejected connections from the same IP in a short interval of time), they can proactively respond to potential threats. This will bolster their security stack thus safeguarding the network from potential unwarranted breaches."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_8",
        "Title": "4.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.",
        "QueryID": "aws_log_metric_filter_bucket_policy",
        "DocumentURI": "policies/aws_cis_v140_4_8.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.8"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to this AWS control could potentially lead to substantial costs, both financial and reputational, for the organization. Below are the possible risks and costs associated with non-compliance:\n\n1. **Unauthorized Access and Data Leak:** Without monitoring API calls, malicious actors may make undesired changes to S3 bucket policies, which could lead to unauthorized access or data leaks. This could result in hefty fines for violating data protection laws and the cost to recover from data breaches.\n\n2. **Regulatory Fines:** Depending on the industry and the kind of data an organization deals with, the inability to audit and monitor changes to S3 bucket policies might result in non-compliance with regulatory standards (for example, HIPAA, GDPR, etc.), causing fines and penalties. \n\n3. **Operational Disruption:** Unmonitored changes to S3 bucket policy could lead to unintended operational disruptions. For instance, incorrect policy adjustments can result in denied access to necessary data, causing a business interruption, which might lead to financial losses. \n\n4. **Reputation Damage:** A data breach due to lack of API monitoring could result in a loss of customer trust and damage an organization's reputation. The indirect cost of losing business due to reputational harm can be substantial.\n\n5. **Incident Response Cost:** Without real-time monitoring, detecting and responding to security incidents are delayed. The longer it takes to identify a breach, the costlier it becomes to rectify it, including the potential cost of forensic investigations and remediation activities.\n\nTherefore, monitoring API calls as per the control mentioned will not only help in maintaining security but also in reducing risks and the subsequent costs of non-compliance."
            ],
            "x-kaytu-usefulness-example": [
                "For example, imagine a situation where you have a business that stores sensitive customer data in an S3 bucket. Without a proper security measure, this bucket might potentially be accessed by unauthorized users who could modify your S3 bucket policies and then access or even delete your data, causing serious damage to your business.\n\nBy establishing a metric filter and alarm for changes to S3 bucket policies in CloudWatch, you can keep track of every API call that attempts to modify your S3 bucket policies. These logs can prove extremely useful in identifying any unauthorized attempts to change your security policies. \n\nFor instance, you would set a filter pattern like `{ ($.eventName = PutBucketPolicy) || ($.eventName = DeleteBucketPolicy) }`.\n\nAny events that match this filter pattern will trigger an alarm. You can configure this alarm to send a notification to your security team or even automatically revoke the unauthorized changes.\n\nThis ensures real-time monitoring and quick response to policy changes, thereby enhancing your security measures to protect the sensitive data of your business in AWS."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_9",
        "Title": "4.9 Ensure a log metric filter and alarm exist for AWS Config configuration changes",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.",
        "QueryID": "aws_log_metric_filter_config_configuration",
        "DocumentURI": "policies/aws_cis_v140_4_9.md",
        "ManualVerification": false,
        "Severity": "Medium",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.9"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "Medium"
            ],
            "x-kaytu-noncompliance-cost": [
                "The cost of non-compliance to this AWS control can be both financial and reputational in nature, leading to potential data breaches, business disruptions, and failure to meet regulatory compliance, all of which can incur significant costs. \n\nBelow are some of the potential costs:\n\n1. **Security Costs:**\n  - Non-compliance may lead to undetected security breaches, data leaks or unauthorized data access. The potential losses due to these security incidents can cost millions in revenue, fines, and lawsuits.\n\n2. **Operational Costs:**\n  - Without real-time monitoring, malicious activities, errors, or system glitches can go undetected, leading to business disruptions or system downtimes. Such business interruptions can significantly harm your productivity and revenues.\n\n3. **Compliance Costs:**\n  - If you're operating under regulatory requirements that mandate real-time monitoring, non-compliance could lead to massive fines and penalties. In addition, failure to comply may affect your ability to do business in certain regions or industries.\n\n4. **Reputational Costs:**\n  - A data breach or system failure can cause significant reputational damage. Customers may lose trust in your ability to protect their data, while partners may question your operational reliability. This could lead to loss of customers or potential business opportunities.\n\n5. **Remediation Costs:**\n  - If a breach or malfunction is detected late, it can be much more costly to resolve than if it was detected early with real-time monitoring. This could involve costs to repair systems, recover lost data, or compensate affected customers.\n\nIn summary, non-compliance to the AWS control of real-time monitoring of API calls by directing CloudTrail Logs to CloudWatch Logs can result in substantial costs, ranging from potential security breaches, operational disruptions, potential fines and penalties, loss of customer trust, and increased costs associated with late detection of issues."
            ],
            "x-kaytu-usefulness-example": [
                "For instance, a multinational e-commerce company, XYZ Corp, uses AWS for their e-commerce platform which involves several API calls for different functionalities such as user login, product search, payment processing, etc. \n\nAny security breach or malfunction in these API calls may lead to significant loss to the company. Here comes the usefulness of real-time monitoring of API calls using CloudTrail Logs and CloudWatch Logs. By setting up a metric filter and alarm for detecting changes to CloudTrail's configurations, XYZ Corp can monitor any unusual changes in API calls.\n\nIf there's any unexpected change in API behavior i.e. an unexpected increase/decrease in certain type of API calls, or alteration in CloudTrail configurations, the system would instantly alarm the responsible team. \n\nThis feature can help the corporation in identifying a possible security breach by an attacker attempting to change the CloudTrail logs or detect a bug in real-time that might be causing the malfunction of an API. Thus, this AWS control helps in maintaining the efficiency of the platform while maintaining a high level of security."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_10",
        "Title": "1.10 Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password",
        "Description": "Multi-Factor Authentication (MFA) adds an extra layer of authentication assurance beyond traditional credentials. With MFA enabled, when a user signs in to the AWS Console, they will be prompted for their user name and password as well as for an authentication code from their physical or virtual MFA token. It is recommended that MFA be enabled for all accounts that have a console password.",
        "QueryID": "aws_iam_user_console_access_mfa_enabled",
        "DocumentURI": "policies/aws_cis_v140_1_10.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.10"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "The cost of non-compliance to the Multi-Factor Authentication (MFA) control can be quite significant in terms of the potential risks and consequences it can bring to a company. They are elaborated below:\n\n1. **Data Breach:** If MFA is not enabled, it becomes easier for malicious actors to gain unauthorized access to your AWS console. Even if they get hold of the correct user name and password, they won't be able to access the console without the authentication code provided by the MFA token. A data breach can lead to the loss or unauthorized exposure of sensitive information, which can lead to reputational damage and significant financial losses.\n\n2. **Increased Vulnerability:** Without MFA, your AWS Console account is only as secure as the user's password. If a password is compromised, there’s nothing to stop an attacker from accessing your resources.\n\n3. **Compliance Violations:** Several compliance standards, like GDPR, PCI DSS, and HIPAA, require MFA. Non-compliance not only leads to heavy fines but also may lead to the loss of trust from customers and business partners.\n\n4. **Operational Disruption:** In case of a security incident, normal business operations may be disrupted, impacting productivity and potentially leading to financial losses.\n\n5. **Cost of Incident Response:** If an incident occurs, significant resources (both time and monetary) may have to be spent on incident response, investigation, mitigation, and recovery from the cybersecurity incident.  \n\nIn conclusion, while implementing MFA might require some effort and cost, the cost of non-compliance can be far greater. Therefore, it is recommended to be compliant with MFA to decrease the vulnerability of your AWS Console and improve your security posture."
            ],
            "x-kaytu-usefulness-example": [
                "Example:\n\nConsider a scenario where an e-commerce company relies heavily on AWS to run their applications and store sensitive data such as credit card details, customer details, etc. Admin access to these resources is an all-powerful privilege, as this account can read, write, and modify any resource. \n\nWithout MFA, if the admin credentials were somehow compromised, the attacker would have full access to all the AWS resources and could potentially cause irreparable damage to the company. \n\nHowever, with MFA enabled, even if the user name and password were compromised, the attacker would be unable to access the resources without the additional authentication code generated by the MFA token. This significantly reduces the risk of unauthorized access and potential data breaches. \n\nThis is just one instance showcasing the usefulness of MFA. In general, for any organization using AWS, enabling MFA provides a more secure environment by adding an extra layer of protection for AWS resources."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_11",
        "Title": "1.11 Do not setup access keys during initial user setup for all IAM users that have a console password",
        "Description": "AWS console defaults to no check boxes selected when creating a new IAM user. When creating the IAM User credentials you have to determine what type of access they require.",
        "QueryID": "aws_iam_user_access_keys_and_password_at_setup",
        "DocumentURI": "policies/aws_cis_v140_1_11.md",
        "ManualVerification": false,
        "Severity": "Low",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.11"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "manual"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Low"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with the concrol that AWS console defaults to no check boxes selected can bear significant costs:\n\n1. **Unintentional Data Access:** Not defaulting to no check boxes selected can lead to the accidental provision of unnecessary access rights. This can result in data leaks, which can potentially expose sensitive data to unauthorized users.\n\n    Costs: Data breaches which can result in significant financial losses, reputational damage and loss of confidence by clients or stakeholders. \n\n2. **Security Threats:** By unintentionally giving more access rights originally intended, the potential surface area for malicious attacks increases. \n\n    Costs: Costs associated with addressing, managing and remediating security breaches. This can also result in hefty fines or penalties in case of regulatory non-compliance.\n\n3. **Non-Compliance with Regulations:** If the organization operates under GDPR, HIPAA or other privacy laws and regulations, non-compliance to this control can lead to breaches in these regulations.\n\n    Costs: Fines and penalties for non-compliance with data privacy laws. This could amount to millions of dollars depending on the size of the organization and the severity of the breach.\n\n4. **Higher Operational Costs:** With more employees having access rights they do not need, operational costs can increase, as more training might be needed, and there could be greater risks of errors.\n   \n    Costs: Increased capital expenditure and operating costs.\n   \n5. **Less Organized Infrastructure:** If changes are made to the system and multiple users have overly broad access, it can make it difficult to pinpoint who made a change and why.\n\n    Costs: Potential disruption to business operations and increased IT complexity.\n\n\nIt's very important to ensure the principle of least privilege is followed to restrict the access rights for any user based on what's necessary to perform their tasks."
            ],
            "x-kaytu-usefulness-example": [
                "For example, a company has recently hired a new software developer, Sarah, who is required to have access to the AWS environments managing the company's applications. However, Sarah only needs read-only permissions, not full access to manage the systems, as these responsibilities belong to the system administrator.\n\nWhen the system administrator is creating a new IAM user for Sarah in the AWS console, by default, no check boxes are selected when it comes to defining access and permissions to AWS services and resources. This feature forces the system administrator to consciously and deliberately grant Sarah the necessary permissions she needs, which in this case, read-only access to certain AWS services.\n\nThis reduces the risk of accidentally providing Sarah with more permissions than required, promoting a principle of least privilege, where users are granted the minimum levels of access – or permissions – necessary to complete their job functions. In turn, this enhances the security of AWS resources and prevents unwanted changes or potential breaches."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_20",
        "Title": "1.20 Ensure that IAM Access analyzer is enabled for all regions",
        "Description": "Enable IAM Access analyzer for IAM policies about all resources in each region. IAM Access Analyzer is a technology introduced at AWS reinvent 2019. After the Analyzer is enabled in IAM, scan results are displayed on the console showing the accessible resources. Scans show resources that other accounts and federated users can access, such as KMS keys and IAM roles. So the results allow you to determine if an unintended user is allowed, making it easier for administrators to monitor least privileges access. Access Analyzer analyzes only policies that are applied to resources in the same AWS Region.",
        "QueryID": "aws_iam_access_analyzer_enabled",
        "DocumentURI": "policies/aws_cis_v140_1_20.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.20"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "The cost of non-compliance to the AWS control of enabling IAM Access Analyzer for IAM policies for all resources in each region can lead to several risks and potential issues:\n\n1. **Security Risk:** Without enabling Access Analyzer, you may have unidentified overly permissive access to your resources. Thus, the risk of unauthorized access, data breaches, and other security incidents increase.\n\n2. **Compliance Risk:** For organizations that need to comply with various regulations such as GDPR, HIPAA, or PCI DSS, not enabling IAM Access Analyzer can lead to non-compliance. Non-compliance can result in hefty fines, legal implications, and damage to the organization's reputation.\n\n3. **Operational Risk:** Overly permissive policies can allow users to perform actions that can negatively impact the operation of AWS services. This could cause potential service disruption.\n\n4. **Increased Costs**: In case of a security incident due to the non-compliance, the costs associated with investigating the breach, mitigating the damage, and potentially recovering lost or compromised data can be substantial.\n\n5. **Audit Failures**: During internal or external audits, the absence of necessary IAM Access Analyzer could lead to audit failures leading to reputational damages, loss of customer trust, or loss of business opportunities.\n\nImplementing IAM Access Analyzer across all resources and regions should be a priority for AWS users as it helps to minimize the risk of security breaches and ensures organization-wide compliance with AWS best practices and other regulatory compliance requirements."
            ],
            "x-kaytu-usefulness-example": [
                "- **Monitor Security Risk**: AWS IAM Access Analyzer allows administrators to keep track of their entire AWS environment in one place. It helps ensure that resources are correctly set up and that security risks are minimized, providing peace of mind.\n\n  ```\n  Example: \n  A small tech company runs several services across a variety of AWS resources, including EC2 instances, RDS databases, and S3 buckets. The security team enables IAM Access Analyzer to monitor and analyze policies on these resources. By reviewing the Analyzer's scan results, they can quickly identify and address any security issues or access permissions that need to be tightened, reducing their vulnerability to data breaches or other security incidents.\n  ```\n\n- **Simplify Compliance**: AWS IAM Access Analyzer aids organizations in their efforts to keep up with compliance requirements, such as PCI DSS or ISO 27001. Its built-in functionality makes managing access controls more straightforward and compliance reports easier to generate.\n\n  ```\n  Example:\n  A healthcare data company that needs to comply with HIPAA regulations uses IAM Access Analyzer to regularly scan their IAM policies. This helps them prove they're following best practices for access control, making it easier to meet compliance requirements and pass audits.\n  ```\n\n- **Alert on Unexpected Permissions**: Enable AWS IAM Access Analyzer to set up alerts whenever it discovers unanticipated or overly permissive access privileges. This proactive approach can minimize damage from unauthorized access by providing real-time monitoring and alerts.\n\n  ```\n  Example:\n  A financial services company has set up the IAM Access Analyzer to monitor IAM policies across all their AWS resources. Whenever the Analyzer finds an overly permissive policy, the company gets alerted and acts quickly to revoke the unneeded permissions, helping prevent unauthorized access or data leaks.\n  ```"
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_3_10",
        "Title": "3.10 Ensure that Object-level logging for write events is enabled for S3 bucket",
        "Description": "S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.",
        "QueryID": "aws_cloudtrail_s3_object_write_events_audit_enabled",
        "DocumentURI": "policies/aws_cis_v140_3_10.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "3.10"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "3"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/S3"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "The cost of non-compliance to the AWS control that recommends enabling object-level logging for S3 buckets can be significant. S3 object-level API operations, or data events, are key actions performed on data objects stored in an S3 bucket, such as GetObject, DeleteObject, and PutObject. By default, AWS CloudTrail doesn't log these data events. \n\nNot enabling object-level logging could lead to:\n\n1. **No Audit Trails:** A lack of detailed audit trails for every object-level operation in S3. This might make it difficult to trace actions back to the originating request, especially in the event of a data breach or other unauthorized activity.\n\n2. **Less Visibility:** With less visibility and tracking for data events, troubleshooting operational issues might be difficult. This might also make it harder to identify and address performance bottlenecks.\n\n3. **Lack of Compliance:** In regulated industries or environments with stringent security policies, not having comprehensive event logs might result in non-compliance with required standards or policies, potentially leading to fines, penalties, and reputational damage.\n\n4. **Security Risks:** Inability to monitor data events could increase your vulnerability to security risks. Detailed logs might help you identify patterns indicating potential security threats, such as repeated unauthorized access attempts.\n\nIn terms of financial cost, although enabling object-level logging does come with additional charges, the potential cost of security breaches, non-compliance fines, and operational inefficiencies might outweigh this expenditure."
            ],
            "x-kaytu-usefulness-example": [
                "Assume a company XYZ stores sensitive customer data in multiple S3 buckets. To adhere to their security policy and compliance requirements, they need to keep track of every object-level operation. \n\nFor example, if an employee or intruder tries to access (GetObject), delete (DeleteObject), or modify (PutObject) any object, the company needs to have a record of these events for audit purposes.\n\nThis is where Object-Level logging comes in handy. By enabling Object-Level logging for their S3 buckets, all these operations will be logged by AWS CloudTrail. This provides the security team with insights about when, by whom, and from where the data was accessed or modified.\n\nThis is how the company can leverage Object-Level API operations logging in their AWS S3 service, ensuring their data safety and meeting regulatory prerequisites. It will help in maintaining a secure, audit-friendly environment and resolving any data breaches quicker and more effectively."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_12",
        "Title": "1.12 Ensure credentials unused for 45 days or greater are disabled",
        "Description": "AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 45 or greater days be deactivated or removed.",
        "QueryID": "aws_iam_user_unused_credentials_45",
        "DocumentURI": "policies/aws_cis_v140_1_12.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.12"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this AWS Control can lead to several costly outcomes:\n\n1. Security Risks: Credentials that haven't been used for 45+ days may indicate an unused account that is an easy target for nefarious activity. If an attacker gains access to these credentials, they could compromise your system's security.\n\n2. Financial Impact: Unauthorized access can control Amazon EC2 instances, RDS instances or other AWS services which can lead to unauthorized resource usage. This can incur unexpected financial costs if they use your resources to perform their activities.\n\n3. Compliance Violations: Depending on your industry, non-compliance can result in hefty fines or legal consequences. For instance, healthcare industries need to comply with HIPAA regulations that require demonstrated control over access to systems containing patient data.\n\n4. Reputation Damage: In case of a breach, the damage to a company's reputation can be significant and result in the loss of customer trust and business.\n\n5. Operational Disruption: Unauthorized access or usage can disrupt your operations, application performance, and even lead to downtime.\n\n```markdown\n- **Security Risks**: Unused credentials are attractive targets for attackers to compromise your system's security. \n\n- **Financial Impact**: Unauthorized access can use your AWS resources, leading to unexpected charges.\n\n- **Compliance Violation**: Not meeting regulations (like HIPAA) can result in fines or legal consequences. \n\n- **Reputation Damage**: A security breach can damage your reputation, resulting in the loss of customer trust and business.\n\n- **Operational Disruption**: Unauthorized usage can cause disruption to your operations, application performance and can lead to downtime.\n```\nBy ensuring that all unused credentials are deactivated, you significantly reduce these risks."
            ],
            "x-kaytu-usefulness-example": [
                "For example, let's imagine a scenario within a medium-sized technology company, where an employee named John was assigned to work on a project involving AWS resources a few months ago. After the project, he was reassigned to work on different tasks not related to AWS. His IAM user credentials for accessing AWS resources remain active but unused for over two months.\n\nHaving unused credentials is a security risk. In case of a security breach, these unused access keys or passwords can be exploited by perpetrators to gain unauthorized access to company's AWS resources.\n\nUsing the recommended AWS control, you can identify such unused credentials (like John's) and deactivate or remove them, further tightening the security of your AWS environment. \n\n```markdown\n- Identify IAM User Credentials Unused for 45 or More Days\n  - User: John Doe \n  - Last Used Date: Over 2 months ago\n  - Credential: Access Keys\n  - Current Status: Active\n  - Recommended Action: Deactivate or Remove\n```\n\nBy applying this control, high-profile security risks could be mitigated, leading to a robust, safe, and efficient system. This proves helpful in ensuring efficient access management and maintaining the security of the AWS resources with compliance to the best security practices."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_21",
        "Title": "1.21 Ensure IAM users are managed centrally via identity federation or AWS Organizations for multi-account environments",
        "Description": "In multi-account environments, IAM user centralization facilitates greater user control. User access beyond the initial account is then provide via role assumption. Centralization of users can be accomplished through federation with an external identity provider or through the use of AWS Organizations.",
        "QueryID": null,
        "DocumentURI": "policies/aws_cis_v140_1_21.md",
        "ManualVerification": true,
        "Severity": "Medium",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.21"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "manual"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Medium"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this AWS control can result in several potential costs, in terms of both financial loss and risk management. Here are a few potential consequences:\n\n1. **Increased Operational Costs**: Without centralization, it becomes a challenge to manage IAM users across multiple accounts. This can lead to increased manpower hours, higher overhead costs, and inefficient use of resources, thereby escalating operational costs.\n\n2. **Poor Access Control and Security Risks**: Lack of centralization may lead to improper distribution of access rights, resulting in potential security risks or data breaches. Such incidents can attract hefty fines, penalties, and potential loss to business due to reputational damage.\n\n3. **Non-compliance to Regulatory Standards**: Not having centralized IAM users can result in non-compliance to regulatory standards like GDPR, HIPAA, etc. Failing to comply with these standards can lead to significant penalties and fines.\n\n4. **Inefficient Auditing and Tracking**: It can prove difficult to track user activities and perform periodic audits in the absence of IAM user centralization. This could potentially impact the ability of an organization to swiftly detect and respond to fraudulent activities.\n\n5. **Increased Complexity**: The maintenance of user credentials across multiple accounts adds complexity to the IAM structure of the organization. This could lead to higher chances of error, system vulnerabilities, and inefficient management of user permissions. \n\n6. **Impedes Seamless Collaboration**: Lack of IAM centralization could impede seamless access and collaboration across different teams and departments, negatively affecting productivity and operational efficiency.\n\nTo avoid these costs, businesses should aim to comply with AWS best practices for IAM user centralization. Well-managed IAM operations bolster a company's overall cloud strategy, enhancing security, efficiency, compliance, and bottom-line results."
            ],
            "x-kaytu-usefulness-example": [
                "An example of the usefulness of user centralization in AWS could be in a large organization experiencing rapid growth. Say, the organization has multiple AWS accounts for different departments or projects and is continuously adding more users who need access to these resources.\n\nTracking who has access to what in this environment could become complicated, time-consuming, and error-prone, leaving the organization open to potential security risks.\n\nBy implementing IAM user centralization, the organization can control user access from one central location. If the organization has an external identity provider, they can use federation to centralize users. Alternatively, they can utilize AWS Organizations. This makes managing user access more efficient and secure.\n\nAdditionally, by providing access beyond the initial account through role assumption, the organization promotes the principle of least privilege — users only get the permissions they need to perform their tasks and nothing more, further enhancing security.\n\nFor instance, a user from the Finance department who only needs to view billing information shouldn't have access to confidential HR information. Through IAM user centralization, respective roles can be assumed based on the need, thus ensuring secure and controlled access."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_10",
        "Title": "4.10 Ensure a log metric filter and alarm exist for security group changes",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Groups are a stateful packet filter that controls ingress and egress traffic within a VPC. It is recommended that a metric filter and alarm be established for detecting changes to Security Groups.",
        "QueryID": "aws_log_metric_filter_security_group",
        "DocumentURI": "policies/aws_cis_v140_4_10.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.10"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with the AWS Control focused on Security Groups can lead to substantial operational and security risks which translate into significant costs. Here are some of the potential costs:\n\n1. **Potential Data Breaches**: If there is no real-time monitoring of API calls and no detection system for changes to Security Groups, it can result in unauthorized access to critical resources, leading to data breaches. The cost of a data breach includes immediate financial loss, the cost of forensic investigation, system enhancements, potential regulatory fines, customer restitution, and the long-term costs associated with lost customer trust.\n\n2. **Operational Disruption**: Unauthorized changes to security groups can lead to misconfigurations that disrupt normal operations. This can lead to downtime, the cost of which depends on the scale of operations, revenue loss during the disruption period, and the overall impact it has on the business continuity.\n\n3. **Regulatory Fines**: Many industries are subject to regulations that require certain security controls, including monitoring of security relevant events. Violations of such regulations can result in hefty fines from the regulatory bodies.\n\n4. **Increased Audit Costs**: If security event monitoring and alerting controls aren't in place, this might increase the workload for periodic audits as auditors need to manually check the logs, thus increasing auditing costs.\n\n5. **Incident Response \u0026 Recovery Costs**: Without the ability to quickly detect and respond to unauthorized changes, the cleanup and recovery cost after an incident can be substantial.\n\n6. **Reputation Damage**: If a breach occurs or your service gets disrupted due to attacks, it will cause serious damage to your brand reputation which could lead to loss of customers and revenue.\n\nOverall, non-compliance to this AWS Control isn't just about exposing yourself to potential cyber threats, but it can also trigger a series of additional expenses that can be harmful to the organization."
            ],
            "x-kaytu-usefulness-example": [
                "Example: \n\nLet's say a company named Acme Inc. uses AWS infrastructure to host its applications. The applications are all API-based and they have established VPC security groups to control and manage inbound and outbound traffic. \n\nOne day, an unintentional change on the security group's rule opens up an insecure port, exposing sensitive data to potential hackers. \n\nBy using Amazon CloudTrail logs directed to CloudWatch Logs with established metric filters and alarms, Acme Inc can monitor any changes that are made to their security groups. An alarm is generated when such event occurs. In this case, they can act promptly, identify the unintentional change, and revert back the security group's rules to its secure state.\n\nThis way, Acme Inc. maintains its robust security posture, mitigates risk, and avoids potential data breaches or hacker attacks. This instance clearly shows the usefulness of real-time monitoring of API calls by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_13",
        "Title": "1.13 Ensure there is only one active access key available for any single IAM user",
        "Description": "Access keys are long-term credentials for an IAM user or the AWS account root user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API (directly or using the AWS SDK).",
        "QueryID": "aws_iam_user_one_active_key",
        "DocumentURI": "policies/aws_cis_v140_1_13.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.13"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to managing access keys in AWS could lead to several potential costs such as:\n\n1. **Security Breach Costs:** If access keys are not properly managed, they can potentially end up in the wrong hands, leading to malicious activities such as unauthorized data access, manipulation or deletion of data, initiating large scale attacks, mining cryptocurrency, etc, on your AWS resources.\n\n    This can also lead to data breaches and leakage of sensitive information which could cost millions in recovery, legal fines and reputation damage.\n\n2. **Financial Costs:** Unauthorized access can also lead to excessive use of AWS resources which will significantly increase the AWS costs. For example, an attacker might spin up large EC2 instances for bitcoin mining which can lead to enormous costs.\n\n3. **Compliance Costs:** If the organization is subject to certain regulatory requirements (like HIPAA, GDPR, PCI-DSS etc.), non-compliance to access key management could lead to penalties and fines.\n\n4. **Operational Costs:** Incidents happening due to improper management of access keys could lead to system downtime, data loss and other operational issues which would require a significant amount of time and resources to resolve.\n\nTherefore, to mitigate these risks, it is recommended to:\n- Rotate access keys regularly.\n- Do not share access keys.\n- Remove unused access keys.\n- Enable MFA (Multi-Factor Authentication).\n- Use AWS provided tools to audit and monitor access key usage."
            ],
            "x-kaytu-usefulness-example": [
                "For instance, a developer is building an application that needs to interact with an AWS service - let's say, to store files in an AWS S3 bucket. To perform this, the application needs to authenticate itself with AWS.\n\nHere, Access keys step in. The developer can create Access keys (an Access key ID and Secret Access key) for an IAM user that has the necessary permissions for the S3 bucket. These keys are then incorporated into the application to sign the programmatic requests made to AWS.\n\nAs a result, whenever the application needs to store a file in the S3 bucket, it sends a request to AWS, which is signed with these Access keys. AWS uses the keys to verify the identity of the application and the authenticity of the request. If validated, AWS will process the request - in this case, to store the file in the specified S3 bucket.\n\nResetting or rotating the keys on a regular basis improves the security of the AWS account. If the keys are ever compromised, they can be deactivated immediately, mitigating potential unauthorized access or use."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_3_11",
        "Title": "3.11 Ensure that Object-level logging for read events is enabled for S3 bucket",
        "Description": "S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.",
        "QueryID": "aws_cloudtrail_s3_object_read_events_audit_enabled",
        "DocumentURI": "policies/aws_cis_v140_3_11.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "3.11"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "3"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/S3"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with the AWS Control for object-level API operations logging in S3 buckets can have potential financial, security and reputational costs. \n\nOperational Cost: If you're not logging events when objects are accessed, modified or deleted, your ability to troubleshoot operational issues might be compromised. For example, if data is unintentionally modified or removed, without event logging you may not be able to determine what happened. This could lead to significant time and resources being spent on incident analysis and remediation.\n\nSecurity Cost: Data is a prime target for cyber attacks, so monitoring and auditing access to that data is crucial for awesome security. Without enabling detailed logging for S3 objects, you may not be able to identify unauthorized access or malicious activities, increasing the risk of data breaches.\n\nSupervisory Cost: Non-compliance with this control can lead to violations of regulatory compliance mandates or breach of customer trust. Many industry regulations and standards require detailed access and modification logs for critical data. Failure to maintain these detailed logs can lead to non-compliance fines, scrutiny by regulatory bodies, possible legal action and potentially losing the trust of your customers.\n\nHence, it's critically important to enable Object-level logging for S3 buckets to mitigate these risks and costs. By doing so, you increase your operational efficiency, enhance your security posture, ensure regulatory compliance and maintain customer trust."
            ],
            "x-kaytu-usefulness-example": [
                "Instance:\n\nA company named \"XYZ\" offers cloud-based storage solutions to its clients. It utilizes Amazon S3 buckets to maintain and manage user's files. However, they recently noticed some suspicious activities in a client's storage bucket and found out that some files were deleted or modified unknowingly. \n\nIn order to monitor detailed object-level activities in the future, they decide to enable S3 object-level API operations using AWS CloudTrail. By setting up CloudTrail data event logging, every GetObject, DeleteObject, and PutObject operation is captured and logged. This includes useful information such as the requester, bucket name, request time, request parameters, and more. \n\nWith this information in hand, XYZ Company can now not only identify what was done (e.g., whether a file was accessed, modified, or deleted), but by whom, at what time, and other fine details. If a similar suspicious event arises again, they can easily track down the activity to its root cause and take appropriate action quickly. \n\nThis is just one example of how the AWS Control, such as S3 object-level API operations in CloudTrail, can be useful for an AWS user. It ensures security, auditability and helps in troubleshooting without impacting the system's performance."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_11",
        "Title": "4.11 Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL)",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. NACLs are used as a stateless packet filter to control ingress and egress traffic for subnets within a VPC. It is recommended that a metric filter and alarm be established for changes made to NACLs.",
        "QueryID": "aws_log_metric_filter_network_acl",
        "DocumentURI": "policies/aws_cis_v140_4_11.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.11"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to the AWS control related to real-time monitoring of API calls and changes made to NACLs may result in various potential consequences impacting cost, security, and business operations. Here are few possible costs:\n\n1. **Increased Security Risk:** Without monitoring and alerting on API calls and changes made to NACLs, it could increase vulnerability to security threats. This possibly means you won't notice malicious activity until the damage is done, leading to expensive security breaches.\n\n2. **Costs of Breach Remediation:** Costs associated with a security breach can be very expensive. The data breach cost includes investigating the breach, implementing security measures post-incident, potential regulatory fines, and possible litigation.\n\n3. **Downtime Costs:** If a malicious modification occurs (like Denial-of-Service (DoS) attack) due to weak monitoring of NACLs, it could lead to service interruptions, which would result in potential revenue loss due to downtime and possibly damage to your brand reputation.\n\n4. **Potential Regulatory Violations and Fines:** If your company needs to comply with regulations like GDPR, HIPAA, PCI DSS, strict monitoring of API calls and NACLs changes are important. Non-compliance might lead to steep fines for violations.\n\n5. **Forensics Costs:** Without traceable information regarding API transactions and network access control, the efforts to determine the root cause of any security issue or incident will be considerably hampered and costlier.\n\nTherefore, ensuring compliance with this AWS control is critical to maintaining a secure and healthy infrastructure in the AWS ecosystem by reducing the risk of unauthorized and potentially malicious changes to network access controls and API calls."
            ],
            "x-kaytu-usefulness-example": [
                "Let's say a company named `FastTech` uses Amazon Web Services (AWS) to manage their project's resources, and they have a Virtual Private Cloud (VPC) where they have created various subnets for different applications. Their data is sensitive and they want to make sure they control the traffic that comes in and goes out of the subnets. Thus, they decide to use Network Acess Control Lists (NACLs) to secure their traffic.\n\nIn their AWS infrastructure, they also use various APIs for their services and applications. To ensure the security and integrity of their API usage, they leverage AWS CloudTrail, capturing the logs of their AWS services that are based on API calls.\n\nIn this scenario, real-time monitoring of API calls made by `FastTech` would prove useful. By directing CloudTrail Logs related to API calls to CloudWatch Logs, they would be able to monitor any API call anomalies, unexpected behaviors, or suspicious activities in real-time, allowing them to take immediate action to prevent potential cyber-attacks or breaches.\n\nThe recommended establishment of a metric filter and alarm for changes made to NACLs would be helpful for `FastTech` as well. Any change in NACLs could potentially alter the security posture of the applications running on the subnets. Therefore, by setting an alarm, `FastTech` would be notified instantly any time changes occur in the NACLs, allowing them to review and react immediately to the changes, thus preventing any potential security mishaps or data leaks."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_14",
        "Title": "1.14 Ensure access keys are rotated every 90 days or less",
        "Description": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.",
        "QueryID": "aws_iam_user_access_key_age_90",
        "DocumentURI": "policies/aws_cis_v140_1_14.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.14"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "The cost of non-compliance to this AWS Control can be explained in the following aspects:\n\n1. **Security Risk**:\n\n   Non-compliance to this control may lead to a severe security risk. If the access keys are not regularly rotated, there is a high chance of them getting compromised. This can potentially lead to unauthorized access to your AWS services and data. In worst scenarios, your AWS resources can be misused by unauthorized persons causing significant loss and damage.\n\n2. **Financial Loss**:\n\n   In case of access key compromise due to non-compliance, unauthorized users can potentially have access to your AWS resources and services. They may start or terminate services at will, causing significant financial costs. Especially if pay-per-use services are tampered with, unnoticed usage can lead to large unexpected bills.\n\n3. **Data Breaches**:\n\n   More often than not, data breaches result from compromised access keys. This could lead to legal implications based on the nature of the data that is exposed. Regulatory fines and litigations can cost heavily, not to mention the loss of reputation and trust among customers and stakeholders.\n\n4. **Regulatory Non-Compliance**:\n\n   If your organization is subjected to regulatory requirements such as GDPR, HIPAA, PCI-DSS etc., non-compliance with access key rotation may lead to inability to meet the regulatory requirements that mandate a strong access control and security measure. Failure to comply can result in regulatory penalties and reputational damage.\n\n5. **Operational Interruption**:\n\n   Non-compliance could also potentially lead to operational interruption. In the event of a security threat from a non-rotated access key, the key would need to be deactivated. This could interrupt the systems or application relying on them, thereby causing operational disruption.\n\nIn conclusion, it's in the best interest of the organization to ensure compliance with the AWS control for regular rotation of access keys."
            ],
            "x-kaytu-usefulness-example": [
                "**Example Instance:**\n\nImagine you are running a web application that is hosted on AWS and uses several AWS services such as Amazon S3 for storage, Amazon DynamoDB for database, AWS Lambda for serverless computing, etc. \n\nIn order to interact with these services programmatically (for example, to upload a file to an S3 bucket or to query a DynamoDB table), your application will need to authenticate with AWS. \n\nThis is where access keys come into play. \n\nYou can create an IAM (Identity and Access Management) user with necessary permissions and generate an access key ID and secret access key for that user. \n\nIn your application's code, you can use AWS SDK and these access keys to make authenticated requests to the AWS services. \n\nFor example, to upload a file to an S3 bucket using AWS SDK for JavaScript, you would initialize the S3 client with your access keys like this:\n\n```\nvar AWS = require('aws-sdk');\n\nAWS.config.update({\n  accessKeyId: 'your-access-key-id', \n  secretAccessKey: 'your-secret-access-key', \n  region: 'us-west-2'\n});\n\nvar s3 = new AWS.S3();\n```\n\nAnd then you can call `s3.upload()` function to upload a file:\n\n```\nvar params = {\n  Bucket: 'my-bucket', \n  Key: 'my-key', \n  Body: 'Hello, world!'\n};\n\ns3.upload(params, function(err, data) {\n  console.log(err, data);\n});\n```\n\nBy rotating these access keys regularly, you can ensure that even if one key gets compromised, it won't be usable for long, thereby adding an extra layer of security to your application."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_12",
        "Title": "4.12 Ensure a log metric filter and alarm exist for changes to network gateways",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.",
        "QueryID": "aws_log_metric_filter_network_gateway",
        "DocumentURI": "policies/aws_cis_v140_4_12.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.12"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to the control of real-time monitoring of API calls and changes to network gateways can result in several costs such as:\n\n1. **Security Risks**: Lack of effective monitoring increases the risk of undetected security breaches. If your API is compromised and you are not monitoring, you may not discover the intrusion until it's too late. With proper alarms, a breach can be discovered and addressed before potential data loss or other damage.\n\n2. **Operational Inefficiencies**: Without real-time monitoring of API calls, it becomes challenging to identify overall usage patterns, detect issues, and diagnose problems. It can result in a decrease in service efficiency and availability, which could in turn affect your business operations.\n\n3. **Cost Inefficiencies**: Inappropriate or inefficient use of network gateways can cause unnecessary costs. If not monitored properly, you might end up paying for services that are not optimally used. Plus, keeping track of network gateway changes can help in efficient resource management and cost savings.\n\n4. **Compliance Violations**: For businesses in regulated industries, failure to monitor could result in compliance violations. Regulators often require proof of monitoring for accountability and control of data.\n\n5. **Damage to Reputation**: A data breach or service downtime can damage your business reputation. Customers might lose faith in your brand if their data is compromised or if they frequently experience issues with your service.\n\n6. **Loss of Business Opportunities**: Unnoticed faulty APIs or network issues can impact the end-user experience negatively and could result in the loss of potential clients or business opportunities.\n\nThe costs mentioned are not just monetary but also consider factors such as time, business reputation, and lost opportunities that are hard to quantify. Therefore, it's essential to ensure effective real-time monitoring, and alarm system as recommended in the control."
            ],
            "x-kaytu-usefulness-example": [
                "For example, a business with a cloud-based application needs to ensure the security and integrity of their AWS resources. They rely heavily on their VPC network gateways for user traffic, data transmission and application performance. \n\nLet's say they use two network gateways - an Internet Gateway and a Virtual Private Gateway - for serving different user requests. All of a sudden, there are unsolicited changes or modifications to these gateways due to incorrect configuration or unauthorized access. If unmonitored, this could result in data breach, service interruption or unexpected charges. \n\nTo prevent this, the IT Operations team establishes real-time monitoring of API calls for changes to these network gateways. This is done by directing CloudTrail Logs to CloudWatch Logs and setting up metric filters and alarms. They can promptly identify and act upon any trail of 'Create', 'Modify' or 'Delete' actions on their network gateways.\n\nThis AWS control therefore helps the business maintain security, reduce downtime, and promptly manage configuration or security issues of their VPC network gateways."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_15",
        "Title": "1.15 Ensure IAM Users Receive Permissions Only Through Groups",
        "Description": "IAM users are granted access to services, functions, and data through IAM policies. There are three ways to define policies for a user: 1) Edit the user policy directly, aka an inline, or user, policy; 2) attach a policy directly to a user; 3) add the user to an IAM group that has an attached policy. Only the third implementation is recommended.",
        "QueryID": "aws_iam_user_no_inline_attached_policies",
        "DocumentURI": "policies/aws_cis_v140_1_15.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.15"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to this AWS Control could result in unexpected and unauthorized access to your AWS services, leading to data breaches or loss, and this could also disrupt the normal functioning of your services. Here are the possible costs related:\n\n* **Security Breaches:** If you don't manage IAM users properly, unauthorized individuals could gain access to sensitive data or resources. This could lead to data breaches and loss of critical business information, as well as damage to your organization's reputation.  \n\n* **Increased Operational Costs:** Incorrect policy assignment can lead to unnecessary resource usage in your AWS resources, leading to increased operational costs.\n\n* **Legal and Regulatory Penalties:** Depending upon your jurisdiction and industry, there could be stiff fines and penalties for non-compliance with data and privacy laws. If not properly managed, user access could lead to breaches that violate these laws. \n\n* **Uncontrolled Access and Actions:** If IAM users are not correctly managed, users might end up with more access rights than they need. This can lead to unauthorized actions in your AWS environment, including unintentional deletions or modifications and can result in downtime or serious disruption to your business.\n\n* **Troubleshooting and Remediation Costs:** When IAM policies aren't properly managed, it can lead to increased costs in terms of time and resources to remedy these situations, including data recovery efforts or resolving unexpected behavior of your services.\n\n--- \n\n**Note:** It's important to understand that the enforcement of least privilege principle (only granting the necessary access rights to users) and regularly reviewing the access policies can significantly reduce the risk of unauthorized access or actions in your AWS environment."
            ],
            "x-kaytu-usefulness-example": [
                "Let's consider an example organization \"DreamTech Inc.\" which uses AWS services extensively. The company has a machine learning team that often needs access to S3 buckets to extract data for model training. Apart from this, there are other teams like application development, infrastructure management etc. who also require access to other AWS services based on their respective tasks.\n\n## 1) Using Inline/User Policies:\nLet's say, a new machine learning engineer, \"John\" joins the team. Without any existing IAM group for machine learning engineers, the admin needs to create and edit a unique inline policy for John, granting him the required privileges. This becomes a tedious task if more engineers join or if the engineers roles change.\n\nFor example, with an inline policy:\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": \"arn:aws:s3:::example_bucket/*\"\n    }\n  ]\n}\n```\n## 2) Attaching a Policy Directly To a User:\nInstead of writing inline policies, the admin could create a standalone policy that gives John appropriate S3 bucket access and attach it to his user. This is more useful than inline policies as the same policy can be attached to new joining members without the need of rewriting the codes.\n\n## 3) Adding User to an IAM Group: (Recommended)\nIn comparison to the above methods, creating IAM groups can significantly simplify the management of user permissions. The admin can create a single IAM group, for example, \"ML_Engineers\" and associate the required policy with it. When John or other new engineers join the ML team, they can be directly added to this group thus inheriting all its permissions. This is a highly scalable and efficient way to manage user permissions.\n\nFor example:\n\n- Creating IAM group:\n```bash\naws iam create-group --group-name ML_Engineers\n```\n- Attaching policy to the group:\n```bash\naws iam attach-group-policy --group-name ML_Engineers --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess\n```\n- Adding user to the group:\n```bash\naws iam add-user-to-group --user-name John --group-name ML_Engineers\n```\n\nThus, for DreamTech, the third implementation would save time, simplify access management and improve security, especially when the number of users increases."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_13",
        "Title": "4.13 Ensure a log metric filter and alarm exist for route table changes",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.",
        "QueryID": "aws_log_metric_filter_route_table",
        "DocumentURI": "policies/aws_cis_v140_4_13.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.13"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance of the mentioned AWS control can lead to serious and costly repercussions, which are as follows:\n\n1. **Security Risks**: If changes to routing tables are not monitored in real-time, organizations expose themselves to potential network security risks. Malicious actors could possibly change the routing tables without detection, leading to unauthorized network access or traffic diversion.\n\n2. **Loss of Data Integrity and Confidentiality**: Unsolicited changes to the route tables can lead to data breaches, affecting both data integrity and confidentiality. This can lead to loss of critically sensitive data and trust-related issues with customers, partners, and regulatory bodies.\n\n3. **Operational Risks**: Unmonitored changes to routing tables could result in incorrect routing of network traffic, which could disrupt the business operations and systems' functioning resulting in downtime and its associated financial implications.\n\n4. **Non-compliance Penalties**: Non-compliance with the control can result in substantial penalties from regulatory bodies. For instance, failing to comply with data protection and security guidelines can lead to punitive fines under regulations such as GDPR or HIPAA.\n\n5. **Reputation Damage**: Any of the above outcomes can result in subsequent reputational damage. If users feel their data is not safe with the service, they will be unwilling to continue using it, hence affecting organizations' future revenues.\n\nThus, non-compliance with the mentioned control can potentially lead to significant financial, operational, and reputational costs. It is therefore crucial for organizations to ensure real-time monitoring of API calls and changes to routing tables."
            ],
            "x-kaytu-usefulness-example": [
                "Here is an example of the usefulness of this AWS control:\n\nLet's say you are managing a large eCommerce platform that serves millions of customers globally and it is hosted on AWS. Your platform involves various microservices communicating with each other, and these microservices use different AWS APIs for their functions.\n\nIf there is an unexpected change in your routing tables, the communication between your services could be compromised — potentially even diverting your traffic to an unauthorized or malicious destination. This could lead to service disruption, compromised data, or other significant impacts to your operations.\n\nBy implementing real-time monitoring of API calls and directing CloudTrail Logs to CloudWatch Logs, you can detect suspicious or unexpected activity in real time. By setting up metric filters and alarms for changes to route tables, you can be proactively alerted if a change occurs. This allows for immediate investigation and action, such as reverting the changes or implementing additional security measures, to rectify the situation and ensure the resiliency of your platform.\n\nThis AWS control thus provides a valuable layer of security and operational oversight for any organization leveraging AWS for their hosting needs."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_16",
        "Title": "1.16 Ensure IAM policies that allow full \"*:*\" administrative privileges are not attached",
        "Description": "IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant least privilege -that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform only those tasks, instead of allowing full administrative privileges.",
        "QueryID": "aws_iam_policy_all_attached_no_star_star",
        "DocumentURI": "policies/aws_cis_v140_1_16.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.16"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Not complying with the AWS control of granting least privileges for IAM policies can result in several serious risks and consequences:\n\n- **Security Risk**: When unnecessary permissions are granted to various users, groups or roles, it significantly increases the risk of a security breach. For example, if a user account with extensive permissions is compromised, attackers can do a lot more harm than they could with a more restricted account.\n\n- **Data Breach**: Overprivileged users or roles can lead to both intentional and unintentional data breaches. Users may accidentally modify or delete sensitive data, or disgruntled employees might intentionally misuse their permissions.\n\n- **Financial Consequences**: If the access rights to modify the configurations and usage of AWS resources is not properly controlled, unauthorized usage or modifications can result in unexpected costs. For instance, unauthorized users might scale up services or create new, unnecessary instances.\n\n- **Non-Compliance Fines**: If your business operates in a regulated industry (like healthcare or finance), failure to comply with the least privilege principle can lead to non-compliance with industry regulations (like HIPAA or PCI-DSS), which can result in hefty fines.\n\n- **Loss of Business Reputation**: Security breaches, especially those leading to data leaks, can harm your business's reputation and result in loss of customers and revenue.\n\nHence, to limit exposure to these risks, it is crucial to follow the principle of least privilege and ensure that IAM policies are strictly enforced and regularly audited."
            ],
            "x-kaytu-usefulness-example": [
                "For example, consider a large company that uses AWS for multiple services such as hosting their website, storing data and performing data analysis. In this company, there are different teams with specific roles. The web development team needs access to the AWS S3 service to host the website, the data analysis team needs access to AWS Redshift for data warehousing, and the data entry team needs access to AWS DynamoDB for storing and retrieving data. \n\nIn this scenario, using IAM policies would be highly beneficial. Rather than giving full administrative privileges to all teams, which would be a security risk, the system administrator can create and assign specific IAM policies to each team. \n\nFor example, the IAM policy for the web development team would grant them access to AWS S3, but not to AWS Redshift or DynamoDB. Similarly, the data analysis team would be granted access to AWS Redshift, but not S3 or DynamoDB. With these policies in place, teams can only perform tasks relevant to their roles. This configuration follows the principle of least privilege, enhancing overall security.\n\n```markdown\nCompanies Example IAM Policies\n\n1. Web Development Team Policy:\n     {\n         \"Version\": \"2012-10-17\",\n         \"Statement\": [\n             {\n                 \"Effect\": \"Allow\",\n                 \"Action\": \"s3:*\",\n                 \"Resource\": \"*\"\n             }\n         ]\n     }\n\n2. Data Analysis Team Policy:\n     {\n         \"Version\": \"2012-10-17\",\n         \"Statement\": [\n             {\n                 \"Effect\": \"Allow\",\n                 \"Action\": \"redshift:*\",\n                 \"Resource\": \"*\"\n             }\n         ]\n     }\n\n3. Data Entry Team Policy:\n     {\n         \"Version\": \"2012-10-17\",\n         \"Statement\": [\n             {\n                 \"Effect\": \"Allow\",\n                 \"Action\": \"dynamodb:*\",\n                 \"Resource\": \"*\"\n             }\n         ]\n     }\n```\nThese IAM policies ensure that each team has access to only the services they require to perform their tasks, reducing the risk of data leaks or breaches."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_14",
        "Title": "4.14 Ensure a log metric filter and alarm exist for VPC changes",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.",
        "QueryID": "aws_log_metric_filter_vpc",
        "DocumentURI": "policies/aws_cis_v140_4_14.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.14"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this Amazon Web Services (AWS) control can result in a number of direct and indirect costs.\n\n- **Security Breaches and Data Leaks:** Changes made to Virtual Private Clouds (VPCs) can potentially result in security vulnerabilities. If these changes are not monitored and reviewed regularly, it could open up your infrastructure to potential security breaches and data leaks. This in turn can lead to loss of sensitive data which can incur significant financial implications due to potential lawsuits, fines and damage to brand reputation.\n\n- **Operational Disruptions:** Unexpected changes to VPC configurations can also result in operational disruptions. This can lead to service downtime which in turn affects business operations, loss of revenue, and negative customer experience.\n\n- **Unplanned Costs:** Incorrect or unplanned VPC changes can result in increased costs especially if new and unnecessary resources are added. There could also be potential added costs of remediation if the changes cause any operational or security issues.\n\n- **Non-Compliance Penalties:** Many industries have strict compliance requirements related to data security. If changes in the VPC lead to a breach of these requirements, your organization could be subject to hefty fines and penalties. \n\nHence, enabling real-time monitoring of API calls by directing CloudTrail Logs to CloudWatch Logs and setting up corresponding metric filters and alarms for VPC changes is crucial in effectively managing and mitigating these risks."
            ],
            "x-kaytu-usefulness-example": [
                "For instance, consider a scenario where your organization has strict confidentiality policies and has stored sensitive data in multiple Virtual Private Clouds (VPCs) within an AWS account. Further, for data replication or other specified needs, peer connections are established between these VPCs.\n\nNow, ensuring the health and appropriateness of VPC changes is crucial here, particularly to prevent unsanctioned access or harmful manipulations. By establishing a metric filter and alarm for changes made to VPCs, any notable or suspicious activity can be immediately flagged and addressed.\n\nHere is how it works. When any change occurs, such as the creation of a new VPC peer connection, the modification of an existing VPC, or the deletion of a VPC, AWS CloudTrail records that API call. Then, these logs are directed to CloudWatch Logs, where established metric filters parse through this gathered data.\n\nFor instance, a metric filter can be set up to match events where the `CreateVpcPeeringConnection` activity is invoked. Once this condition is satisfied, it increases the value of a CloudWatch metric. If this metric exceeds a predetermined threshold, then an alarm triggers. This alarm can alert the organization via SMS or email, or even invoke an AWS Lambda function to perform an automated response, such as terminating the unauthorized VPC peering connection.\n\nBy monitoring VPC changes in real-time, the organization can maintain tight network security, swiftly mitigate risks, enforce compliances, and lessen potential damage from breaches."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_17",
        "Title": "1.17 Ensure a support role has been created to manage incidents with AWS Support",
        "Description": "AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support.",
        "QueryID": "aws_iam_support_role",
        "DocumentURI": "policies/aws_cis_v140_1_17.md",
        "ManualVerification": false,
        "Severity": "Medium",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.17"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Medium"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to this AWS Control could result in several costs, such as:\n\n1. **Security costs:**\n\n   Non-compliance increases the risk of a security breach. Without an IAM role, unauthorized users could gain access to sensitive information or manipulate incidents.\n\n2. **Operational costs:**\n\n   Without proper controls, it may lead to inefficient use of resources. Furthermore, the lack of controls can cause confusion and loss of productivity, as users may not be able to effectively manage incidents due to lack of proper roles and authorization.\n\n3. **Financial costs:**\n\n   Breaches due to non-compliance can result in hefty fines and penalties. Moreover, a security breach or unauthorized use can lead to loss of business and customer trust, which can have a significant financial impact.\n\n4. **Reputational costs:**\n\n   Non-compliance may result in reputational loss. Security breaches can have a lasting impact on customers' perception of the organization. Further, non-compliance could signal a lack of good governance and professionalism to stakeholders and the public.\n\n5. **Regulatory costs**:\n\n   Failure to comply with AWS controls can also lead to non-compliance with regulatory requirements, leading to penalties and legal complications.\n\nTherefore, adhering to AWS controls not only provides operational efficiency and enhances security, but also helps maintain a positive brand image and avoid potential financial and legal complications."
            ],
            "x-kaytu-usefulness-example": [
                "For instance, consider you are running a major online commerce site on AWS that handles thousands of transactions every day. There's a sudden network issue that's causing the website to run slowly, decreasing the user experience and possibly impacting sales.\n\nAs the system administrator, you are facing difficulties in immediately identifying and resolving this issue. Here's where role of AWS Support Center with a designated Instance Incident Manager (IAM) role comes in.\n\nYou can create an IAM Role that allows an authorized user or a team from your organization to connect directly with AWS Support. This way, the user or team can directly report this issue, have access to incident notification features and be able to monitor the incident response from AWS Support. They can work closely with AWS's technical support and even escalate the problem if required.\n\nThis IAM Role can enable faster response times, expedite troubleshooting, and manage the impact of the incident with AWS Support. By separating this role, the rest of your team can focus on their key responsibilities, hence it's a critically useful control by AWS for managing operational risk and support efficacy."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_18",
        "Title": "1.18 Ensure IAM instance roles are used for AWS resource access from instances",
        "Description": "AWS access from within AWS instances can be done by either encoding AWS keys into AWS API calls or by assigning the instance to a role which has an appropriate permissions policy for the required access. \"AWS Access\" means accessing the APIs of AWS in order to access AWS resources or manage AWS account resources.",
        "QueryID": null,
        "DocumentURI": "policies/aws_cis_v140_1_18.md",
        "ManualVerification": true,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.18"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "manual"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to this AWS control can lead to various costs:\n\n1. **Security Risk**: The biggest cost of non-compliance is the security risk. If AWS access keys are hard-coded or stored insecurely within instances, they can be exposed to unnecessary risks. In case of a security breach, attackers might gain access to these keys, which can lead to unauthorized access, manipulation, and even deletion of crucial resources hosted on AWS.\n\n2. **Maintenance Overhead**: Hardcoding AWS keys into AWS API calls means that if a key needs to be rotated (for security reasons), you'd have to manually update the keys in all API calls. This leads to additional maintenance overhead and operational cost.\n\n3. **Regulatory Compliance Risks**: Various regulations require demonstrable access controls and security measures for data protection. If proper methods aren't used to secure AWS access, it can lead to non-compliance with these regulations, which can result in heavy fines or litigation cost.\n\n4. **Business Continuity**: Exposure or loss of access keys could disrupt your business operations. This is especially true if the leaked keys have permissions for crucial operations such as launching/terminating instances, accessing important data, etc.\n\n5. **Potential Data Loss or Data Breach**: If unauthorized users gain access to your AWS keys, they could potentially access sensitive data stored in your AWS resources, resulting in a data breach and considerable financial and reputational damage.\n\nTo mitigate these costs and risks, it's best to use AWS IAM roles, which allow you to delegate permissions to make API requests without having to share security credentials directly. AWS IAM roles provide temporary security tokens, limiting the exposure of your AWS keys and automatically handling the rotation of keys."
            ],
            "x-kaytu-usefulness-example": [
                "Here's an example instance in markdown format:\n\nAmazon S3 (Simple Storage Service) is one of the most popular AWS services. Here's a scenario in which you want to manage an S3 bucket from an EC2 instance:\n\n```markdown\n1. Start by creating a new IAM role, and giving it permissions to read, write and delete files in the S3 bucket.\n    * In the AWS Management Console, go to IAM \u003e Roles \u003e Create new Role \u003e AWS Service \u003e EC2 \u003e Select.\n    * Attach the `AmazonS3FullAccess` policy to this role.\n    * Name the role (e.g., \"S3_full_access_role\"), and create the role.\n\n2. Begin launching a new EC2 instance.\n    * In AWS Management Console, go to EC2 \u003e Launch Instance.\n    * Follow the setup prompts, but at the 'Configure Instance Details' step, select the IAM role created in step 1 (\"S3_full_access_role\").\n\n3. Once the instance is launched, SSH into it.\n    * Use the `aws s3 ls` command to list all your S3 buckets- this verifies your instances' access to S3.\n\n4. You can now use AWS CLI to manage your S3 buckets from the EC2 instance.\n    For example, creating a new bucket using `aws s3 mb s3://bucket-name` or upload a file to a bucket with `aws s3 cp localfile.txt s3://bucket-name`.\n```\n\nIn this example, you can manage your S3 resources directly from an EC2 instance, without hardcoding AWS keys into your applications. This enhances security and simplifies management and rotation of keys."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_4_15",
        "Title": "4.15 Ensure a log metric filter and alarm exists for AWS Organizations changes",
        "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.",
        "QueryID": "aws_log_metric_filter_organization",
        "DocumentURI": "policies/aws_cis_v140_4_15.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "4.15"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "4"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/CloudWatch"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this AWS control can lead to various costs, including:\n\n**1. Financial Costs**\nWithout real-time monitoring, unauthorized or mistaken changes to AWS Organization can go unnoticed. Changes could include adding/unremoving accounts, updating policies, or making changes to service control policies that could result in significant unwanted costs.\n\n**2. Security Costs**\nAPI calls that are not monitored can hide malicious activities like data breaches or unauthorized access to your AWS resources. If unnoticed, this can lead to compliance breaches with laws and standards like GDPR, HIPAA, etc., which can attract penalties.\n\n**3. Operational Costs**\nLack of monitoring can lead to issues not being detected until they have caused considerable damage to services or resources. This can lead to increased downtime and operational issues, harming the customer experience and potentially leading to a loss of business.\n\n**4. Reputational Costs**\nIncidents related to unmonitored harmful API calls or changes to AWS Organizations can lead to negative publicity, leading to a loss of customer trust, which can have long-term impacts on a business's reputation.\n\nIn summary, not complying with the AWS Control for real-time monitoring of API calls can lead to financial, security, operational, and reputational costs. Therefore, it's crucial to direct CloudTrail Logs to CloudWatch Logs, establish corresponding metric filters, and alarms for AWS Organizations changes in the master AWS Account."
            ],
            "x-kaytu-usefulness-example": [
                "```\nFor instance, consider a scenario where you're managing a large infrastructure on AWS with multiple sub-accounts under your master AWS account in AWS Organizations. Lots of critical changes like IAM policy modifications, EnableAWSServiceAccess, DeleteOrganizationalUnit, etc. could happen frequently and these could potentially impact your security.\n\nBy setting up real-time monitoring of AWS Organization changes made in the master AWS account, you can ensure any unwarranted or potentially harmful changes are caught immediately. Here's how it could be implemented:\n\n1. Direct CloudTrail Logs to CloudWatch Logs:\n\n   ```Shell\n   aws cloudtrail create-trail --name MyTrail --s3-bucket-name myBucket\n   aws cloudtrail update-trail --name MyTrail --cloud-watch-logs-log-group-arn \"arn:aws:logs:us-west-2:123456789012:log-group:MyTrail:*\" --cloud-watch-logs-role-arn \"arn:aws:iam::123456789012:role/CloudTrail_CloudWatchLogs_Role\"\n   ```\n\n2. Next, create a metric filter on that log group in CloudWatch Logs looking for the specific event like \"CreateAccount\" or any changes made to AWS Organizations.\n\n3. Create an alarm based on that metric in CloudWatch: \n\n   ```Shell\n   aws cloudwatch put-metric-alarm --alarm-name awsorganizations-changes --metric-name AWSOrganizationsChanges --namespace LogMetrics --statistic SampleCount --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --alarm-actions arn:aws:sns:us-west-2:123456789012:MyTopic\n   ```\n\nWith this in place, whenever a change happens, CloudTrail captures the API calls and send the logs to CloudWatch. CloudWatch then triggers the alarm and notifies you about the potential changes made in AWS Organizations. This feature can save you from potential security risks and accidental changes that may lead to inconvenience and unnecessary troubleshooting.\n```"
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_1_19",
        "Title": "1.19 Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed",
        "Description": "To enable HTTPS connections to your website or application in AWS, you need an SSL/TLS server certificate. You can use ACM or IAM to store and deploy server certificates. Use IAM as a certificate manager only when you must support HTTPS connections in a region that is not supported by ACM. IAM securely encrypts your private keys and stores the encrypted version in IAM SSL certificate storage. IAM supports deploying server certificates in all regions, but you must obtain your certificate from an external provider for use with AWS. You cannot upload an ACM certificate to IAM. Additionally, you cannot manage your certificates from the IAM Console.",
        "QueryID": "aws_iam_server_certificate_not_expired",
        "DocumentURI": "policies/aws_cis_v140_1_19.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "1.19"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/IAM"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to this AWS control can lead to several consequences such as:\n\n1. **Security Vulnerability**: Not using HTTPS connections makes your website or application vulnerable to cyber threats. Data transferred over non-HTTPS connections is unencrypted, making it easier for malicious actors to intercept and exploit sensitive information. \n\n2. **Trust and Credibility**: Most modern browsers flag websites without HTTPS as insecure. This may lead to customers distrusting and taking their business to more secure platforms, leading to potential loss of revenue.\n\n3. **Non-compliance consequences**: If your industry operates under regulations that require secure data transmission, non-compliance to this control can result in hefty fines and legal consequences.\n\n4. **Limited Support**: If you use IAM as a certificate manager in a region supported by ACM, you might face limitations. IAM does not allow you to upload an ACM certificate or manage your certificates from the IAM console. This could lead to operational issues.\n\n5. **Cost of External Certificates**: Since IAM does not support generating a certificate, you will have to obtain your certificate from an external provider. This could add to your operational cost.\n\n```markdown\n- **Security Vulnerability**: Without HTTPS, your website/application is vulnerable to cyber threats as data transferred is unencrypted.\n- **Trust and Credibility**: Lack of HTTPS can lead to browsers flagging your website as insecure, potentially driving customers away.\n- **Non-compliance consequences**: Depending on industry regulations, non-compliance can lead to fines and legal issues.\n- **Limited Support**: If you use IAM instead of ACM in a region supported by ACM, you face limitations such as inability to upload an ACM certificate or manage your certificates from the IAM console.\n- **Cost of External Certificates**: Using an IAM requires obtaining certificates from an external provider, which could increase operational costs.\n```"
            ],
            "x-kaytu-usefulness-example": [
                "AWS IAM plays a crucial role in securing your web services. Here's an instance where IAM can be beneficial:\n\nConsider you're running a global e-commerce website which has rigorous security requirements and it operates in various regions worldwide. Some of these regions are unsupported by AWS ACM for SSL certificate management. In such situations, you can use IAM to ensure that every deployment across all regions, even those presently unsupported by ACM, can securely provide HTTPS connections to your website. You get the SSL certificate from a trusted external provider and IAM takes care of securely storing this server certificate across all your deployments, ensuring operational consistency and the highest security standards. Given the global scope of operation, the AWS IAM certificate storage comes in handy in managing your global SSL requirement in a secure and effective manner."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_2_1_1",
        "Title": "2.1.1 Ensure all S3 buckets employ encryption-at-rest",
        "Description": "Amazon S3 provides a variety of no, or low, cost encryption options to protect data at rest.",
        "QueryID": "aws_s3_bucket_default_encryption_enabled",
        "DocumentURI": "policies/aws_cis_v140_2_1_1.md",
        "ManualVerification": false,
        "Severity": "Low",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "2.1.1"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "2.1"
            ],
            "cis_type": [
                "manual"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/S3"
            ],
            "x-kaytu-explanation": [
                "Low"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this AWS control could have several financial and reputational costs:\n\n1. **Data Breach Costs:** Unencrypted data is more vulnerable to breaches. If hackers were able to access sensitive data, this could lead to substantial financial repercussions. Costs could include regulatory fines, legal fees, and expenses related to mitigating the breach.\n\n2. **Damage to Reputation:** If a data breach occurred due to non-compliance with this control, the public reputation of the company could be tarnished. This could drive away potential customers and lower profits.\n\n3. **Loss of Business Opportunities:** Some clients, particularly those dealing with sensitive information (like healthcare or financial companies), may require proof of certain security measures like S3 encryption. Failure to comply can result in lost business opportunities.\n\n4. **Potential Lawsuits:** In some cases, customers or partners may sue a company over a data breach, especially if it occurred due to lack of proper security measures like encrypting data at rest.\n\n5. **Regulatory Fines:** Depending on the industry and the region, certain regulations might require encryption of data at rest. Not complying with this control might lead to fines for being out of compliance with regulatory standards."
            ],
            "x-kaytu-usefulness-example": [
                "Example:\n\nImagine an instance where a medical research organization is investigating a new disease. This organization collects a substantial amount of sensitive patient data, including medical records, related to this disease. It is crucial for this data to stay confidential due to privacy laws and ethical concerns. \n\nTo ensure the security and confidentiality of the data, the organization decides to make use of Amazon's Simple Storage Service (S3). Amazon S3 provides various encryption options, such as server-side encryption with S3 managed keys (SSE-S3), server-side encryption with AWS Key Management Service (SSE-KMS), server-side encryption with customer-provided keys (SSE-C), and client-side encryption.\n\nThe organization implements server-side encryption with KMS-managed keys to protect the data. This method encrypts the data as it writes it and decrypts it for the organization when they access it. This way, the research organization can keep their sensitive patient data secure whilst storing it on AWS, without bearing any substantial extra cost. \n\nSo, in this scenario, these encryption options provided by Amazon S3 prove extremely useful in securing sensitive health data and ensuring patient confidentiality for the medical research organization. Thus, they can carry on with their research on the new disease without worrying about data breaches or privacy rights violations."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_2_1_2",
        "Title": "2.1.2 Ensure S3 Bucket Policy is set to deny HTTP requests",
        "Description": "At the Amazon S3 bucket level, you can configure permissions through a bucket policy making the objects accessible only through HTTPS.",
        "QueryID": "aws_s3_bucket_enforces_ssl",
        "DocumentURI": "policies/aws_cis_v140_2_1_2.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "2.1.2"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "2.1"
            ],
            "cis_type": [
                "manual"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/S3"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to this AWS control can have multiple costs. Below explains some of them:\n\n- **Security Risks:** If the objects in your S3 bucket are not set to be accessible only through HTTPS, it means they could potentially be accessed via an insecure HTTP connection. This exposes your data to potential interception, man-in-the-middle attacks, eavesdropping, or data tampering as it transits the internet. This can lead to data breaches which could damage your company's reputation and result in loss of customer's trust.\n\n- **Financial Costs:** Data breaches usually come with significant financial penalties. Among them, incident response costs, legal fees, potential fines by regulatory bodies for non-compliance, and costs related to notifying users.\n\n- **Regulatory Violations:** Many regulatory laws and standards like GDPR, HIPAA, PCI DSS, etc., mandate the use of secure transmission protocols to safeguard sensitive data. Non-compliance to these regulations can lead to hefty fines and penalties.\n\n    ```\n    Examples in US Dollars: \n    - GDPR fines can reach up to €20 million, or 4% of the worldwide annual revenue of the prior financial year, whichever is higher.\n    - HIPAA fines can range from $100 to $50,000 per violation (or per record), with a maximum penalty of $1.5 million per year for each violation.\n    ```\n\n- **Loss of Business:** In addition to the financial and legal penalties, failing to protect user data can result in lost business. After a data breach, many customers will choose to cease doing business with a company, and the company's reputation can be permanently damaged.\n\n- **Potential for Public Shaming:** In certain cases, companies are also required to publicly disclose data breaches. This can lead to public shaming and further amplify damage to the company's reputation.\n\nImplementing HTTPS for your Amazon S3 bucket can greatly reduce these risks. It represents a basic measure to ensure the confidentiality and integrity of data in transit between the client and the server."
            ],
            "x-kaytu-usefulness-example": [
                "Consider a situation where you have a multimedia-oriented app that deals with a lot of images or videos. You are using an Amazon S3 bucket to store your images and videos. Currently weak or no permissions are configured on your bucket which is causing unauthorized access and potential misuse, piracy or data loss.\n\nYou decide to add a bucket policy in AWS S3 to allow access to the images and videos only if they are requested over a secure HTTPS connection. In this way, sensitive data transmissions to and from your S3 bucket are encrypted, decreasing the potential that your data can be intercepted and read by an unauthorized party.\n\nA bucket policy that only allows HTTPS looks like the following:\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AllowSSLRequestsOnly\",\n      \"Effect\": \"Deny\",\n      \"Principal\": \"*\",\n      \"Action\": \"*\",\n      \"Resource\": \"arn:aws:s3:::your-bucket-name/*\",\n      \"Condition\": {\n        \"Bool\": {\n          \"aws:SecureTransport\": \"false\"\n        }\n      }\n    }\n  ]\n}\n```\n\nThis bucket policy denies all requests that are not made over HTTPS to your bucket resource. This ensures that access to your images and videos in your app are secure and not accessible over insecure and unencrypted HTTP connections.\n \nIn this instance, configuring permissions through a bucket policy that makes the objects accessible only through HTTPS, helps ensure data privacy, enhances security by encrypting the data in transit and addresses your business requirement of protecting data and content from unauthorized access and potential misuse."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_2_2_1",
        "Title": "2.2.1 Ensure EBS volume encryption is enabled",
        "Description": "Elastic Compute Cloud (EC2) supports encryption at rest when using the Elastic Block Store (EBS) service. While disabled by default, forcing encryption at EBS volume creation is supported.",
        "QueryID": "aws_ebs_volume_encryption_at_rest_enabled",
        "DocumentURI": "policies/aws_cis_v140_2_2_1.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "2.2.1"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "2.2"
            ],
            "cis_type": [
                "manual"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/EBS"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to this AWS EC2 control might cost in multiple ways:\n\n1. **Data Exposure and Violation of Data Privacy Laws:** Not using encryption at rest for EBS volume may lead to potential data exposure. If an unauthorized party gets access to the physical hard drive, they can potentially extract and misuse valuable data. Also, if the data stored contains Personally Identifiable Information (PII) or any such sensitive data, it might lead to a severe violation of various data privacy laws and regulations across many regions (e.g., GDPR in EU). Fines due to such violations can be massive (up to 4% of the annual global turnover or €20 Million, whichever is higher, in case of GDPR).\n\n2. **Loss of Customer Trust** - If a data breach occurs and it's found out that it was due to non-compliance of encryption at rest then it can significantly affect the company's reputation leading to loss of customer trust and eventually may also affect the company's revenue.\n\n3. **Regulatory non-compliance penalties:** Some industries (like healthcare and finance) have severe penalties for non-compliance to certain data security standards (e.g., HIPAA, PCI DSS, etc.). These standards often mandate encryption at rest. Non-compliance to these might result in legal penalties which can be extremely high.\n\n4. **Potential Business Loss**: Not using EBS encryption can lead businesses to bear heavy financial damages in the event of a lawsuit. Such incidents can also lead to the loss of intellectual property, competitive advantage, and potentially disrupt business operations.\n\nSo, while it might slightly increase the operational expenses, keeping EBS encryption enabled and in compliance is significantly beneficial for a secure and stable business environment in the long run."
            ],
            "x-kaytu-usefulness-example": [
                "A web development company, named `XYZ`, is tasked with building a highly sensitive financial data management system for a client. The system will store and process sensitive client data including credit card information, bank account details, transaction histories, and personal identifiable information. \n\nTo ensure top-notch security and confidentiality of the sensitive data, `XYZ` opts to use Amazon Web Service's (AWS) Elastic Compute Cloud (EC2) along with the Elastic Block Store (EBS) service. The EC2 instances will be processing the sensitive data while the EBS volumes will be used to store the data.\n\nSince the data is extremely sensitive, `XYZ` decides to use the encryption at rest feature of the EBS volumes to provide an additional layer of data protection. They enable the force encryption at the time of EBS volume creation. This feature encrypts all the data stored in the EBS volume as well as the snapshots. \n\nIn the unlikely event of an attempted breach, the attacker would find encrypted data, which would be useless without the decryption keys. Thus, using the EC2 support for encryption at rest when using the EBS service provides `XYZ` with increased data security, peace of mind, and compliance with global privacy standards."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_2_1_3",
        "Title": "2.1.3 Ensure MFA Delete is enabled on S3 buckets",
        "Description": "Once MFA Delete is enabled on your sensitive and classified S3 bucket it requires the user to have two forms of authentication.",
        "QueryID": "aws_s3_bucket_mfa_delete_enabled",
        "DocumentURI": "policies/aws_cis_v140_2_1_3.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "2.1.3"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "2.1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/S3"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to this AWS Control, which mandates the use of Multi-Factor Authentication (MFA) Delete on sensitive and classified S3 buckets, can have significant costs, both financially and operationally. \n\n1. **Data Security Breaches**: If this control is not complied with, it elevates the risk of unauthorized access to your S3 buckets resulting in potential data breaches, which may lead to exposure of sensitive and classified data. The cost of a data breach can be massive, including financial penalties, legal costs, and customer trust erosion.\n\n2. **Regulatory Fines**: Non-compliance with data protection mandates such as GDPR, CCPA, and others can lead to hefty regulatory fines. For instance, GDPR can impose fines of up to 4% of annual global turnover or €20 Million (whichever is higher) for non-compliance.\n\n3. **Business Continuity Risks**: Without MFA Delete, an accidental or malicious deletion of mission-critical data can happen, which might disrupt business operations, causing potential revenue loss and costly delays.\n\n4. **Reputation Damage**: The publicity resulting from a security breach can damage the company's reputation, potentially leading to loss of customers, decline in sales and drop in stock prices.\n\n5. **Remediation Costs**: If a breach does occur, significant resources (time, money, and labor) may be required to investigate the breach, recover lost data, and enhance security measures.\n\nHence, it is crucial to follow this AWS Control and enable MFA delete on sensitive and classified S3 buckets to maintain high data security standards, prevent unauthorized access, and mitigate potential losses."
            ],
            "x-kaytu-usefulness-example": [
                "Example:\n\nAssume that you're working on a project related to defense system development. You're using AWS services and all your sensitive project data are stored in an Amazon S3 bucket named \"defense-project-data\". The data stored in it are classified and must not be lost or manipulated unlawfully under any circumstance.\n\nIn this scenario, enabling the Multi-Factor Authentication (MFA) Delete feature on this S3 bucket is extremely useful. After enabling MFA Delete, any attempt to DELETE or CHANGE the versioning state of the S3 bucket would require two forms of authentication: a valid AWS identity and MFA code from an approved device. \n\nThis will prevent unauthorized deletions or alterations, ensuring your sensitive project's data remains secure. Even if someone had your AWS login credentials, they couldn't delete or alter the data without also having access to the MFA code. It helps to prevent accidental deletion and provides an extra layer of security for high-value data. \n\n```markdown\nFeature: Enable MFA Delete on the 'defense-project-data' S3 bucket\n\nGiven an existing S3 bucket named 'defense-project-data'\nAnd I am signed into AWS with an authorized IAM User\nWhen I navigate to the S3 bucket settings\nThen I enable 'MFA Delete' on the bucket\n\nNow, anytime I or any other AWS user attempts to delete an object\nOr change the version state of an object within this bucket,\nThey will be prompted to supply a code from their MFA device in addition to their AWS login credentials\nThus, ensuring enhanced security for the data stored in the 'defense-project-data' bucket.\n```\nIn this example, the AWS MFA Delete control provides a means of additional security to prevent unauthorized users, even those with AWS credentials, from maliciously or accidentally altering sensitive data stored in the 'defense-project-data' S3 bucket."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_2_3_1",
        "Title": "2.3.1 Ensure that encryption is enabled for RDS Instances",
        "Description": "Amazon RDS encrypted DB instances use the industry standard AES-256 encryption algorithm to encrypt your data on the server that hosts your Amazon RDS DB instances. After your data is encrypted, Amazon RDS handles authentication of access and decryption of your data transparently with a minimal impact on performance.",
        "QueryID": "aws_rds_db_instance_encryption_at_rest_enabled",
        "DocumentURI": "policies/aws_cis_v140_2_3_1.md",
        "ManualVerification": false,
        "Severity": "Low",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "2.3.1"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "2.3"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/RDS"
            ],
            "x-kaytu-explanation": [
                "Low"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance to encryption standards in Amazon RDS could result in substantial costs, both financial and non-financial. Specific costs vary based on the type and severity of the non-compliance, as well as the data involved. Here are some potential costs:\n\n1. Financial Penalties: Non-compliance with data protection laws like GDPR or HIPAA could result in substantial monetary penalties. It may also impact the company's ability to operate in certain markets. \n\n2. Business Interruption: A data breach may cause significant disruptions to business operations. This could result in revenue loss due to downtime and additional expenses to rectify the breach.\n\n3. Data loss: Non-encrypted data is more vulnerable to theft or loss. If data is lost, it may be costly or even impossible to recover.\n\n4. Damage to Reputation: Breaches of customer or client data may heavily damage your organization's reputation. This can lead to lost business, as customers lose trust and shift to your competitors.\n\n5. Legal Consequences: If your non-compliance leads to a data breach, you could face legal consequences, such including lawsuits from individuals or businesses affected by the breach.\n\n6. Increased Audit Costs: If your organization falls out of compliance, you may be subjected to more frequent and extensive audits, which come with their own costs.\n\nTo avoid these costs, it's crucial to strictly adhere to AWS controls and other industry standard data protection measures."
            ],
            "x-kaytu-usefulness-example": [
                "Suppose you manage a company that deals with highly sensitive customer data, such as financial or healthcare information. You need to store this data in a database that is both secure and accessible. \n\nBy using Amazon RDS encrypted DB instances, your sensitive data will be encrypted on server side using the AES-256 algorithm. This not only protects it from unauthorized access, but also ensures regulatory compliance because many privacy laws require data to be encrypted.\n\nEven if a malicious entity were to compromise the server hosting your RDS instances, they would not be able to access your raw data because it would be encrypted with a strong encryption standard. Only authenticated entities would have decryption access. \n\nAdditionally, Amazon RDS handles the decryption process seamlessly with minimal performance impact. Thus, when authorized users need to access this information, they can do so fluidly without noticeable delay. In this way, Amazon RDS encrypted DB instances let you balance high security with high accessibility."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_2_1_4",
        "Title": "2.1.4 Ensure all data in Amazon S3 has been discovered, classified and secured when required",
        "Description": "Amazon S3 buckets can contain sensitive data, that for security purposes should be discovered, monitored, classified and protected. Macie along with other 3rd party tools can automatically provide an inventory of Amazon S3 buckets.",
        "QueryID": "aws_s3_bucket_protected_by_macie",
        "DocumentURI": "policies/aws_cis_v140_2_1_4.md",
        "ManualVerification": false,
        "Severity": "High",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "2.1.4"
            ],
            "cis_level": [
                "2"
            ],
            "cis_section_id": [
                "2.1"
            ],
            "cis_type": [
                "manual"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/S3"
            ],
            "x-kaytu-explanation": [
                "High"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this AWS Control can lead to various costs which may be financial, reputational, or related to productivity. Using Amazon Macie - a security service using machine learning to automatically discover, classify, and protect sensitive data like Personally Identifiable Information (PII) - is an effective way to mitigate such costs. \n\n1. **Financial Costs:**\n    - **Data Breaches**: If sensitive data is exposed, there could be substantial financial costs related to the breach. This includes legal fees, costs for remediation, and potential fines or penalties for non-compliance with data protection laws.\n    - **E-Discovery Costs**: Macie accelerates the process of e-Discovery for litigation or investigation purposes. Without using an automated tool, you may need to invest in costly manual processes or specialist services.\n\n2. **Reputational Costs:**\n    - **Client Trust**: Data breaches also come with a significant reputational cost. They can reduce client trust in your company’s ability to manage their data securely, which can in turn impact your business relationships and income.\n\n3. **Productivity-Related Costs:**\n    - **Time and Resources**: Manual discovery, monitoring, classification, and protection of sensitive data in S3 buckets may pull your staff away from their core workload. \n\n4. **Compliance-Related Costs**: \n    - **Fines and Penalties**: Non-compliance with data protection policies, regulations, and laws, such as GDPR, can lead to hefty fines.\n\nBy using Amazon Macie or similar third-party tools to automate the process, you can be proactive in protecting your data, thereby avoiding these potential costs."
            ],
            "x-kaytu-usefulness-example": [
                "For instance, a large healthcare organization using AWS cloud storage may store many patient records in Amazon S3 buckets. This type of information is sensitive, personal, and under regulatory requirements to be strictly controlled and protected under laws such as HIPAA in the United States. \n\nThis is where Macie comes in use. \n\n```\nBy enabling AWS Macie, the company can identify sensitive data such as personally identifiable information (PII) and provide dashboards and alerts that give visibility into how this data is being accessed or moved. In addition, Macie offers powerful tools to understand access patterns and identify any suspicious activity or unauthorized access attempts. Consequently, helping the organization meet regulatory compliance needs and safeguard patient records.\n```\n\nMoreover, by integrating 3rd-party tools such as Splunk or Rapid7, they can further enhance their visibility and control over their S3 buckets. This includes automated inventory management, anomaly detection, or even automated response actions if abnormal activity is detected. As a result, the organization can boost its security posture and protect important patient data contained in the S3 buckets."
            ]
        },
        "Managed": true
    },
    {
        "ID": "aws_cis_v140_2_1_5",
        "Title": "2.1.5 Ensure that S3 Buckets are configured with 'Block public access (bucket settings)'",
        "Description": "Amazon S3 provides Block public access (bucket settings) and Block public access (account settings) to help you manage public access to Amazon S3 resources. By default, S3 buckets and objects are created with public access disabled. However, an IAM principle with sufficient S3 permissions can enable public access at the bucket and/or object level. While enabled, Block public access (bucket settings) prevents an individual bucket, and its contained objects, from becoming publicly accessible. Similarly, Block public access (account settings) prevents all buckets, and contained objects, from becoming publicly accessible across the entire account.",
        "QueryID": "aws_s3_public_access_block_bucket_account",
        "DocumentURI": "policies/aws_cis_v140_2_1_5.md",
        "ManualVerification": false,
        "Severity": "Critical",
        "Tags": {
            "category": [
                "Compliance"
            ],
            "cis": [
                "true"
            ],
            "cis_item_id": [
                "2.1.5"
            ],
            "cis_level": [
                "1"
            ],
            "cis_section_id": [
                "2.1"
            ],
            "cis_type": [
                "automated"
            ],
            "cis_version": [
                "v1.4.0"
            ],
            "plugin": [
                "aws"
            ],
            "service": [
                "AWS/S3"
            ],
            "x-kaytu-explanation": [
                "Critical"
            ],
            "x-kaytu-noncompliance-cost": [
                "Non-compliance with this AWS control can result in several consequences:\n\n1. **Data Breach** - The most serious risk of non-compliance is potential data breaches. If your S3 resources are publicly accessible, they can be accessed by anyone globally. This can lead to unauthorized access to sensitive data, and the potential for data loss or theft is significantly increased.\n\n2. **Regulatory Penalties -** If your organization is subject to regulations such as GDPR, HIPAA, or PCI DSS, non-compliance with these controls could result in substantial fines and penalties, not to mention reputational damage.\n\n3. **Increased Costs** - Exposures could also lead to more AWS charges. If bucket data is publicly accessible, a sudden increase in data transfer (e.g., due to a DDoS or data scraping attack) could significantly increase AWS costs.\n\n4. **Business Continuity Risks** - Uncontrolled public access to S3 resources can lead to business disruptions. For example, if an attacker deletes or modifies data contained in publicly accessible S3 buckets, it may interrupt business operations.\n\n5. **Non-Compliance with AWS Policies** - Failing to block public access may violate the AWS Acceptable Use Policy and potentially lead to suspension or termination of your AWS account. \n\nIt is advised to always block public access unless absolutely necessary and always ensure that all security measures are properly implemented to avoid such risks and penalties."
            ],
            "x-kaytu-usefulness-example": [
                "Amazon S3 Block public access features are useful in various scenarios. For instance, assume that a company called XYZ Inc. uses AWS to store large amounts of sensitive client data. The firm is obliged to guarantee that this data remains confidential and secure. By default, all the S3 buckets and objects created are protected and not public, but an IAM principle with S3 access can change this.\n\nHowever, an employee in the IT department accidentally leaves some buckets public while doing some maintenance. This could lead to a massive data leak, which could result in financial and reputational damage to the company.\n\nTo mitigate such issues and risks, XYZ Inc. could apply the block public access (account settings) feature. This would be an account-wide measure to help make sure that no bucket or object accidentally becomes publicly accessible, even if an IAM user makes a mistake. This setting provides an additional layer of protection to ensure all data remains confidential and secure. \n\nIn another scenario, for a particular project, the company only wants to limit public access at the bucket level. In this case, they can use the 'Block public access (bucket settings)', which provides an additional control level whilst allowing flexibility on a bucket by bucket basis. \n\nThese features provide powerful controls that help organizations improve security and compliance when storing sensitive data in AWS S3."
            ]
        },
        "Managed": true
    }
]