[
  {
    "ID": "aws_cis_v130_1_1",
    "Title": "1.1 Maintain current contact details",
    "Description": "Ensure contact email and telephone details for AWS accounts are current and map to more than one individual in your organization.",
    "QueryID": null,
    "DocumentURI": "policies/aws_cis_v130_1_1.md",
    "ManualVerification": true,
    "Severity": "Medium",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.1"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "manual"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS control of ensuring that contact email and telephone details for AWS accounts are current and map to more than one individual can result in a number of costs for a business including:\n\n**1. Delayed Response Time:** If AWS needs to contact you for any reason, outdated or inaccurate contact information can lead to delays in communication. Critical workload issues, notifications, and other important updates may not be addressed on time, resulting in extended system downtimes.\n\n**2. Lost Opportunities:** AWS occasionally provides its customers with various opportunities such as beta testing, special offers, new feature launch, etc. Using outdated information can make you miss these opportunities.\n\n**3. Account Recovery Issues:** If for some reason you lose access to your AWS account, the process of recovery can be very difficult and time-consuming without correct contact details. This can result in the inability to manage your AWS resources, causing disruptions to the system.\n\n**4. Security Risks:** If your contact details are not current and do not correspond to more than one individual, in a scenario where the account is compromised, it becomes more difficult for AWS to contact you and immediately initiate the mitigation process. This potentially exposes your system and data to continued security risks.\n\n**5. Compliance Issues:** AWS requires accurate contact information as a part of their terms of service. Failing to keep this information current could be seen as a breach of these terms, possibly resulting in penalties, account suspension, or legal issues.\n\n**6. Dissatisfied Customers:** Any system downtime or security issue due to delayed response from AWS can lead to dissatisfied customers and negative impact on your business reputation.\n\nUltimately, the cost of non-compliance can be a monetary loss, loss of opportunity, potential damage to a company's reputation, and lack of optimal accessibility and control over the business's AWS resources."
      ],
      "x-kaytu-usefulness-example": [
        "Imagine a scenario where a business' cloud infrastructure is hosted on AWS and a critical issue arises where the company is locked out of the account due to a security breach or error. The registered email and phone number associated with the account are the only methods AWS has to get in touch for assistance or provide account recovery details.\n\nIf those contact details are outdated or belong to only one individual who is currently unavailable, the issue may take longer to resolve leading to potential business impact. However, if the contact details are current and map to more than one individual in the organization, AWS can promptly reach out to them, thereby minimizing the downtime and potential losses.\n\nAdditionally, receiving AWS notifications relating to security, billing, or service updates at current and multiple points of contact will prevent important alerts from being missed, thus enhancing the operational efficiency and security posture of the organization."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_2",
    "Title": "1.2 Ensure security contact information is registered",
    "Description": "AWS provides customers with the option of specifying the contact information for accounts security team. It is recommended that this information be provided.",
    "QueryID": "aws_account_alternate_contact_security_registered",
    "DocumentURI": "policies/aws_cis_v130_1_2.md",
    "ManualVerification": false,
    "Severity": "Low",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.2"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "manual"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Low"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control may lead to several costs:\n\n1. **Increased Risk of Security Breaches:** When contact information is not provided, prompt communication regarding any security vulnerability, threat, or breach may be compromised. As a result, the likelihood of suffering serious system damage or data loss increases.\n\n2. **Delayed Incident Response:** In case of a security incident, if the contact information is not available, the incident response might get delayed. This can increase the severity and consequences of the attack. \n\n3. **Inefficient Management:** Lack of a specified contact for AWS might lead to confusion and inefficiency during both routine operations and emergencies. It could cause a waste of time and resources as team members try to identify the correct person to communicate with.\n\n4. **Potential Compliance Violations:** In certain industries or areas, not having a clear point of contact for security issues might lead to non-compliance with legal or regulatory requirements. This could result in fines, penalties, or other disciplinary measures.\n\n5. **Reputation Damage:** Failure to promptly address security incidents due to lack of prompt communication can lead to reputation damage and loss of customer trust."
      ],
      "x-kaytu-usefulness-example": [
        "AWS Control: Specifying Contact Information for Account's Security Team \n\nExample Instance:\n\nA large financial organization uses AWS to host its data and applications. They have a dedicated IT Security team to monitor any security risks or breaches. The security team has experts who are best suited to take immediate action in case of any incidents.\n\nOne day, AWS systems unexpectedly detect suspicious activities in the organization's account which appears to be a major security breach. \n\nAt this point, AWS needs to urgently contact the organization. Since the organization has already made security contact information available, AWS can promptly notify them about this incident. The security team is immediately alerted and they start to work on it. They take necessary actions to mitigate the risk and prevent huge potential losses. \n\nIf the contact information of the organization's security team had not been provided, the response to this critical incident would have been delayed leading to significant damage.\n\nHence, providing contact information of the account's security team is extremely useful in managing security risks promptly and effectively."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_3_1",
    "Title": "3.1 Ensure CloudTrail is enabled in all regions",
    "Description": "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).",
    "QueryID": "aws_cloudtrail_multi_region_read_write_enabled",
    "DocumentURI": "policies/aws_cis_v130_3_1.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "3.1"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "3"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudTrail"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the AWS CloudTrail control can range from operational to security and legal consequences. It can greatly impact the ability to audit, troubleshoot, and achieve regulatory compliance.\n\n1. **Security Issues**: Without CloudTrail, you may not have visibility into who or what is making changes to your AWS resources. This can result in unauthorized access or alterations going undetected, potentially leading to data breaches, loss of crucial data, and other security incidents.\n\n2. **Operational Challenges**: Troubleshooting and diagnosing issues can become challenging without detailed API call history. It can lead to increased downtime, inefficient bug fixing, and poor customer experience due to delayed or incorrect service.\n\n3. **Audit Failure**: For organizations subject to audits, non-compliance to CloudTrail could result in an inability to provide proof of logging and monitoring practices. This could lead to audit failure and potential fines or penalties.\n\n4. **Regulatory Non-Compliance**: For organizations dealing with data subject to specific laws or regulations (such as HIPAA, GDPR, or PCI-DSS), non-compliance to this control could lead to serious regulatory penalties, including significant fines.\n\n5. **Legal Consequences**: In the case of a data breach or detected unauthorized activity, not having a CloudTrail record could hinder legal recourse or investigation. This could expose the company to legal risk and litigation. \n\nIn summary, the cost of non-compliance to AWS CloudTrail can lead to significant security risks and operational inefficiency, while potentially incurring serious legal and regulatory penalties. Therefore, it is highly recommended to enable AWS CloudTrail to maintain surveillance over API activities and to comply with regulatory and security standards."
      ],
      "x-kaytu-usefulness-example": [
        "AWS CloudTrail can be particularly useful in various instances such as:\n\n1. **Security Analysis:**\n   With CloudTrail, you can track any modifications made to your AWS resources. For instance, if an unauthorized user tried to access your S3 bucket or modify EC2 instance settings, CloudTrail logs would contain this information. This can help you identify potential security threats and proceed with incident response.\n\n    ```\n    {\n      \"eventVersion\": \"1.0\",\n      \"userIdentity\": {\n        \"type\": \"IAMUser\",\n        \"principalId\": \"EXAMPLER34\",\n        \"arn\": \"arn:aws:iam::123456789012:user/Alice\",\n        \"accountId\": \"123456789012\",\n        \"accessKeyId\": \"EXAMPLEKHEA\",\n        \"userName\": \"Alice\",\n      },\n      \"eventTime\": \"2014-03-06T21:22:54Z\",\n      \"eventSource\": \"s3.amazonaws.com\",\n      \"eventName\": \"DeleteBucketPolicy\",\n      \"awsRegion\": \"us-west-2\",\n      \"sourceIPAddress\": \"198.51.100.0\",\n      \"userAgent\": \"signer\",\n      \"requestParameters\": {\n        \"bucketName\": \"example-bucket\"\n      },\n      \"responseElements\": null,\n      \"requestID\": \"EXAMPLE5B6B\",\n      \"eventID\": \"EXAMPLE2B5D\",\n      \"eventType\": \"AwsApiCall\"\n    }\n    ```\n\n2. **Compliance:**\n   If you work in a regulated industry (finance, healthcare, etc.), you must comply with certain data handling and processing standards. CloudTrail helps with this by providing an auditable log of all activity in your AWS account. During an audit, you can provide these logs as evidence of compliance.\n\n    ```\n    {\n      \"eventVersion\": \"1.0\",\n      \"userIdentity\": {\n        \"type\": \"IAMUser\",\n        \"principalId\": \"EXAMPLER34\",\n        \"arn\": \"arn:aws:iam::123456789012:user/Bob\",\n        \"accountId\": \"123456789012\",\n        \"accessKeyId\": \"EXAMPLEKHEA\",\n        \"userName\": \"Bob\",\n      },\n      \"eventTime\": \"2014-03-06T21:22:54Z\",\n      \"eventSource\": \"ec2.amazonaws.com\",\n      \"eventName\": \"StopInstances\",\n      \"awsRegion\": \"us-west-2\",\n      \"sourceIPAddress\": \"198.51.100.0\",\n      \"userAgent\": \"signer\",\n      \"requestParameters\": {\n        \"instancesSet\": {\n          \"items\": [\n            {\n              \"instanceId\": \"i-1234567890abcdef0\"\n            }\n          ]\n        },\n        \"force\": false\n      },\n      \"responseElements\": null,\n      \"requestID\": \"EXAMPLE5B6B\",\n      \"eventID\": \"EXAMPLE2B5D\",\n      \"eventType\": \"AwsApiCall\"\n    }\n    ```\n\n3. **Troubleshooting:**\n   When something goes wrong in your AWS environment, CloudTrail can help to find out the cause of the issue. By looking at the event history, you could identify what actions took place leading up to the issue. This is crucial in minimizing downtime and service disruption.\n\n    ```\n    {\n      \"eventVersion\": \"1.0\",\n      \"userIdentity\": {\n        \"type\": \"IAMUser\",\n        \"principalId\": \"EXAMPLER34\",\n        \"arn\": \"arn:aws:iam::123456789012:user/Carol\",\n        \"accountId\": \"123456789012\",\n        \"accessKeyId\": \"EXAMPLEKHEA\",\n        \"userName\": \"Carol\",\n      },\n      \"eventTime\": \"2014-03-06T21:22:54Z\",\n      \"eventSource\": \"elasticloadbalancing.amazonaws.com\",\n      \"eventName\": \"DeleteLoadBalancer\",\n      \"awsRegion\": \"us-west-2\",\n      \"sourceIPAddress\": \"198.51.100.0\",\n      \"userAgent\": \"signer\",\n      \"requestParameters\": {\n        \"loadBalancerName\": \"example-lb\"\n      },\n      \"responseElements\": null,\n      \"requestID\": \"EXAMPLE5B6B\",\n      \"eventID\": \"EXAMPLE2B5D\",\n      \"eventType\": \"AwsApiCall\"\n    }\n    ```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_3",
    "Title": "1.3 Ensure security questions are registered in the AWS account",
    "Description": "The AWS support portal allows account owners to establish security questions that can be used to authenticate individuals calling AWS customer service for support. It is recommended that security questions be established.",
    "QueryID": null,
    "DocumentURI": "policies/aws_cis_v130_1_3.md",
    "ManualVerification": true,
    "Severity": "Medium",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.3"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "manual"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control might result in several potential costs:\n\n1. **Security breaches:** If security questions are not established, the risk of unauthorized individuals gaining access to sensitive information increases. They could potentially make changes to the AWS account or misuse sensitive data.\n\n2. **Financial loss:** A breach in security could also lead to financial losses. For example, unauthorized individuals might launch or delete costly AWS resources within the account.\n\n3. **Regulatory fines:** If the data held within the AWS account falls under certain regulations (like GDPR or HIPAA), a security breach could result in significant regulatory fines.\n\n4. **Reputational damage:** The fallout from a security breach could severely damage the reputation of an organization. This might result in the loss of customers or partnerships.\n\n5. **Operational disruption:** Unauthorized alterations to the AWS account could cause critical applications or services to stop functioning properly, leading to operational disruptions.\n\nEstablishing security questions is a small but vital piece of AWS account security. Implementing security questions may seem simple, but non-compliance could have detrimental consequences to the business's operations and credibility."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, if an organization named \"Tech Innovations\" has its account on AWS cloud. They have various services deployed to enhance their operations. During the course of operations, they may encounter some issues with AWS resources or services, and they will need to get in touch with AWS customer service. \n\nIf they don't have security questions set up and anyone gets access to some of their account details, they can pose as the account owner and request changes or gain access to sensitive information which leads to security breaches. \n\nBut if \"Tech Innovations\" has established security questions, AWS customer service, when contacted, can ask these questions to verify the identity of the person. This way, only the actual account owner can contact AWS customer service for support, hence enhancing their account security. So, even if someone else tries to pose as them, they won't be able to answer those security questions correctly, so AWS will deny the support request.\n\nThis example shows us how the AWS Control in the AWS support portal for establishing security questions is useful in offering an extra layer of security in identity and access management."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_4",
    "Title": "1.4 Ensure no root user account access key exists",
    "Description": "The root user account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the root user account be removed.",
    "QueryID": "aws_iam_root_user_no_access_keys",
    "DocumentURI": "policies/aws_cis_v130_1_4.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.4"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can lead to several potentially costly consequences:\n\n1. **Security Risks**: The root user account has full access to all AWS services and resources. If the access keys associated with this account fall into the wrong hands, they may carry out malicious activities, causing security breaches and data loss.\n\n2. **Financial Consequences**: A malicious entity with access to the root user account can start, stop, or modify services. This can lead to unexpected costs or even financial loss, for example, by starting up costly resources and running them unnecessarily.\n\n3. **Non-Compliance Penalties**: If an organization is subject to compliance requirements such as the GDPR, HIPAA, or PCI DSS, the use of AWS root user account access keys may be against their security controls. Non-compliance can lead to penalties, including fines and sanctions.\n\n4. **Reputational Damage**: In the event of a security breach, an organization's reputation can be severely damaged resulting in loss of customer trust and future business.\n\n5. **Operational Disruption**: Unauthorized tampering with AWS resources can lead to operational disruptions. This can prevent an organization from conducting business normally or impact a user's experience.\n\nTherefore, it's crucial to avoid utilizing root user account access keys and instead adhere to the best practice of using IAM users for daily interactions with AWS resources."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, let's consider a fictitious company named \"XYZTech\". They have many AWS services running in their environment with several team members having access to different services.\n\nInitially, the root user access keys were used for some services to set them up quickly, but over time the complexity and the number of team members managing different services have increased significantly. The indiscriminate distribution and usage of root user access may lead to higher security risks, such as unauthorized access or accidental deletion of important resources.\n\nAfter reviewing their security policies, they realize the risk and therefore decide to remove all access keys associated with the root user. They instead opt to create IAM users with the least privileges necessary for each team member. The specific IAM roles assure that team members have just enough access to perform their tasks, but not more, which markedly decreases the possibility of unauthorized access or changes to critical resources/services. \n\nBy disabling root account keys, the company minimizes the risk of root credentials being compromised, which, if happened, could easily lead to a major breach or accidental modifications to the AWS setup due to the root user's absolute power over the setup. Hence, such a control would be highly useful for a company like XYZTech aiming to enhance its security on AWS."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_1",
    "Title": "4.1 Ensure a log metric filter and alarm exist for unauthorized API calls",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.",
    "QueryID": "aws_log_metric_filter_unauthorized_api",
    "DocumentURI": "policies/aws_cis_v130_4_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.1"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the mentioned AWS control can pose several costs to your organization including:\n\n1. **Financial Loss:** Unauthorized API calls could be a result of cyber-attackers trying to manipulate or steal your organization's sensitive data. The costs for recovering from such cyber-attacks can be massive. These costs not only involve the recovery of the lost data but also include the associated legal fees, fines, and the cost of reputational damage.\n\n2. **Operational Disruption:** Unauthorized API calls could result in disruption to your operations. This not only hampers productivity, but can also lead to loss of business in case your services become unavailable or are degraded.\n\n3. **Data Loss:** If an unauthorized API call results in data corruption or deletion, this can lead to significant loss of business-critical information which might be difficult or even impossible to recover.\n\n4. **Regulatory Sanctions:** Depending on the nature of your business and the sensitivity of your data, non-compliance could also result in regulatory fines and sanctions.\n\n5. **Reputational Damage:** Breaches in security and loss or corruption of data can lead to a loss of trust among your clients and customers. This can have long-term negative consequences on your organization's reputation.\n\n6. **Loss of Competitive Advantage:** Unauthorized access to your business's proprietary information can be capitalized on by competitors, leading to a loss of competitive advantage over time.\n\nMonitoring and alerting on unauthorized API calls help you stay proactive in identifying and dealing with such potential threats. This reduces overall operational and security risks to your organization."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nSuppose you are operating a large scale application that includes multiple services spanning across multiple AWS accounts. As part of your security measures, you are monitoring for any misuse, unauthorized access or anomalies in the utilization of AWS resources.\n\nOne of the developers working in your team accidentally checked in some AWS credentials in the GitHub repository which got exposed publicly. This mistake could invite cyber attackers to exploit your system, resulting in unauthorized API calls to your AWS services.\n\nHere's where this AWS control comes in handy. By setting up real-time monitoring of these API calls with CloudTrail logs directed to CloudWatch Logs, you can instantly identify any irregularities or suspicious activities. \n\nOnce you establish a metric filter and alarm for unauthorized API calls within CloudWatch, the system can immediately alert you if it detects any unauthorized API calls being made using your AWS credentials. This allows you to promptly act upon it, enforcing security measures like revoking the compromised credentials and minimizing any potential damage.\n\n```\n{\n    \"MetricAlarms\": [\n        {\n            \"AlarmName\": \"UnauthorizedAPICalls\",\n            \"AlarmDescription\": \"Triggered when unauthorized API calls are detected\",\n            \"MetricName\": \"UnauthorizedCalls\",\n            \"Namespace\": \"AWS/Logs\",\n            \"Statistic\": \"SampleCount\",\n            \"Period\": 300,\n            \"EvaluationPeriods\": 1,\n            \"Threshold\": 1.0,\n            \"ComparisonOperator\": \"GreaterThanOrEqualToThreshold\",\n            \"AlarmActions\": [\n                \"arn:aws:sns:us-west-2:111122223333:MyNotificationTopic\"\n            ],\n            \"Dimensions\": [\n                {\n                    \"Name\": \"LogGroupName\",\n                    \"Value\": \"CloudTrail/DefaultLogGroup\"\n                },\n                {\n                    \"Name\": \"FilterName\",\n                    \"Value\": \"UnauthorizedCalls\"\n                }\n            ]\n        }\n    ]\n}\n```\nIn the above scenario, the CloudWatch alarm `UnauthorizedAPICalls` gets activated when any unauthorized API calls are detected in your system. When such an occurrence happens, it triggers a message to the SNS topic `MyNotificationTopic` that can be configured to notify your security team immediately."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_3_2",
    "Title": "3.2 Ensure CloudTrail log file validation is enabled.",
    "Description": "CloudTrail log file validation creates a digitally signed digest file containing a hash of each log that CloudTrail writes to S3. These digest files can be used to determine whether a log file was changed, deleted, or unchanged after CloudTrail delivered the log. It is recommended that file validation be enabled on all CloudTrails.",
    "QueryID": "aws_cloudtrail_trail_validation_enabled",
    "DocumentURI": "policies/aws_cis_v130_3_2.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "3.2"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "3"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudTrail"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can have several costs assigned to it:\n\n1. **Security Risk**: By not enabling file validation on all CloudTrails, you expose your platform to potential unauthorized access and changes. An intruder could delete or alter your log files to cover their tracks, making it harder to identify and rectify a security breach. \n\n2. **Monetary Loss**: In case of a breach that results in data theft or loss, the cost of recovery and potential fines for not maintaining proper security measures could be immense.\n\n3. **Loss of Integrity**: If log files are altered, the accuracy and reliability of these logs are compromised. You may face issues during critical decision-making processes or while troubleshooting issues, as the logs you rely on would no longer be reliable.\n\n4. **Regulatory Non-Compliance**: If you're in an industry that mandates certain compliance standards, not enabling file validation could result in regulatory fines and penalties. In certain cases, it might also lead to the loss of licenses, further disrupting your business operations.\n\n5. **Trust Issues**: If your customers and partners come to know about your lax security measures, it can lead to a loss of trust and might negatively affect your reputation and revenue in the long run.\n\nHere's how we can denote it using Markdown:\n\n```markdown\n## Cost of Non-Compliance to CloudTrail Log File Validation \n\n1. **Security Risk**: Increased chances of unauthorized access and changes to log files.\n2. **Monetary Loss**: Potential costs associated with recovery from a data breach and possible penalties for nonadherence to recommended security measures.\n3. **Loss of Integrity**: Log files may lose their accuracy and reliability, affecting decision-making and troubleshooting processes.\n4. **Regulatory Non-Compliance**: Could result in fines, penalties, and loss of licenses in regulated industries.\n5. **Trust Issues**: Customers and partners may lose trust due to the lack of proper security measures, affecting reputation and revenue.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "```markdown\nExample:\n\nA tech company, Acme Inc., uses AWS for their web application which involves handling sensitive user data. They are subjected to regulations and need to maintain strong audit trails to ensure compliance. There might also be potential security threats with insiders or external actors trying to alter or delete log files to hide their malicious activities.\n\nTo handle these challenges, Acme Inc. has enabled CloudTrail and its log file validation feature. Each time an action is executed within their AWS environment, it's logged by CloudTrail and stored in an S3 bucket. CloudTrail also creates a digitally signed digest file for each log which contains a hash of that log. \n\nWhen Acme Inc. conducts regular security audits or investigates a suspected security incident, they are able to use these digest files to validate the integrity of their logs. They can determine if any log file has been changed or deleted after CloudTrail delivered the log. This gives them confidence that their audit trails are reliable and helps identify any attempts to tamper with logs.\n\nTherefore, CloudTrail log file validation feature is extremely beneficial to Acme Inc. in ensuring data integrity, maintaining regulatory compliance and enabling effective response to security threats.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_5_1",
    "Title": "5.1 Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports",
    "Description": "The Network Access Control List (NACL) function provide stateless filtering of ingress and egress network traffic to AWS resources. It is recommended that no NACL allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.",
    "QueryID": "aws_vpc_network_acl_remote_administration",
    "DocumentURI": "policies/aws_cis_v130_5_1.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "5.1"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "5"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/VPC"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance with this AWS Control can be significant and multifaceted.\n\n1. **Security Risks**: Non-compliance significantly increases the vulnerability of your AWS resources to cyber attacks. This can lead to breaches in data privacy, unauthorized access to sensitive data, and potential takeover of your resources by hackers. It may also lead to other adverse incidents such as Denial of Service (DoS) attacks.\n\n2. **Financial Costs**: Cybersecurity incidents can result in financial losses, either directly (e.g. in the case of financial or data theft) or indirectly through interruption of business, damage to your brand reputation, or lawsuits and fines from regulatory bodies.\n\n3. **Regulatory Violation Penalties**: If you are part of a regulated industry, non-compliance with this AWS control might lead to you violating regulations and incurring severe penalties. These penalties can take the form of fines, license revocations, or even criminal charges in some severe cases. \n\n4. **Loss of Customer Trust**: If a security breach occurs due to non-compliance, it might result in the loss of trust among customers and clients. This can have strong adverse effects on the reputation and business output.\n\n5. **Key Management Overhead**: Running servers with unrestricted ingress access can lead to higher key management overhead, as it can be challenging to restrict and monitor who has access to these keys.\n\nMaintaining compliance with this AWS control is therefore of utmost importance to ensure the secure and unhindered operation of your AWS resources."
      ],
      "x-kaytu-usefulness-example": [
        "Here is an example instance illustrating the usefulness of the AWS Network Access Control List (NACL):\n\nConsider a business environment having multiple virtual private clouds (VPCs) on AWS. Their security team is wary about data breaches and is intensely focused on securing their infrastructure. One of the tactics they have employed here is the use of NACLs.\n\nFor instance, their database servers running on a specific subnet don't need to be accessed from outside their VPC. Any connection request to their database servers, especially on the common ports like 3306 for MySQL or 5432 for PostgreSQL, from outside the VPC could potentially be a hacking attempt.\n\nTo restrict this, they set up NACL to deny all inbound traffic on those ports.\n\nAt the same time, their web servers need to communicate with these database servers. The communication happens on certain known ports and from known IP addresses of the web servers. They set up NACL to only allow inbound traffic on the DB port from those specific IPs.\n\nAlso, they would instate rules on the NACL to prevent SSH and RDP access to their servers from unknown sources.\n\nThis implementation of NACL provides a security layer at the subnet level, effectively denying unwarranted access and protecting AWS resources from potential threats. It serves as an efficient and necessary measure in addition to Security Groups for safeguarding their systems."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_2",
    "Title": "4.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).",
    "QueryID": "aws_log_metric_filter_console_login_mfa",
    "DocumentURI": "policies/aws_cis_v130_4_2.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.2"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS Control can lead to several major financial and credibility costs:\n\n1. **Security Breach Costs:** If API calls aren't monitored in real-time and console logins are not protected by MFA, it makes your system vulnerable to security breaches. The cost of dealing with a security breach is high, including the expenses incurred in detecting and repairing the breach.\n\n2. **Data Loss and Recovery Costs:** Non-compliance could trigger unauthorized access and manipulation of data, potentially leading to loss of high-value information. The cost of recovering or reproduating the lost data could be substantial.\n\n3. **Regulatory Fines:** Non-compliance may also violate data security regulations such as GDPR, CCPA, or HIPAA. This could attract heavy fines by regulatory authorities.\n\n4. **Reputation Costs:** If customers, investors, and other stakeholders lose trust due to the lack of security, it could damage the organization's reputation, resulting in a loss of business in the long run.\n\n5. **Operational Disruptions:** Without real-time monitoring, any malicious activity could lead to downtime and operational disruption in your AWS environment, which would involve both direct and indirect costs.\n\n6. **Legal and Lawsuit Costs:** In case of a data breach, the affected parties may prefer to seek legal remedies. This will enhance legal costs and might also result in monetary compensation if the court judgement is against you.\n\nOverall, non-compliance with this AWS Control not only endangers your organization's data security but could also trigger severe costs and consequences."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA company has several employees and contractors who access their AWS Management Console for various tasks. To ensure the security of their AWS resources and applications, the company has established a policy that all console logins must be protected by multi-factor authentication (MFA). \n\nHowever, they need a way to actively monitor and ensure that this policy is being complied with. They implement AWS CloudTrail, which records all API calls including console logins. To get real-time monitoring, they direct the CloudTrail logs to CloudWatch Logs.\n\nThen, they establish a metric filter and alarm within CloudWatch. This metric filter is designed to detect AWS Management Console Sign-in events that are not authenticated by an MFA device. The alarm triggers whenever such events occur.\n\nWith this setup, the company can immediately get alerted whenever there's a console login without MFA. This allows the security team to instantly react to potentially harmful violations of their security policy, thus enhancing their security posture in AWS. Single-factor logins could indicate an attempted unauthorized access or a security hole, so being able to detect and react to these events in real-time is very useful for the company."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_5",
    "Title": "1.5 Ensure MFA is enabled for the \"root user\" account",
    "Description": "The root user account is the most privileged user in an AWS account. Multi-factor Authentication (MFA) adds an extra layer of protection on top of a username and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their username and password as well as for an authentication code from their AWS MFA device.",
    "QueryID": "aws_iam_root_user_mfa_enabled",
    "DocumentURI": "policies/aws_cis_v130_1_5.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.5"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can be severe and can be broken down into several categories:\n\n1. **Security Risks:** A non-MFA enabled root account is like an open door for hackers. They could potentially gain full access to your AWS resources if the root user's credentials are compromised. Therefore, the possible cost of a security breach could be massive, both in terms of resource utilization and data loss or exposure.\n\n2. **Financial Risks:** If a malicious entity gained access to a non-MFA protected root account, they could launch large and costly AWS instances or services, causing a significant and unexpected increase in your AWS costs.\n\n3. **Regulatory Penalties:** Many industries must comply with regulations that require MFA for root-level access. Non-compliance could result in hefty fines or penalties from regulatory agencies.\n\n4. **Reputation Damage:** If data loss or exposure occurs because of non-compliance, it could severely damage the reputation of your organization, causing loss of customers and future business. Recovering from such an incident could involve additional costs and resources.\n\n5. **Mitigation and Recovery Costs:** Even if a breach occurs, measures must be taken to secure the compromised accounts, investigate the incident for any potential damage, and recover or replace any lost or damaged resources. All these steps require resources and time, therefore adding to the cost of non-compliance.\n\nIn conclusion, enabling MFA for the root user account is a simple and effective measure to avoid these potential costs."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nJohn's startup uses AWS for hosting their e-commerce website. As the founder, he is the root user of their AWS account, which has complete access to all resources. Considering the high level of privilege given to the root user, John decided to use Multi-factor Authentication (MFA) as an added security layer. By doing this, even if someone manages to get a hold of his login credentials, they would still need the authentication code from his AWS MFA device, making illegal access to the account virtually impossible. \n\nJohn's smart decision paid off when an attempted breach on their AWS account was prevented due to the MFA requirement. The hacker had somehow acquired John's user name and password but could not provide the additional MFA code required for access. John was able to reset his credentials and kept their AWS resources secure, thereby avoiding potential downtime for the e-commerce website and loss of business. \n\nThus, the use of MFA for the root user account in AWS proves crucial in protecting high-privilege AWS accounts from breaches."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_3_3",
    "Title": "3.3 Ensure the S3 bucket used to store CloudTrail logs is not publicly accessible",
    "Description": "CloudTrail logs a record of every API call made in your AWS account. These logs file are stored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL) applied to the S3 bucket that CloudTrail logs to prevent public access to the CloudTrail logs.",
    "QueryID": "aws_cloudtrail_bucket_not_public",
    "DocumentURI": "policies/aws_cis_v130_3_3.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "3.3"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "3"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudTrail"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The non-compliance to this AWS Control, specifically not securing the S3 bucket that stores CloudTrail logs, can lead to several costs:\n\n1. **Security Costs**: If CloudTrail logs are accessible publicly, it becomes a wealth of information for malicious actors who can use this data to understand your AWS environment, the account activities, and exploit potential vulnerabilities.\n\n2. **Compliance Costs**: Many regulatory standards like HIPAA, PCI-DSS, etc. require strict control over access to audit logs. Non-compliance can result in hefty fines and penalties.\n\n3. **Privacy Costs**: CloudTrail logs can contain sensitive information. Public access can lead to breaches of customer or employee privacy and potential legal ramifications.\n\n4. **Operational Costs**: If a security breach does occur, the cost to investigate and remediate can be quite high. Also, you might need additional resources to prevent future occurrences.\n\n5. **Reputational Costs**: A security breach or non-compliance to regulatory standards can result in a significant loss of trust among customers, affecting your brand and market reputation."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nConsider a large eCommerce company that operates on AWS and needs to meet several compliance regulations. They might need to store and analyze records of all the API calls made in their AWS account due to a regulatory requirement or an internal risk management mandate. \n\nIn this case, CloudTrail is set up to log API calls and store them in an S3 bucket. However, to maintain security and data confidentiality, the company implement a bucket policy or ACL on the S3 bucket that CloudTrail logs to prevent public access. This ensures that only authorized personnel can access these logs.\n\nThis application of CloudTrail and access control via bucket policies or ACL would aid in addressing security risks, complying with audit requirements, and maintaining user activity accountability within their AWS environment.\n\nUse of CloudTrail is crucial in this scenario as it allows the business to:\n\n1. Improve security posture by tracking user activity and identifying potentially unauthorized actions or security gaps.\n2. Meet compliance requirements by demonstrating a mechanism for accountability and auditability.\n3. Troubleshoot operational issues by enabling visibility into API actions taken in the AWS environment."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_3_4",
    "Title": "3.4 Ensure CloudTrail trails are integrated with CloudWatch Logs",
    "Description": "AWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, realtime analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.",
    "QueryID": "aws_cloudtrail_trail_integrated_with_logs",
    "DocumentURI": "policies/aws_cis_v130_3_4.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "3.4"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "3"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudTrail"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS CloudTrail control could mean the following:\n\n1. **Increased Security Risks**: Without CloudTrail logs, an organization may lack the necessary visibility into who is making what changes within their AWS environment. This could lead to unnoticed malicious activities or unanticipated changes that could compromise system integrity, confidentiality, or availability.\n\n2. **Potential for Non-Compliance with Regulatory Standards**: Many regulatory standards, such as HIPAA, PCI DSS, or GDPR, require businesses to maintain detailed audit logs of all changes within their IT environment. A lack of CloudTrail logs could mean failing to meet these regulations, which can lead to hefty fines and penalties.\n\n3. **Operational Issues and Diagnostic Challenges**: CloudTrail logs are crucial for diagnosing operational issues, identifying security threats, and understanding user activities. Without these logs, it becomes much harder to troubleshoot, resolve and learn from operational and security issues.\n\n4. **Cost of Incident Investigation**: In case of a security incident or anomaly, having access to detailed logs can significantly cut down the time and resources required to investigate and remediate. Without these logs, incident investigation can become a timely and expensive process.\n\n5. **Loss of Customer Trust**: As per the shared responsibility model, AWS customers are responsible for securing their workloads on the AWS environment. Failing to use tools like CloudTrail for security monitoring can therefore lead to breaches that result in loss of customer trust and potential business opportunities.\n\nThe cost of non-compliance is therefore not only financial in terms of potential fines and increased operational cost, but can also have wide-ranging implications on security, incident response, business continuity, customer trust, etc."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, you own a large e-commerce website that runs using numerous services by AWS. As your business grows, maintaining security and auditing becomes a critical task. Here, AWS CloudTrail proves to be useful in detecting unusual activity or scrutinizing recent changes in AWS resources. \n\nFor instance, if there is any unauthorized access or suspicious activity in your AWS account, it may lead to security breaches, such as data leakage or unauthorized changes in your AWS resources. AWS CloudTrail helps you to identify these anomalies. By analyzing CloudTrail logs, you can trace the API calls to determine the requester, source IP, and request parameters. \n\nAlso, in the case of a system failure or service disruption due to configuration changes, CloudTrail can provide the historical record of all API calls, enabling you to identify the detrimental modifications made to your AWS resources.\n\nTherefore, you can keep track of all API requests and corresponding responses, maintain security, ensure compliance, and troubleshoot operational issues in your AWS environment with the help of AWS CloudTrail. \n\nMoreover, with the integration of CloudTrail with CloudWatch, you can perform real-time inspection which aids in quick anomaly detection and instant remediation actions, enhancing the overall security posture of your organization."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_3",
    "Title": "4.3 Ensure a log metric filter and alarm exist for usage of \"root\" account",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for root login attempts.",
    "QueryID": "aws_log_metric_filter_root_login",
    "DocumentURI": "policies/aws_cis_v130_4_3.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.3"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance with this AWS control can be quite high. Here's why:\n\n1. **Unnoticed Unauthorised Access:** Without this control, unauthorized access attempts to your root account may go unnoticed, thereby allowing potential breaches that may lead to loss of sensitive data, manipulation and even complete takeover of the AWS Resources.\n\n2. **No Early Detection of Suspicious Activity:** Root login attempts should be rare within an optimally configured system, frequent root login attempts could be a sign of a potential security issue brewing. If such security threat is not quickly detected and addressed, it could lead to serious damage.\n\n3. **Cost Implication due to Security Breach:** A security breach could cost your organization a lot of money due to potential data loss, service interruptions, and associated regulatory fines. Remember, breaches can also damage brand reputation, resulting in loss of customers and revenue in the long-term.\n\n4. **Non-compliance with Regulations:** If your organization is subject to compliance regulations that require you to monitor and report on access to your systems (like GDPR, HIPAA, etc.), lack of such control could result in hefty non-compliance penalties or fines.\n\nTherefore, it's advisable to comply with this AWS control and establish real-time monitoring of API calls, especially for root logins, to safeguard your AWS resources and maintain compliance with relevant regulations."
      ],
      "x-kaytu-usefulness-example": [
        "AWS Control provides extensive services that aid in keeping track of your API calls, maintaining security, and other services in real time. These services can be made more valuable by using CloudTrail Logs and CloudWatch Logs, particularly for monitoring root login attempts. \n\nFor example, consider a situation where you have an eCommerce business where numerous APIs are in use  frequently. As the traffic grows, it becomes nearly impossible to manually monitor if any API calls are failing, not responding, or causing other concerns. \n\nIn this situation, directing CloudTrail Logs to CloudWatch Logs can be particularly useful. You can set it up to get notifications, debug information, operation initiations, or termination logs directly to CloudWatch Logs in real-time. \n\nMoreover, setting a metric filter and alarm for root login attempts helps ensure security by detecting any unauthorized attempts to breach your AWS account. This means the moment someone attempts a root login, it triggers the alarm, and immediate action can be taken to avoid any security breach. \n\nHere is how you could potentially set an alarm for root login attempts:\n\n```markdown\n1. Open the CloudWatch console in the AWS Management Console.\n2. In the navigation pane, click on 'Alarms'.\n3. Click 'Create Alarm'.\n4. In 'Create Alarm', select 'Metric'.\n5. Select the metrics category.\n6. In the search box, type 'AWS/CloudTrail'.\n7. In the results, select 'Root Login attempts'.\n8. For statistic, select 'Sample Count'.\n9. Choose the threshold type, for example, 'Static'.\n10. For 'Whenever:', type 'is', then choose 'Greater' '\u003e=', then type '1'.\n11. Specify the action to take when the alarm state is reached, for example, 'Notify me'.\n12. Click 'Create Alarm'.\n```\n\nAfter setting up this alarm, you will receive notifications of any root login attempts, allowing you to monitor and take necessary security measures in real time."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_5_2",
    "Title": "5.2 Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports",
    "Description": "Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.",
    "QueryID": "aws_vpc_security_group_remote_administration",
    "DocumentURI": "policies/aws_cis_v130_5_2.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "5.2"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "5"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/VPC"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the above mentioned AWS Control can potentially lead to significant costs that are both financial and operational in nature. Some of these costs include:\n\n1. **Security Breaches:** Allowing unrestricted access to remote server administration ports such as SSH (port 22) and RDP (port 3389) increases the risk of unauthorized access, potentially leading to security breaches. The cost of a security breach can be enormous, leading to financial loss, reputation damage, and regulatory fines.\n\n2. **Data Theft or Loss:** Unrestricted access could be exploited by hackers to steal or manipulate critical business data. Such data breaches can lead to financial loss, especially if the lost data includes sensitive customer information or proprietary business information.\n\n3. **Disruption to Business Continuity:** If malicious actors gain access to these ports, they may be able to disrupt your service, leading to downtime and therefore loss of revenue and productivity.\n\n4. **Regulatory Penalties:** Non-compliance may also be a violation of data protection and privacy regulations such as GDPR, HIPAA etc. This can lead to hefty fines and penalties, and reputation damage.\n\n5. **Increase in Operational Costs:** In order to handle the aftermath of a security breach or unauthorized access incident, businesses may have to increase spending on security operations, as well as on the investigation and remediation of the security incident. This can include costs for conducting forensic investigations, fixing the exploited vulnerability, enhancing monitoring capabilities, and improving security practices.\n\nTherefore, both from a financial and operational perspective, complying with AWS controls like the one mentioned above is crucial for maintaining the security, integrity, and availability of business data and services."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, consider a medium-sized organization that is using AWS to host their application. This application need a database to store data, a web-server to host the application's API, and other services running in different instances.\n\nAll these instances are running in a Virtual Private Cloud (VPC), and each instance has different roles and responsibilities. The database should only accept traffic from the application server on a specific port, the application server should only accept HTTP/HTTPS requests from the internet, and other services should accept traffic in response to requests that they initiate.\n\nBy setting up AWS security groups, the organization can use stateful filtering to control both inbound (ingress) and outbound (egress) traffic to these instances. For the database instance, a security group rule could be established allowing inbound traffic only on the specific port used for database connections, and only from the IP range of the application server. Similarly, a rule for the application server could restrict inbound traffic to the HTTP/HTTPS ports, and only from the range of IP addresses considered safe.\n\nAlso, as a good security measure is to restrict administration ports access, for instances that require SSH or RDP access, a security group could be created restricting access to those ports (22 for SSH and 3389 for RDP) only to specific, trusted IP addresses. This prevents these sensitive ports from being exposed to the entire internet, reducing the instance's exposure to potential attacks.\n\nTherefore, the use of AWS security groups in this scenario assists in providing a granular level of security control over network access, helping to protect the organization's resources and data."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_6",
    "Title": "1.6 Ensure hardware MFA is enabled for the \"root user\" account",
    "Description": "The root user account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. For Level 2, it is recommended that the root user account be protected with a hardware MFA.",
    "QueryID": "aws_iam_root_user_hardware_mfa_enabled",
    "DocumentURI": "policies/aws_cis_v130_1_6.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.6"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the control of protecting the root user account with MFA, especially a hardware MFA, can be quite substantial for businesses and organizations:\n\n**1. Data Breaches** - Without MFA, if the root user's password happens to be leaked or cracked, unauthorized individuals could gain full access to your company's AWS resources. They could potentially compromise or steal sensitive data leading to a massive data breach.\n\n**2. Financial Loss** - Unauthorized access to the root user account can lead to misuse of AWS resources. Attackers could, for example, run large instances or create numerous resources leading to a significant financial loss.\n\n**3. Business Disruption** - Attackers with root access can manipulate instances and resources for malicious intent causing system failures, therefore, disrupting business processes and services.\n\n**4. Reputation Damage** - Data breaches and disrupted services can lead to damage to a company’s reputation, resulting in loss of customers or potential business opportunities, and a decrease in business growth.\n\n**5. Legal and Regulatory Penalties** - In some cases, non-compliance with best security practices like MFA can lead to legal implications, including penalties or sanctions from regulatory bodies. This can particularly be the case in industries that deal with sensitive data like finance or healthcare, where data protection and privacy laws apply.\n\nIn conclusion, the cost of non-compliance in this regard can have substantial negative impacts beyond just the financials. The potential damage to reputation and business continuity, along with possible legal implications, makes it essential to have such security measures in place."
      ],
      "x-kaytu-usefulness-example": [
        "```markdown\nExample:\n\nConsider the case where your organization has an AWS account that manages critical infrastructure for running a large e-commerce platform. Any unauthorized access or security breach can have severe consequences like data loss, revenue loss, or reputational damage.\n\nThe root user of such an AWS account has immense power, including complete access to all AWS services and resources. Therefore, it is pivotal to secure this account as diligently as possible to prevent potential security threats.\n\nBy applying MFA (Multi-Factor Authentication), you add an extra layer of security. This means that even if someone gains access to your root user's username and password, they cannot log in without the additional authentication code. \n\nUnder Level 2 protection, a hardware MFA device can be used. This hardware device is physically secured within your organization. When a root user sign-in attempt occurs, the user must input a unique code from this hardware device. As the code changes frequently and the device is physically stored in a secure place, this greatly reduces the risk of unwanted access to your root AWS account.\n\nWith multiple levels of security (password, hardware MFA), your AWS root account is far more secure, reducing the opportunity for security breaches, and keeping your organization's data and services safe and operational.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_4",
    "Title": "4.4 Ensure a log metric filter and alarm exist for IAM policy changes",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.",
    "QueryID": "aws_log_metric_filter_iam_policy",
    "DocumentURI": "policies/aws_cis_v130_4_4.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.4"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control can potentially lead to significant costs for a business. Here's a breakdown:\n\n1. **Security Breaches**: Without real-time monitoring of API calls, unauthorized or suspicious activities can go unnoticed. Any changes to IAM policies should be tracked and logged to ensure no unauthorized access has been granted to sensitive information. If a breach were to occur without this control, the cost could range from losing sensitive data, damaging the company's reputation, customer trust and incurring legal penalties.\n\n2. **Non-compliance Penalties**: Certain industries have strict regulations regarding data protection and privacy. Failing to promptly detect and address any unauthorized modifications to IAM policies could lead to non-compliance, resulting in heavy fines and penalties.\n\n3. **Operational Disruptions**: Without monitoring, unauthorized changes to IAM policies could potentially disrupt services, leading to operational downtime. This could cause a loss in revenue, customer satisfaction, and additional cost for incident response and recovery.\n\n4. **Forensic Costs**: After a security incident, substantial resources may be needed to investigate the breach, remediate the vulnerabilities, and recover lost data. Real-time monitoring and alerting can help prevent such incidents or at least minimize the impact, thus reducing these costs. \n\nHere is the markup version:\n\n```\n- **Security Breaches**: Without real-time monitoring of API calls, unauthorized or suspicious activities can go unnoticed. Any changes to IAM policies should be tracked and logged to ensure no unauthorized access has been granted to sensitive information. If a breach were to occur without this control, the cost could range from losing sensitive data, damaging the company's reputation, customer trust and incurring legal penalties.\n\n- **Non-compliance Penalties**: Certain industries have strict regulations regarding data protection and privacy. Failing to promptly detect and address any unauthorized modifications to IAM policies could lead to non-compliance, resulting in heavy fines and penalties.\n\n- **Operational Disruptions**: Without monitoring, unauthorized changes to IAM policies could potentially disrupt services, leading to operational downtime. This could cause a loss in revenue, customer satisfaction, and additional cost for incident response and recovery.\n\n- **Forensic Costs**: After a security incident, substantial resources may be needed to investigate the breach, remediate the vulnerabilities, and recover lost data. Real-time monitoring and alerting can help prevent such incidents or at least minimize the impact, thus reducing these costs.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "For example, let's assume that you're running a medium-sized tech company with a large number of AWS IAM users. You need to ensure that your company's policies are strictly adhered to, and that any changes made to IAM policies are monitored closely.\n\nYou can direct CloudTrail Logs to CloudWatch Logs to obtain a real-time monitoring of all the API calls related to IAM policies. If there is any change in the IAM policies, such as an addition or removal of users, changes in user access policies, etc., the CloudTrail Logs can track these changes and sent to CloudWatch Logs.\n\nIn CloudWatch, you set up a metric filter to filter out the logs related to IAM policy changes. Once the filter is set, you can establish an alarm that triggers whenever there is a change recorded in the IAM policies.\n\nThis way, if anyone unauthorized changes IAM policies, you would be alerted immediately. You can investigate and revert any unwanted changes before they have wide-scale effects. This serves as both a security measure to potentially highlight malicious activity, and a management tool to maintain compliance with your company's policies.\n\n```\n{\n  \"alarmName\": \"IAMChangeAlarm\",\n  \"alarmDescription\": \"Alarm when IAM policy changes occur\",\n  \"metricName\": \"IAMPolicyChanges\",\n  \"namespace\": \"CloudTrailMetrics\",\n  \"statistic\": \"SampleCount\",\n  \"period\": 300,\n  \"evaluationPeriods\": 2,\n  \"threshold\": 1,\n  \"comparisonOperator\": \"GreaterThanOrEqualToThreshold\",\n  \"actionsEnabled\": true,\n  \"alarmActions\": [\n    \"arn:aws:sns:us-west-2:123456789012:MyTopic\"\n  ]\n}\n```\n\nThe example above creates a CloudWatch alarm named \"IAMChangeAlarm\" for the \"IAMPolicyChanges\" metric in the \"CloudTrailMetrics\" namespace. If the sample count of \"IAMPolicyChanges\" events is greater than or equal to 1 within a 5-minute period, and there are two consecutive periods that trigger the alarm condition, the alarm state changes to ALARM. When the alarm state is in ALARM, it sends a message to the \"MyTopic\" Amazon SNS topic."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_7",
    "Title": "1.7 Eliminate use of the root user for administrative and daily tasks",
    "Description": "With the creation of an AWS account, a root user is created that cannot be disabled or deleted. That user has unrestricted access to and control over all resources in the AWS account. It is highly recommended that the use of this account be avoided for everyday tasks.",
    "QueryID": "aws_iam_root_last_used",
    "DocumentURI": "policies/aws_cis_v130_1_7.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.7"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control can lead to several potential costly consequences, including:\n\n1. **Security Risks:** The root user has unrestricted access to all resources in the AWS account. If the credentials for this account are compromised, an attacker can carry out any action within your AWS environment, including destroying or modifying resources, gaining access to sensitive data, and creating additional resources that can lead to increased costs.\n\n2. **Financial Implications:** In the hands of unauthorized individuals, they could potentially spin up expensive resources or increase the load on current resources, leading to unexpectedly high AWS costs. Also, resolving security breaches can result in significant financial expenditure.\n\n3. **Compliance Violations:** Many compliance frameworks require principle of least privilege, segmentation of duties, and logging of all actions. Regular use of the root account can violate these principles, potentially leading to fines and other penalties.\n\n4. **Operational Disruptions:** Mismanagement of account operations by erroneous management operations, possibly leading to unplanned service interruptions and business disruptions. \n\nThus, AWS recommends creating individual IAM users with appropriate permissions for everyday tasks and only using the root user for necessary administrative tasks. Implementing multi-factor authentication (MFA) on the root account for an extra layer of security is also recommended. \n\nExample:\n\n```markdown\nFailure to comply with the Amazon Web Services (AWS) control of limiting the usage of root users can result in several far-reaching and costly consequences.\n\n- **Security Risks**: This user has carte blanche control over all resources in the AWS account. If these credentials fall into the wrong hands, the intruder can manipulate your AWS environment at will. \n\n- **Financial Consequences**: Unauthorized people can potentially spin up high-costing resources or increase the load on current resources. Resolving security breaches and service disruptions can rack up unexpected AWS costs. \n\n- **Compliance Violations**: Regular usage of the root account can violate principles entrenched in many compliance frameworks, potentially leading to substantial fines and penalties. \n\n- **Operational Disruptions**: Mismanagement of the account due to erroneous operations can result in unscheduled service interruptions.\n\nFor better security management, AWS suggests the creation of individual IAM users for daily tasks and to use the root user exclusively for necessary administrative duties. Implementing Multi-factor Authentication (MFA) on the root account for an extra layer of security is also a precautionary measure.\n```\n"
      ],
      "x-kaytu-usefulness-example": [
        "AWS provides various mechanisms to protect the root user, including Multi-Factor Authentication (MFA) and AWS Identity and Access Management (IAM). MFA can provide an extra layer of security, while IAM allows the creation of users with restricted or privileged access.\n\nFor instance, a finance company (e.g., ExampleFinance Corp) that stores sensitive data of their clients on AWS needs to follow strict regulatory and compliance guidelines regarding data protection. Therefore, inappropriate use of the root user account could lead to data breaches. \n\n```\nExampleFinance Corp should consider setting up an IAM user for each of their employees. Permissions to each of these users can be assigned based on their roles and responsibilities.\n\nFor example:\n- The developers can be given permissions to manage AWS services relevant to them, like AWS EC2, S3, RDS, but not AWS IAM.\n- The Operations team can be given permissions to manage AWS IAM, EC2, RDS, S3 to suit their day-to-day needs.\n- The Finance team can be given read-only access to AWS Billing.\n\nIn addition to this, MFA should be enabled for all users, providing another layer of security. Regular audits for IAM usage can help them to quickly identify any breaches or misuse.\n\nBy avoiding the use of root user accounts for daily tasks, ExampleFinance Corp can minimize the risk of unintentional access or data leaks, maintain regulatory compliance, and ensure the security of their AWS resources.\n```\nAWS provides guidelines and best practices to secure the AWS account and, if followed properly, they can help organizations protect their resources."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_5_3",
    "Title": "5.3 Ensure the default security group of every VPC restricts all traffic",
    "Description": "A VPC comes with a default security group whose initial settings deny all inbound traffic, allow all outbound traffic, and allow all traffic between instances assigned to the security group. If you don't specify a security group when you launch an instance, the instance is automatically assigned to this default security group. Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that the default security group restrict all traffic.",
    "QueryID": "aws_vpc_default_security_group_restricts_all_traffic",
    "DocumentURI": "policies/aws_cis_v130_5_3.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "5.3"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "5"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/VPC"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control can potentially lead to several costs such as:\n\n1. **Security Risks**: It can make your resources vulnerable to cyber-attacks or data breaches. If the default security group doesn't restrict traffic, malicious users can enter or leave the network, which can cause a security breach, including theft of sensitive data.\n\n2. **Operational Risks**: Unauthorized changes in the system can result in operational issues. If any unwanted or unnecessary change happens, it can cause system lag or even system failure, leading to potential service interruptions or downtimes.\n\n3. **Compliance Costs**: If your company needs to comply with certain regulations (such as GDPR, HIPAA, etc.), non-compliance with these regulations can lead to heavy fines.\n\n4. **Potential Data Loss**: In case of a cyber-attack or unauthorized access, there is a risk of data loss which can result in consequences gap in business operation, reputation damage and even potential legal issues.\n\n5. **Reputational Damage**: If a data breach occurs due to the non-compliance of this AWS Control, the trust and reputation of the company can be severely impacted which can lead to loss of customers and revenue. \n\nOverall, the cost of non-compliance can be much higher than maintaining compliance with recommended AWS Controls. Therefore, it's crucial to ensure strict compliance with recommended security controls."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, imagine you run a company that has deployed its web application on an EC2 instance in the AWS Cloud. Your application includes web servers listening to HTTP/HTTPS traffic and a database server communicating on a specific port. You need to protect these servers from unauthorized access and attacks.\n\nWith the VPC's default security group, you can allow HTTP and HTTPS inbound traffic only from trusted IP ranges to the web servers, and allow the database port traffic only from the web servers. This way, you can ensure your application servers are not exposed to the public internet, reducing the risk of a potential security breach.\n\nYou can also leverage the default security group's stateful filtering, which means return traffic is automatically allowed, regardless of any outbound rules. For example, if you send a request to update your database server, the response is allowed to flow back in, even if inbound traffic is restricted for the port used in the response.\n\nRemember, if you don’t specify a security group when you launch an instance, your instance gets assigned to this default security group. This ensures that every instance you launch in your VPC is protected against unfiltered traffic and potential threats, which is essential for maintaining a secure and stable environment.\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_3_5",
    "Title": "3.5 Ensure AWS Config is enabled in all regions",
    "Description": "AWS Config is a web service that performs configuration management of supported AWS resources within your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), any configuration changes between resources. It is recommended to enable AWS Config be enabled in all regions.",
    "QueryID": "aws_config_enabled_all_regions",
    "DocumentURI": "policies/aws_cis_v130_3_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "3.5"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "3"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/Config"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control has several facets, including potential financial implications, security risks, and operational inefficiencies. \n\n1. **Financial Implications**: If AWS Config is not enabled in all regions, unexpected costs might occur due to unidentified or under-managed resources. AWS Config provides the ability to assess, monitor, and evaluate the configurations of AWS resources. Without it, you might not be able to identify unused instances that are incurring unnecessary costs.\n\n2. **Security Risks**: AWS Config tracks changes in the configuration of resources, which can be crucial in identifying and responding to security incidents. If you are not in compliance with this control, you may face increased vulnerability to security threats due to lack of visibility and oversight into configuration changes. Moreover, non-compliance might also potentially lead to regulatory penalties if this monitoring is a requirement in your industry or region.\n\n3. **Operational Inefficiencies**: Without AWS Config enabled across all regions, it can be much more difficult and time-consuming to manage resources. Tracking resources, managing changes, and identifying relationships between resources are all streamlined with AWS Config.\n\n4. **Audit Readiness**: AWS Config delivers log files and detailed visibility into resource configuration profiles, change history, and relationships. This capability is critical during auditing. non-compliance with this control may result in the inability to report comprehensively on your resource configuration and changes during audits, potentially leading to failed audits.\n\n5. **Compliance Requirement**: For industries with strict compliance requirements, such as healthcare or finance, not enabling AWS Config in all regions could mean failing to meet those compliance protocols. This could result in penalties or revoked licenses to operate.\n\nIn conclusion, being in non-compliance with this AWS control can increase operational costs, expand security vulnerabilities, render audits more challenging and potentially result in regulatory penalties. Therefore, it is highly recommended to enable AWS Config in all regions to maintain robust monitoring and management of AWS resources."
      ],
      "x-kaytu-usefulness-example": [
        "In a business scenario, a company may have several services across multiple regions on AWS. It may include EC2 instances, RDS, Redshift clusters, S3 buckets, etc. Managing and keeping track of the configurations of these services can be very difficult and complex, especially in a rapidly changing environment.\n\nEnabling AWS Config in all regions can streamline the configuration management process significantly. For example, suppose a developer inadvertently alters the configuration of an EC2 instance in a specific region, which leads to a drop in the application performance. With AWS Config enabled, it would be much easier to pinpoint when exactly the change was made and what the previous configuration was. It would then be a simple matter to revert to that earlier configuration to resolve the issue.\n\nMoreover, AWS Config can also provide important insights for security audits by tracking the relationships and changes between resources. For example, if an S3 bucket gets unnecessarily connected to a public network resulting in a data leak, AWS Config can help identify how the breach happened by looking at what configurations were changed and when.\n\n```\nBenefits of using AWS Config:\n- Streamlines configuration management\n- Simplifies troubleshooting\n- Provides insights for security audits\n```\n\nSo in essence, AWS Config can drastically simplify the process of managing and auditing the configurations of AWS services across multiple regions thus increasing efficiency and reducing risk."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_5_4",
    "Title": "5.4 Ensure routing tables for VPC peering are 'least access'",
    "Description": "A VPC comes with a default security group whose initial settings deny all inbound traffic, allow all outbound traffic, and allow all traffic between instances assigned to the security group. If you don't specify a security group when you launch an instance, the instance is automatically assigned to this default security group. Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that the default security group restrict all traffic.",
    "QueryID": null,
    "DocumentURI": "policies/aws_cis_v130_5_4.md",
    "ManualVerification": true,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "5.4"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "5"
      ],
      "cis_type": [
        "manual"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/VPC"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can result in several potential costs:\n\n1. **Security Risk**: The most significant cost of non-compliance is the increased security risk. By allowing all outbound traffic and all traffic between instances assigned to the default security group, you may unknowingly allow malicious activity, such as data theft or unauthorized system access.\n\n2. **Data Breaches**: A direct consequence of the raised security risk is the increased likelihood of data breaches which could result in loss of sensitive information. Data breaches also typically result in a significant financial cost which comes about in the form of regulatory fines and remediation efforts.\n\n3. **Non-Compliance Penalties**: Depending on the business type, certain organizations are required to comply with specific regulatory standards related to data security like GDPR, HIPAA, PCI DSS, etc. Non-compliance to these regulations because of poor security practices can lead to hefty financial penalties and loss of trust from clients and the public.\n\n4. **System Downtime**: It also opens the potential gateways for attacks such as DDOS, which can lead to system downtime and consequently financial losses due to disrupted operations.\n\n5. **Damage to Reputation**: Security breaches often lead to a loss of trust amongst clients and the public, which can be incredibly damaging to the company's reputation.\n\n6. **Loss of Customer Trust**: Finally, breaches that result from non-compliance could also lead to loss of customer trust, which can in turn lead to loss of business, negatively affecting the company's bottom line.\n\nIn short, maintaining compliance with AWS's default security group settings can help to protect against these potential costs and outcomes and reinforce business success by ensuring the security of your AWS resources."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, consider a company X using AWS for hosting their e-commerce platform. Their platform has both public-facing components (like a website) and private-facing components (like a backend database). \n\nTo safeguard their databases from cyber attacks and unauthorized access, X keeps them in a separate, private subnet, and only allows inbound traffic from their application servers. This is where AWS VPC's default security group comes in which initially denies all inbound traffic, hence minimizing the risk of any malicious activity. \n\nFurther, company X modifies these default settings to only allow inbound traffic from their application servers. This keeps their system secure while enabling necessary functionality. Furthermore, allowing all outbound traffic enables their servers to get updates, access other AWS services, etc. This filtering and handling of network traffic provides an extra shield of security to their resources. \n\nThus the default security group in AWS VPC acts as a fundamental block of their security strategy, making it an incredibly useful tool.\n\n```\nExample:\n\n```sh\naws ec2 create-security-group --group-name my-sg --description \"My security group\" --vpc-id vpc-1a2b3c4d\n```\n\nIn this AWS CLI command, we are creating a security group named \"my-sg\" in the VPC \"vpc-1a2b3c4d\". This new security group will have the default behavior of denying all inbound traffic, allowing all outbound traffic, and allowing all traffic between instances assigned to the security group.\n\nNow, say we want to only allow inbound traffic from instances with a specific security group for our backend databases:\n\n```sh\naws ec2 authorize-security-group-ingress --group-name my-sg --protocol tcp --port 3306 --source-group sg-0abcd1234efgh5678\n```\n\nIn this command, we are modifying the \"my-sg\" security group settings to allow inbound connections on port 3306 (the default MySQL port) from instances associated with the security group \"sg-0abcd1234efgh5678\" (which we can assume are our application servers).\n\nThus, with these adjustments, we've established a secure setup for our e-commerce platform's databases.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_5",
    "Title": "4.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.",
    "QueryID": "aws_log_metric_filter_cloudtrail_configuration",
    "DocumentURI": "policies/aws_cis_v130_4_5.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.5"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS Control related to real-time monitoring of API calls using CloudTrail Logs, CloudWatch Logs, metric filters, and alarms can lead to several costs:\n\n1. **Security Risks**: Not monitoring API calls in real-time can lead to unidentified security vulnerabilities and breaches. Malicious activities or unauthorized access may go undetected, compromising the security of your data and applications. \n\n2. **Inefficiency**: Without proper monitoring and alarms, you lose the chance to quickly identify and rectify operational issues. This could lead to interruptions in your business processes, reduced performance, or even system downtimes. \n\n3. **Financial Costs**: Undetected issues or security breaches can lead to financial losses. This could be due to a business interruption, penalties for data breaches, or the need for remedial actions to restore compromised systems.\n\n4. **Non-compliance Penalties**: Not adhering to recommended AWS controls can also lead to non-compliance with relevant data protection and information security regulations. Penalties for non-compliance can be severe, including hefty fines and reputational damage. \n\n5. **Loss of Customer Trust**: If undetected issues lead to outward-facing problems, such as an app crash or data breach, it could tarnish your brand's reputation and result in loss of customer trust.\n\nHence, it's essential to establish real-time monitoring of API calls and detecting changes to CloudTrail's configurations as recommended by AWS. It helps ensure operational efficiency, security, and compliance with relevant regulations."
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider a scenario in which your company has critical data stored in AWS resources. If any unauthorized changes are made to the API calls involving these resources, it could result in the leaking of sensitive data, shutting down of crucial services, or at worst, a total takeover of your AWS account.\n\nBy setting up real-time monitoring of API calls with CloudTrail and CloudWatch, changes to your API calls can be tracked and logged. Once this setup is in place, the moment an API call is made that manipulates the CloudTrail's configurations, you would get a notification. This could be a change in the trail's destinations, turning off logging, altering the log file validation, etc.\n\nThis type of warning system is vital as it helps in early detection of potential violations, breaches, or any suspicious activities. Thus, by having visibility and timely alerts, the incident response time can be significantly improved, and the potential damage can be minimized or totally avoided."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_3_6",
    "Title": "3.6 Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket",
    "Description": "S3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket.",
    "QueryID": "aws_cloudtrail_s3_logging_enabled",
    "DocumentURI": "policies/aws_cis_v130_3_6.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "3.6"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "3"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudTrail"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "AWS S3 Bucket Access Logging is a method used for monitoring the requests made to your S3 bucket. Non-compliance to this control can have several impacts including:\n\n1. **Security Risk**: Without access logs, it becomes challenging to trace any suspicious activity or unauthorized access to your S3 bucket. For instance, if a data breach or a suspected security violation occurs, the lack of logging can create issues in understanding who accessed the data, which resources were accessed, or how the breach happened. This can critically jeopardize your data’s security.\n\n2. **Regulatory Non-compliance**: Various compliance programs require proof of logging and monitoring controls for auditing purposes. Examples include ISO 27001, PCI-DSS, HIPAA, and SOX. Not logging access to your S3 bucket could create compliance issues with these regulations, and could result in hefty fines and penalties.\n\n3. **Operational Issues**: Access logging can also be used for diagnosing operational issues, like interruptions in data flow or unexpectedly high usage. Without logging, identifying and resolving these issues can become difficult, potentially impacting the stability and performance of your AWS services.\n\n4. **Cost Management**: Analyzing access logs can provide valuable insights into data usage patterns, allowing you to better manage and optimize your AWS costs. If this is not enabled, you could miss out on these data-driven insights.\n\nTherefore, the cost of non-compliance to the \"S3 Bucket Access Logging\" control can lead to increased security risks, regulatory fines, operational inefficiencies, and inflated costs."
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider an online media streaming company using AWS S3 buckets to host and serve media content to end-users. The company receives millions of requests every day to access these media files. By enabling S3 Bucket Access Logging, the company can obtain valuable information about every request made to their S3 bucket.\n\nSuppose there was a sudden spike in streaming requests one particular day. The networking team, suspecting a potential DDoS attack, would need to investigate the situation swiftly. With S3 Bucket Access Logging enabled, they can quickly analyze the access records and determine whether the surge in requests is due to a DDoS attack or a natural surge in end-user activity.\n\nThe logs provide complete details of each request including the requester, bucket name, request time, action taken (GET, PUT), response status, and error code if any. These details can help in identifying suspicious patterns, like repeated access requests from a specific IP address indicating potential malicious activity.\n\nThis visibility is also useful for routine audits, ensuring compliance with security policies, and in incident response scenarios. Through a clear audit trail of all S3 bucket requests, it upholds transparency, aids in issue diagnosis, and overall security management. For instance, it can help detect unauthorized access attempts or pinpoint a service misconfiguration causing public access to a private bucket.\n\nSo, S3 Bucket Access Logging serves as an invaluable tool in maintaining the security and integrity of the company's cloud-based resources."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_8",
    "Title": "1.8 Ensure IAM password policy requires minimum length of 14 or greater",
    "Description": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are at least a given length. It is recommended that the password policy require a minimum password length 14.",
    "QueryID": "aws_iam_account_password_policy_min_length_14",
    "DocumentURI": "policies/aws_cis_v130_1_8.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.8"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the AWS control that requires adopting a password policy of a minimum length of 14 characters can be multi-fold:\n\n1. **Security Breaches**: Shorter passwords present easier targets for cybercriminals to crack. They can be more quickly and easily broken using brute force attacks, leading to unauthorized access to sensitive data and systems. Security breaches like these can result in significant financial losses.\n\n2. **Regulatory Fines**: Certain sectors have specific regulatory requirements for password length and complexity. For instance, in healthcare or finance, if it is found that the AWS control has not been complied with, the organization might have to pay heavy fines and penalties.\n\n3. **Reputational Damage**: A breach due to weak password control can severely damage an organization's reputation. Customers and partners might lose trust in the security measures of the organization, leading to a decline in business.\n\n4. **Resource Drain**: In the event of a security breach due to weak passwords, organizations will need to invest significant resources into identifying the breach, repairing the damage, and tightening security measures. This diverts resources from other business critical tasks.\n\nTherefore, non-compliance can result in multiple costs related to financial losses, regulatory penalties, brand reputation, and resource allocation. It is in an organization's best interest to adhere to recommended password policies, like the ones AWS provides, to maintain a strong security posture."
      ],
      "x-kaytu-usefulness-example": [
        "For example, consider a growing tech startup that uses AWS systems and has dozens of employees who need to access various components of AWS like EC2 instances, S3 buckets, and more. As part of their effort to enforce robust security protocols, the company wants to ensure that passwords used by the employees to access AWS are not easy to guess or crack. \n\nHence, they can leverage IAM password policies to establish a baseline of password complexity. The Chief Security Officer decides that all passwords should have a minimum length of 14 characters. This is made mandatory by IAM password policy.\n\nNow, whenever an employee tries to set or change their password, AWS forces them to comply with these rules. If someone attempts to input a password shorter than 14 characters, the system would deny the change and prompt the user to create a longer password.\n\nHere's how this policy might be configured in a script:\n\n```xml\n{\n  \"PasswordPolicy\": {\n    \"MinimumPasswordLength\": 14,\n    \"RequireSymbols\": true,\n    \"RequireNumbers\": true,\n    \"RequireUppercaseCharacters\": true,\n    \"RequireLowercaseCharacters\": true,\n    \"AllowUsersToChangePassword\": true\n  }\n}\n```\n\nThis way, through the implementation of AWS IAM password policy, the company ensures a certain level of security for AWS resources, cutting down the risk of unauthorized access through weak passwords."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_3_7",
    "Title": "3.7 Ensure CloudTrail logs are encrypted at rest using KMS CMKs",
    "Description": "AWS CloudTrail is a web service that records AWS API calls for an account and makes those logs available to users and resources in accordance with IAM policies. AWS Key Management Service (KMS) is a managed service that helps create and control the encryption keys used to encrypt account data, and uses Hardware Security Modules (HSMs) to protect the security of encryption keys. CloudTrail logs can be configured to leverage server side encryption (SSE) and KMS customer created master keys (CMK) to further protect CloudTrail logs. It is recommended that CloudTrail be configured to use SSE-KMS.",
    "QueryID": "aws_cloudtrail_trail_logs_encrypted_with_kms_cmk",
    "DocumentURI": "policies/aws_cis_v130_3_7.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "3.7"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "3"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudTrail"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS Control mentioned above, i.e., not configuring AWS CloudTrail to use Server Side Encryption (SSE) and Key Management Service (KMS) customer created master keys (CMK) can have several costs:\n\n1. **Security Risks**: Not using server-side encryption can expose your sensitive data and logs to unauthorized access. This can lead to data breaches and unexpected failures.\n\n2. **Regulatory Penalties**: If your organization is under certain regulatory constraints like HIPAA or GDPR, non-compliance with security best practices could lead to heavy penalties. \n\n3. **Data Integrity**: Without encryption, your data can potentially be altered without your knowledge, leading to data corruption or loss.\n\n4. **Reputation Cost**: A breach in data security can cause significant damage to the reputation of a business in terms of trust and reliability.\n\n5. **Potential Financial Loss**: Unauthorized access data could lead to financial losses, especially in scenarios where the data contains sensitive financial or customer information.\n\nTo summarize, in markdown:\n\n```markdown\n- **Security Risks:** Not using server-side encryption can expose your sensitive data and logs to unauthorized access. This can lead to data breaches and unexpected failures.\n- **Regulatory Penalties:** If your organization is under certain regulatory constraints like HIPAA or GDPR, non-compliance with security best practices could lead to heavy penalties.\n- **Data Integrity:** Without encryption, your data can potentially be altered without your knowledge, leading to data corruption or loss.\n- **Reputation Cost:** A breach in data security can cause significant damage to the reputation of a business in terms of trust and reliability.\n- **Potential Financial Loss:** Unauthorized access data could lead to financial losses, especially in scenarios where the data contains sensitive financial or customer information.\n```\n"
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA financial company, FinancePlus, using AWS for their operations has a compliance requirement to record and store all the API calls being made in their account for audit purposes. FinancePlus is also sensitive about the data protection and wants additional security to safeguard their CloudTrail logs.\n\nThey decide to use AWS CloudTrail combined with AWS Key Management Services. CloudTrail allows recording of all the API calls, which provides visibility into user activity and any possible malicious actions. KMS enables them to encrypt the CloudTrail logs adding an additional layer of protection.\n\nTo further enhance security, they configure CloudTrail to use Server Side Encryption (SSE) with KMS Customer Created Master Keys (CMK). This ensures that not only are the logs encrypted but also the keys used to decrypt them are securely managed and controlled only by them.\n\nAt the end, not only FinancePlus is able to meet their compliance requirement through CloudTrail but also they are able to ensure the integrity and security of CloudTrail logs using KMS and SSE-KMS. This demonstrates the usefulness of AWS CloudTrail combined with AWS Key Management Services for managing, recording, and protecting user/API activity in a secure manner for FinancePlus."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_6",
    "Title": "4.6 Ensure a log metric filter and alarm exist for AWS Management Console authentication failures",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for failed console authentication attempts.",
    "QueryID": "aws_log_metric_filter_console_authentication_failure",
    "DocumentURI": "policies/aws_cis_v130_4_6.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.6"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the above-mentioned AWS (Amazon Web Services) Control involves both financial and operational risks.\n\n1. **Financial Risks:** If you are not monitoring API calls in your AWS environment, you may not realize when you’re experiencing a higher-than-normal volume of API calls. This can be costly, as AWS charges based on API usage. Additionally, unexpected spikes of API calls could be due to malicious activities, like the exploitation of some of your services by hackers which could result in financial losses.\n\n2. **Security Risks:** Without real-time monitoring of API calls, you may miss failed login attempts or other suspicious activities. This could be indicative of an attempted security breach, making your system vulnerable to attacks.\n\n3. **Operational Risks:** By not tracking failed console authentication attempts, you can't identify usability issues that could be preventing users from successfully logging in. This could negatively impact productivity or usability.\n\n4. **Compliance Risks:** Many industries require companies to log and monitor API calls for compliance purposes. Non-compliance could therefore potentially lead to legal issues or fines.\n\n5. **Reputation Risks:** In the instance of a data breach, the associated negative publicity could lead to a loss of trust among your clients and users, damaging your company's reputation.\n\nOverall, non-compliance with the AWS control can result in increased operational costs, interrupted business continuity, possible regulatory penalties, and a harm to the company's reputation."
      ],
      "x-kaytu-usefulness-example": [
        "---\ntitle: \"Example of Monitoring Failed Authentication Attempts in AWS Console\"\ndescription: \n\nCloudTrail and CloudWatch are powerful services that help ensure the security and efficiency of your AWS resources. An example of the usefulness of these tools is to monitor and take action when there are failed console authentication attempts.\n\nAssume that you have a system with multiple AWS users. Severally failed AWS console authentication attempts could be an indication that someone is trying to gain unauthorized access to your system. In such a scenario, real-time monitoring of this event becomes essential, not just to identify the issue in real time, but also to take immediate actions such as blocking the suspicious user, sending alerts to system administrators or triggering other AWS Lambda functions for automated responses.\n\nThe following steps can be carried out in AWS environment:\n\n1. Set up AWS CloudTrail to capture call API activities.\n2. Direct these CloudTrail Logs to Amazon CloudWatch Logs.\n3. In CloudWatch, create a Metric filter to match \"ConsoleLogin\" events where the response is \"Failure\".\n4. Establish an Alarm for this Metric which can notify an admin, block a user or trigger other automated responses as per the requirement.\n\nBy tracking AWS console authentication failures, you can ensure that your system is more secure, and that failed login attempts are noted and addressed immediately. This instance helps enforce best practices for security by ensuring proper monitoring, management of access rights, and maintaining an audit-ready posture."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_9",
    "Title": "1.9 Ensure IAM password policy prevents password reuse",
    "Description": "IAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.",
    "QueryID": "aws_iam_account_password_policy_reuse_24",
    "DocumentURI": "policies/aws_cis_v130_1_9.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.9"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with the AWS control to prevent the reuse of passwords via IAM password policies can result in the following costs:\n\n1. **Security Risks:** Allowing the reuse of passwords increases the risk of unauthorized access to your AWS resources. Once an old password is compromised, it could be exploited by malicious attackers which may cause loss of data, privacy breaches, security incidents, financial losses, etc.\n\n2. **Regulatory Penalties:** If your business operates under regulations that require specific password controls, non-compliance can result in fines or other penalties from regulatory bodies.\n\n3. **Loss of Trust:** A security breach resulting from weak password control can result in a loss of trust among customers or partners, causing financial losses, damaging the company’s reputation and possibly even market share.\n\n4. **Operational Costs:** After a security incident, you may need to spend significant resources for incident response, investigation, mitigation, communication with affected parties, and possibly even legal costs. There may also be costs for strengthening the security framework after the event.\n\n5. **Recovery Costs:** If data is lost due to a security breach, there may be significant costs involved in recovering or replicating the data, if that's even possible.\n\nTo avoid these costs, it is recommended to comply with best practices in managing IAM password policy including prevention of password reuse."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nLet's suppose, in a corporate setting, Company X uses AWS services extensively for its operational needs. The system admins of Company X set a password policy using AWS IAM (Identity Access Management) that prevents password reuse for its employees. \n\nOne fine day, the email of one of the employees gets compromised, and the attacker tries to access the AWS services by using the same older passwords of the user that he got from the email data. However, since the IAM password policy is set to prevent password reuse, the attacker is unable to gain unauthorized access. \n\nThis instance clearly showcases the usefulness of \"IAM password policies\" preventing password reuse, thus adding an extra layer of security and protecting sensitive cloud resources from potential security breaches."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_3_8",
    "Title": "3.8 Ensure rotation for customer created CMKs is enabled",
    "Description": "AWS Key Management Service (KMS) allows customers to rotate the backing key which is key material stored within the KMS which is tied to the key ID of the Customer Created customer master key (CMK). It is the backing key that is used to perform cryptographic operations such as encryption and decryption. Automated key rotation currently retains all prior backing keys so that decryption of encrypted data can take place transparently. It is recommended that CMK key rotation be enabled.",
    "QueryID": "aws_kms_cmk_rotation_enabled",
    "DocumentURI": "policies/aws_cis_v130_3_8.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "3.8"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "3"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/KMS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS Key Management Service (KMS) Control, specifically regarding enabling CMK key rotation, can result in serious risks and consequences. Here are some potential costs of non-compliance:\n\n1. **Increased Security Risk**: Without key rotation, if your CMK is exposed, all data encrypted using it could be vulnerable to unauthorized access or cyber-attacks. Continual rotation ensures that the surface for potential security threats is minimized.\n\n2. **Potential Regulatory Penalties**: For organizations subject to regulations such as GDPR, HIPAA, PCI DSS etc. which require strong data protection measures, not implementing key rotation could result in non-compliance, leading to hefty fines or penalties.\n\n3. **Loss of Trust**: Failure to secure customer or business data can lead to loss of customer and partner trust. This can have long-term effects on the business's reputation and future earnings.\n\n4. **Data Recovery Issues**: Older data encrypted with a key that is lost and not recoverable due to lack of rotation might be impossible to decrypt.\n\n5. **Remediation Costs**: In case of a data breach, the costs to remediate the issue can be very high. This may include costs to identify and rectify the breach, loss of business, costs for notifying customers, engaging public relations, and potentially even litigation costs.\n\nTo summarize, the cost of non-compliance to this AWS control can potentially be very high, affecting not just finances but also the reputation and long-term sustainability of your business. Therefore, it is recommended to enable CMK key rotation in AWS Key Management Service.\n"
      ],
      "x-kaytu-usefulness-example": [
        "An instance where AWS Key Management Service (KMS) proves to be extremely useful is in managing the encryption and decryption process of sensitive data for a financial services company.\n\nLet's consider a hypothetical fintech company, FinCo. FinCo collects and stores tremendous amounts of sensitive customer data. To safeguard this data, they employ AWS's services for data encryption and decryption. However, to ensure the highest level of security, these encryption keys need to be rotated regularly.\n\nThis is where AWS KMS comes into play. FinCo uses AWS KMS to rotate the backing key, which is crucial in maintaining data security. Through automated key rotation provided by KMS, FinCo makes sure that every key used to protect its customer’s data is regularly replaced with a new one. \n\nAlthough the keys are rotated, all prior keys are retained which allows for the decryption of previously encrypted data to take place transparently. This considerably reduces the complexity and potential errors in managing multiple encryption keys, while assuring continued data access, providing FinCo the security assurance and peace of mind.\n\n```yaml\nStrategy: KMS Key rotation \nServices: AWS KMS\nCompany Type: Fintech\nDescription: FinCo uses AWS KMS to manage the encryption/decryption process of their customer data. They enable CMK key rotation in AWS KMS to regularly replace the backing key, ensuring maximum security for customer data.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_7",
    "Title": "4.7 Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for customer created CMKs which have changed state to disabled or scheduled deletion.",
    "QueryID": "aws_log_metric_filter_disable_or_delete_cmk",
    "DocumentURI": "policies/aws_cis_v130_4_7.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.7"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the mentioned AWS control can lead to several costs, both financial and non-financial. Here are some of them in markup format:\n\n#### 1. Security Costs:\n\n- **Risk of Unauthorized Access**: If there is a change in the state of your CMKs to disabled or scheduled deletion, it can potentially expose your applications or data to unauthorized users. This could lead to data theft or alteration, leading to reputational damage and potentially high financial losses.\n\n#### 2. Operational Costs:\n\n- **Disruption of Services**: Disabling or deleting keys used by running applications can result in a disruption of services. This can cause operational difficulties and affect productivity, which also translates into financial cost.\n\n#### 3. Compliance Costs:\n\n- **Non-compliance Penalties**: Ignoring this AWS policy may violate various compliance or regulatory requirements (like GDPR, HIPAA, or SOX) depending on your industry. Non-compliance can result in steep fines, with companies facing millions of dollars in penalties.\n\n#### 4. Financial Costs:\n\n- **Loss of Business or Customers**: In the wake of any security breach or service disruption, customers may lose trust and decide to stop using your products or services, leading to a direct loss of revenue.\n\nTo sum up, real-time monitoring of API calls and the lifecycle state of your CMKs is essential for maintaining a secure and smoothly operating system in your AWS environment. Non-compliance to this requirement may result in high operational, financial and reputational costs."
      ],
      "x-kaytu-usefulness-example": [
        "Consider a scenario where you are working on an enterprise-grade project which has a secure architecture established in AWS. You use AWS Key Management Service(KMS) and have numerous Customer Master Keys(CMKs) created for encrypting data in multiple services and applications. Once a CMK is created, you or someone else from your organization might disable or schedule it for deletion accidentally or without proper permissions.\n\nIn such cases, an alarm system based on this rule would send you a real-time alert notifying about the status change of CMKs. This will ensure you are immediately aware of any change in status to your CMKs, so you can review and take necessary actions if the change was not intended. This would also add an extra layer of security checks to the data encryption keys in your application, preventing any unauthorized or unintentional changes.\n\n```\nExample configuration in CloudWatch:\n\n```\n{\n  \"log_group_name\": \"CloudTrail/default\",\n  \"filter_name\": \"DisabledOrDeleted_CMK\",\n  \"filter_pattern\": \"{ ($.eventSource = kms.amazonaws.com) \u0026\u0026 (($.eventName = ScheduleKeyDeletion) || ($.eventName = DisableKey)) }\",\n  \"alarm_actions\": [\"ACTION_ON_ALARM\",\"ARN_OF_SNS_TOPIC\"],\n  \"metric_transformation\": {\n    \"metric_name\": \"DisabledOrDeleted_CMK\",\n    \"metric_namespace\": \"LogMetrics\",\n    \"metric_value\": \"1\"\n  },\n  \"comparison_operator\": \"GreaterThanOrEqualToThreshold\",\n  \"evaluation_periods\": \"1\",\n  \"period\": \"300\",\n  \"threshold\": \"1\",\n  \"actions_enabled\": true,\n  \"alarm_description\": \"Alarm if CMK is disabled or scheduled for deletion\",\n  \"alarm_name\": \"DisabledOrDeleted_CMK\"\n}\n```\n\nReplace `ACTION_ON_ALARM` with the appropriate response action and `ARN_OF_SNS_TOPIC` with the ARN of your SNS topic. You could then subscribe to this SNS topic to receive alerts."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_3_9",
    "Title": "3.9 Ensure VPC flow logging is enabled in all VPCs",
    "Description": "VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. After you've created a flow log, you can view and retrieve its data in Amazon CloudWatch Logs. It is recommended that VPC Flow Logs be enabled for packet \"Rejects\" for VPCs.",
    "QueryID": "aws_vpc_flow_logs_enabled",
    "DocumentURI": "policies/aws_cis_v130_3_9.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "3.9"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "3"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/VPC"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with AWS Control of enabling VPC Flow Logs for packet \"Rejects\" can pose several potential costs:\n\n1. **Reduced Visibility and Control:** Without VPC Flow Logs, an organization loses visibility into IP traffic flowing into and out of network interfaces in its VPCs. This could create blind spots, making it more difficult to troubleshoot network issues, analyze and optimize network performance, or even detect and prevent security threats. \n\n2. **Increased Security Risks:** Packet \"Rejects\" could indicate attempted unauthorized access, a system or network malfunction, or even a potential security threat. Without this visibility, organizations may not be able to respond effectively to these threats, potentially resulting in significant financial and reputational damage.\n\n3. **Compliance Risks:** If the organization operates in a regulated industry, failing to enable VPC Flow Logs for packet \"Rejects\" could lead to non-compliance with industry regulations. This could result in penalties, increased scrutiny, and potential damage to the organization's reputation.\n\n4. **Forensics and Incident Response Challenges:** In the event of a security incident, VPC Flow Logs are a crucial data source for forensic analysis and incident response. Without them, the organization's ability to understand the nature and impact of the incident, identify and remediate vulnerabilities, and prevent future incidents could be significantly hampered. \n\n5. **Increased Operational Costs:** Without having an understanding of the packet \"Rejects\", diagnosing and fixing network issues could take more time and resources, thus increasing operational costs. \n\nTo avoid these potential costs, it is crucial for organizations to comply with recommended AWS controls and enable VPC Flow Logs for packet \"Rejects\"."
      ],
      "x-kaytu-usefulness-example": [
        "VPC Flow Logs can be incredibly useful for troubleshooting security and network issues. For instance, if your application hosted on an EC2 instance within your VPC isn't behaving as expected, checking the VPC flow logs could provide insight into the traffic that's reaching your EC2 instance and any potential rejections.\n\nHere is a possible scenario:  \n\nSuppose you have a web application running on several EC2 instances, and suddenly some users start reporting they're unable to access certain parts of the web application. You've confirmed that the issue is not with the application itself, so you suspect it might have to do with the network.\n\nYou check your VPC Flow Logs and find entries detailing that packets to the destination IP addresses of the affected users are being rejected. Based on the VPC Flow Logs data and the \"Rejects\" recorded, you determine that some outbound rules in your security group or NACLs were incorrectly configured, leading to legitimate user requests being blocked.\n\nWith this information, you adjust the rules, which quickly resolves the issue. Without VPC Flow Logs, identifying the source of the problem could have taken considerably longer. Hence, it shows the usefulness of the VPC Flow Logs feature when troubleshooting network issues in a VPC."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_8",
    "Title": "4.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.",
    "QueryID": "aws_log_metric_filter_bucket_policy",
    "DocumentURI": "policies/aws_cis_v130_4_8.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.8"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the above AWS control primarily revolves around the potential security threats and operations continuity risks. Here's an explanation in markup format:\n\n- **Security Risks:** If changes to S3 bucket policies are not monitored in real-time, unauthorized users might gain access or perform malicious activities, including data breaches or data loss. These unauthorized policy modifications can allow public access to sensitive data stored on S3 buckets.\n\n- **Operations Continuity Risks:** Undetected changes can disturb the normal functionality of applications relying on Amazon S3, which can lead to service disruptions and unplanned downtime.\n\n- **Regulatory Compliance Violation:** Depending on the nature of the data stored in S3 buckets and the regulations governing it (e.g., GDPR, CCPA, or HIPAA), unauthorized access or changes can lead to violation of these regulations, contributing to legal penalties and loss of business reputation.\n\n- **Financial Costs:** Unauthorized or malicious modifications could lead to unwanted data transfers, resulting in significant cost associated with data transfer out of S3, especially for large volumes of data.\n\n- **Investigation And Recovery Costs:** In case of a security incident related to an S3 bucket, significant resources may need to be spent on incident response, forensic investigation, and recovery from backups.\n\nHere's an example of potential costs in a coded markup format:\n\n```markdown\n- Security Risks: Non-compliance can open up potential security threats including data breaches or data loss. \n- Operations Continuity Risks: Can disturb normal functionality of applications which can lead to service disruptions and unplanned downtime. \n- Regulatory Compliance Violation: Could lead to violation of regulations like GDPR, CCPA, or HIPAA, causing legal penalties and loss of reputation.\n- Financial Costs: Could lead to unwanted data transfers, resulting in significant costs, especially for large volumes of data.\n- Investigation And Recovery Costs: Resources may need to be spent on incident response, forensic investigation, and recovery from backups.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "This AWS control is useful in ensuring that your Amazon S3 data is secure by notifying you of any changes made to your S3 bucket policies. For instance, suppose you are part of a large organization with different teams accessing and editing your S3 buckets.\n\nDuring routine checks, you notice unauthorized or potentially damaging edits to your bucket policies, but you struggle to identify when these changes occurred and who made them. With the help of AWS CloudTrail logs, you can track all API calls made to your S3 buckets to easily pinpoint and rectify any unauthorized or unsafe changes.\n\nBy directing these CloudTrail logs to AWS CloudWatch logs, you can set up metric filters and alarms. These will alert you in real-time whenever changes are made to your S3 bucket policies, thus ensuring the immediate detection and prevention of potential data breaches. Here is an example of how you might set up such a metric filter and alarm:\n\n```markdown\n- Create a CloudWatch metric filter:\n  - Log group: Choose the log group that streams your CloudTrail logs\n  - Filter pattern: `{ ($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication) }`\n  \n- Create a CloudWatch alarm:\n  - Metric: Choose the metric produced by the filter you just created\n  - Conditions: Set the threshold for your alarm such as whenever the metric count is greater than 0 for a set amount of time\n  - Actions: Choose an action like sending a notification to your team's email or to an SNS topic.\n```\nThis setup will ensure that your team is timely informed whenever changes are made to your S3 bucket policies, allowing you to maintain tight control of your data security in AWS."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_9",
    "Title": "4.9 Ensure a log metric filter and alarm exist for AWS Config configuration changes",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.",
    "QueryID": "aws_log_metric_filter_config_configuration",
    "DocumentURI": "policies/aws_cis_v130_4_9.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.9"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS Control of real-time monitoring of API calls could lead to several potential costs for an organization:\n\n1. **Security Breaches**: This may arguably be the most significant cost. If changes or activities are not adequately monitored, there may be unauthorized modifications to CloudTrail configurations. This could expose an organization's AWS services to potential security breaches or allow malicious activities to take place undetected. \n\n2. **Poor Auditing Capabilities**: Without proper logging and monitoring, the organization might struggle with reliable system auditing. This could make it difficult to determine the root cause of system issues, exactly what changes were made and when, and who made the modifications. \n\n3. **Regulatory Fines**: Some businesses are required by law to maintain specific security measures, which can include activity logging. Non-compliance could result in significant fines and penalties.\n\n4. **System Downtime or Misconfigurations**: If unauthorized or mistaken changes are introduced, it can lead to system disruptions, with potential downtime or sub-optimal performance. \n\n5. **Increased Costs**: CloudTrail Logs usage and storage costs escalate with increased activity. Unauthorized or unnecessary changes can lead to excessive costs.\n\n6. **Reputation Damage**: Any breaches can severely damage the reputation of a company leading to loss of business.\n\nTo sum up, the cost of non-compliance towards this AWS Control of real-time monitoring of API calls could be high. It's important for organizations to ensure appropriate monitoring and alarms to maintain security, efficiency, and compliance with regulations.\n\nRemember, security and auditing are not just about prevention but also about being able to quickly and effectively respond when things go wrong."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA Software Development company, TechBase, uses AWS CloudTrail for governance, compliance, operational auditing, and security auditing of AWS account actions and API usage. It's crucial for them that all tracks and logs are intact and not manipulated. \n\nTo ensure this, TechBase implemented real-time monitoring where they direct all CloudTrail logs to CloudWatch Logs setup with metric filters and alarms. Particularly, they setup an alarm for any changes in CloudTrail's configurations. \n\nOne day, an unauthorized user managed to get into their AWS console and tried to manipulate the CloudTrail configurations so as to disable the logging of his further malicious activities. However, because TechBase had this real-time monitoring setup, the alarm was triggered due to the detected configuration changes.\n\nThe IT security team at TechBase was instantly notified of the unusual activity and promptly sprung into action. They managed to identify the breach, revert the changes, and secure their console before any damage could be done. \n\nThus, the real-time monitoring of API calls by directing CloudTrail Logs to CloudWatch Logs certainly proved extremely helpful in preventing a potential breach of security in their AWS infrastructure. This helped in maintaining their data integrity and system security."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_10",
    "Title": "1.10 Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password",
    "Description": "Multi-Factor Authentication (MFA) adds an extra layer of authentication assurance beyond traditional credentials. With MFA enabled, when a user signs in to the AWS Console, they will be prompted for their user name and password as well as for an authentication code from their physical or virtual MFA token. It is recommended that MFA be enabled for all accounts that have a console password.",
    "QueryID": "aws_iam_user_console_access_mfa_enabled",
    "DocumentURI": "policies/aws_cis_v130_1_10.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.10"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the Multi-Factor Authentication (MFA) control in AWS can lead to several costs and risks, mainly associated with security threats and the potential damage they can cause.\n\n1. **Financial Losses**: In the event of a security breach, organisations might suffer significant financial losses. This can occur directly through theft of sensitive data, or indirectly through fines imposed due to violation of regulations and remediation costs.\n\n2. **Loss of Reputation**: If a security breach becomes known to customers or the public, it can lead to a loss of trust and damage to the organisation's reputation. This can further translate to a potential loss of business.\n\n3. **Regulatory Penalties**: Many industries are subject to regulations which mandate the use of certain security controls including MFA. Non-compliance can lead to hefty fines and penalties.\n\n4. **Lost Productivity**: If an account is compromised due to lack of MFA, it may be necessary to shut it down temporarily for investigation and remediation, which can lead to downtime and loss of productivity.\n\n5. **Potential Legal Consequences**: In case sensitive personal information is compromised due to the lack of proper security controls like MFA, organisations can potentially face lawsuits. \n\nImplementing MFA is one of the most effective and simplest ways to increase the security of your AWS environment. Failing to do so can result in substantial cost and risk."
      ],
      "x-kaytu-usefulness-example": [
        "For example, a tech company ABC Corp uses AWS to host its web applications. Their AWS account holds critical data including user data, financial reports, and source code. To protect this critical data from being accessed by hackers or insiders with malicious intent, they enabled Multi-Factor Authentication (MFA) for their AWS Console. \n\nWith MFA, each of their staff members who access the AWS console have to go through an extra layer of checks. Besides entering their username and password, they also need to authenticate through a physical MFA token, which generates a unique, temporary numeric code. This ensures that even if an unauthorized person somehow obtains a staff member's login username and password, they still can't access the company's AWS account without the physical MFA token.\n\nThis step drastically reduces the risk of data breaches and provides an enhanced level of security for the company's sensitive data stored in the AWS environment. Thus, MFA is of great utility in terms of bolstering security for ABC Corp’s AWS account."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_11",
    "Title": "1.11 Do not setup access keys during initial user setup for all IAM users that have a console password",
    "Description": "AWS console defaults to no check boxes selected when creating a new IAM user. When cerating the IAM User credentials you have to determine what type of access they require.",
    "QueryID": "aws_iam_user_access_keys_and_password_at_setup",
    "DocumentURI": "policies/aws_cis_v130_1_11.md",
    "ManualVerification": false,
    "Severity": "Low",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.11"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "manual"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Low"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS Control that defaults to no check boxes selected when creating a new IAM user could potentially result in unauthorized access to your AWS environment and misuse of your resources, which could further lead to data breaches, regulatory fines, and reputational damage. \n\nHere are the specific costs:\n\n1. **Unauthorized Access and Misuse of AWS Resources:** If you accidentally grant broader permissions than necessary, it could potentially give malicious insiders or compromised accounts the ability to misuse your AWS resources.\n\n2. **Data Breaches:** If the IAM users have access to sensitive data that they shouldn't, there's a risk of data breaches. This could lead to exposure of sensitive customer or business data.\n\n3. **Regulatory Fines:** Depending on the industry and location of your business, you might be under specific regulations regarding how you manage access to your data. Non-compliance could result in significant fines.\n\n4. **Reputational Damage:** A breach of customer data, or even the mere misuse of resources, could have serious repercussions on your organization's reputation.\n\nAll these risks emphasize the importance of carefully managing permissions when creating new IAM users in AWS, respecting the Principle of Least Privilege (PoLP), giving users only the minimum permissions they need to perform their duties."
      ],
      "x-kaytu-usefulness-example": [
        "This AWS control is particularly vital in ensuring data security and proper resource management in an organization.\n\nFor example, imagine a scenario in which a company hires a new employee to only manage their AWS S3 buckets. In this case, it would not be necessary or secure to give this new user full access to all services, such as EC2 instances or DynamoDB. Through AWS console defaulting to no check boxes selected when creating a new IAM user, the admin user has the ability to grant permissions only for S3 bucket management to this new user. Thus, protecting sensitive data and avoiding unnecessary privileges that can lead to management inefficiencies. \n\n```markdown\nWith a situation like:\n\n- **Company**: XYZ Corporation\n- **New Employee**: John Doe\n- **Assigned Role**: S3 Buckets Manager\n\nA new IAM user would be created for John Doe with only necessary privileges:\n\n1. Go to AWS IAM service.\n2. Click `Add user`.\n3. In the `Set user details`, define the user name, e.g., `johndoe`.\n4. In the `Select AWS access type`, choose `Programmatic access`.\n5. In 'Set permissions', choose `Attach existing policies directly`. \n6. In the `Filter policies` search box, type `S3` and from the search result, check `AmazonS3FullAccess`.\n7. Click `Next`, review the user and permissions, then `Create user`.\n```\nThe created user `johndoe` now has the needed access for the responsibilities assigned to him, ensuring a secure and efficient use of AWS resources.\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_20",
    "Title": "1.20 Ensure that S3 Buckets are configured with 'Block public access (bucket settings)'",
    "Description": "Amazon S3 provides Block public access (bucket settings) and Block public access (account settings) to help you manage public access to Amazon S3 resources. By default, S3 buckets and objects are created with public access disabled. However, an IAM principle with sufficient S3 permissions can enable public access at the bucket and/or object level. While enabled, Block public access (bucket settings) prevents an individual bucket, and its contained objects, from becoming publicly accessible. Similarly, Block public access (account settings) prevents all buckets, and contained objects, from becoming publicly accessible across the entire account.",
    "QueryID": "aws_s3_public_access_block_bucket_account",
    "DocumentURI": "policies/aws_cis_v130_1_20.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.20"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control can lead to several undesirable outcomes:\n\n1. **Security breaches and data leakage**: If buckets or objects are made publicly accessible, unauthorized individuals or entities may access, steal, or manipulate sensitive data. This could lead to a breach of data privacy regulations, negative impact on company reputation, and potentially significant financial loss.\n\n2. **Increased costs**: Non-compliance could lead to unanticipated costs. For instance, if data from your publicly accessible bucket is continuously accessed, downloaded, or transferred, this could increase your AWS data transfer costs.\n\n3. **Regulatory penalties**: If your organization operates in a regulated industry or handles sensitive information (like healthcare or financial data), non-compliance could result in severe fines for violating industry regulations or laws such as GDPR, HIPAA, etc.\n\n4. **Loss of IP or proprietary information**: If buckets and objects containing proprietary business logic or intellectual property are exposed, this could be exploited, duplicated, or stolen by adversaries or competitors.\n\n5. **Disruption of service or operations**: Publicly available buckets and objects can be manipulated, altered or deleted by malicious users leading to loss of data availability, unplanned downtime, and disruption of services.\n\n6. **Public relations nightmares**: If the data breach news goes public, there could be considerable damage to the company's brand and reputation leading to loss of customer trust and business opportunities.\n\nTo prevent these, it's crucial to comply with the AWS controls and regularly review and update the access controls and permissions."
      ],
      "x-kaytu-usefulness-example": [
        "An Example instance or Use Case of Amazon S3 Block Public Access:\n\nThe Following scenario describes a large healthcare company that manages their patients' data. The company is migrating this data to Amazon S3 for its storage capabilities, but they need to ensure this sensitive information remains private. \n\nTheir architecture includes multiple S3 buckets, each corresponding to a different department. Though the buckets need to be accessed within the organization, they never need to be publicly accessible. The company can utilize the 'Block public access (account settings)' feature, allowing it to apply a blanket denial of public access across all its buckets. \n\nAdditionally, there might be a scenario where a developer, unaware of the privacy implications, could inadvertently enable public access for a single S3 bucket. To counter this, the 'Block public access (bucket settings)' could be employed. This ensures that each individual bucket, even if misconfigured at an IAM level, can never become publicly accessible. \n\nIn conclusion, Amazon S3 Block Public Access is essential for this healthcare company to enforce its strict privacy policy, keeping their data safe and private all the time."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_21",
    "Title": "1.21 Ensure that IAM Access analyzer is enabled",
    "Description": "Enable IAM Access analyzer for IAM policies about all resources. IAM Access Analyzer is a technology introduced at AWS reinvent 2019. After the Analyzer is enabled in IAM, scan results are displayed on the console showing the accessible resources. Scans show resources that other accounts and federated users can access, such as KMS keys and IAM roles. So the results allow you to determine if an unintended user is allowed, making it easier for administrators to monitor least privileges access.",
    "QueryID": "aws_iam_access_analyzer_enabled",
    "DocumentURI": "policies/aws_cis_v130_1_21.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.21"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the AWS Control of enabling IAM Access Analyzer can be significant and manifold. A non-compliant organization can face:\n\n1. **Security Risks**: Without IAM Access Analyzer, an AWS account owner might not be aware of the entities (users, roles, AWS accounts, etc.) who have access to their resources, what kind of access they may have, and from where they are getting those access privileges. This could expose sensitive data to unauthorized users or applications, posing significant security threats, including potential data breaches.\n\n2. **Increased Audit Complexity**: Lack of visibility for access permissions makes it difficult to audit and prove compliance with various data protection regulations and standards. This can result in increased audit times and costs.\n\n3. **Fines and Penalties**: Being non-compliant with data protection regulations and standards due to lack of access visibility can potentially result in hefty fines and penalties from regulatory bodies.\n\n4. **Reputational Damage**: An incidence of unauthorized access leading to data breaches can heavily damage an organization's reputation, leading to loss of customers and business relationships.\n\n5. **Operational Risks and Costs**: If least privilege access is not monitored properly, it can lead to operational inefficiencies and increased costs. Unnecessary access may be granted to resources, which may cause resource hogging and result in high costs. \n\nTherefore, it is advised to comply with AWS control and enable IAM Access Analyzer to mitigate these potential risks and costs."
      ],
      "x-kaytu-usefulness-example": [
        "Suppose a company named XYZ has a complex AWS environment handling numerous resources such as S3 buckets, Lambda functions, KMS keys, IAM roles, etc. As the number of resources increase, keeping track of access controls becomes a challenge. The company wants to ensure that no unintended accounts or federated users have access to their sensitive resources or roles which otherwise incurs tremendous security risk. \n\nThey enable IAM Access Analyzer which helps them view all the accessible resources in their account and verifies their policies thereby revealing who can access those resources directly. For instance, through Access Analyzer, they discover that an old IAM role, which was meant for a former employee who left the company, still had permissions to access their KMS keys and sensitive S3 buckets. They are then able to take corrective actions straightaway by revoking its unnecessary accesses. \n\nHence, through their regular use of IAM Access Analyzer, XYZ Company is able to monitor and refine their access controls effectively, thereby upholding their security by practicing least privileges policies. This ensures no unintended users have any unwarranted access."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_3_10",
    "Title": "3.10 Ensure that Object-level logging for write events is enabled for S3 bucket",
    "Description": "S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.",
    "QueryID": "aws_cloudtrail_s3_object_write_events_audit_enabled",
    "DocumentURI": "policies/aws_cis_v130_3_10.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "3.10"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "3"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS control that recommends enabling object-level logging for S3 buckets can lead to several potential costs:\n\n1. **Loss of Visibility:** AWS CloudTrail provides visibility into user activity by recording API calls made on your account. When data event logging is disabled, activities like GetObject, DeleteObject, or PutObject events aren't logged. This results in lack of visibility into user activities with your S3 data, which can be risky in terms of security and compliance. \n\n2. **Limited Auditability:** For companies who must comply with certain regulatory requirements, lack of auditable activity logs can pose a serious problem. You may be unable to provide a complete audit trail, potentially leading to failure in meeting compliance requirements and resulting in fines or penalties.\n\n3. **Difficulty in Troubleshooting:** The logs from these data events could provide critical information during troubleshooting. If an error or issue occurs with an object in S3, logs from data events could help identify what actions were performed that may have led to the issue.\n\n4. **Increased Security Risks:** Without object-level logging, there may be unauthorized access or alteration to your S3 data that goes unnoticed. It would be harder to detect and respond to security incidents, potentially leading to data breaches that can have financial and reputational costs.\n\n5. **Lack of Resource Optimization:** Not logging data events can also prevent you from being able to optimize resources effectively. For example, if certain data is being accessed frequently, you could possibly move it to a lower-latency storage class, whereas infrequently accessed data could be moved to more cost-effective storage solutions.\n\nIn summary, while disabling data event logging may appear to reduce costs, it could lead to more substantial costs in the long run due to the possible implications on data security, compliance, troubleshooting, and resource optimization."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, suppose you are working in a regulated industry like healthcare, where maintaining the integrity of your patient files is crucial. You're using AWS S3 buckets to store these files. In such a scenario, enabling Object-level logging for S3 buckets could be extremely useful for several reasons:\n\n1. **Audit Trail**: Object-level logging can provide an audit trail of who has accessed, modified, or deleted an object in your bucket. For instance, when a GetObject operation is used to access patient record, a log entry in AWS CloudTrail would be created, allowing you to trace back any unwanted actions or security breaches.\n\n    ```\n    {\n      \"eventVersion\": \"1.05\",\n      \"userIdentity\": {\n        \"type\": \"Root\",\n        \"principalId\": \"\",\n        \"arn\": \"arn:aws:iam:::root\",\n        \"accessKeyId\": \"\",\n        \"accountId\": \"\" \n      },\n      \"eventTime\": \"2020-06-30T20:03:57Z\",\n      \"eventSource\": \"s3.amazonaws.com\",\n      \"eventName\": \"GetObject\",\n      \"awsRegion\": \"us-east-1\",\n      \"sourceIPAddress\": \"192.0.2.0\",\n      \"userAgent\": \"[aws-sdk-js/2.725.0 promise]\",\n      \"requestParameters\": {...},\n      \"responseElements\": {},\n      \"s3\": {\n        \"s3SchemaVersion\": \"1.0\",\n        \"configurationId\": \"configurationId\",\n        \"bucket\": {...},\n        \"object\": {...}\n      }\n    }\n    ```\n\n2. **Data Leak Prevention**: If a DeleteObject operation is triggered accidentally or maliciously on an important patient file, logging can help you identify how the deletion happened and who was responsible.\n\n    ```\n    {\n      \"eventVersion\": \"1.05\",\n      \"userIdentity\": {\n        \"type\": \"Root\",\n        \"principalId\": \"\",\n        \"arn\": \"arn:aws:iam:::root\",\n        \"accessKeyId\": \"\",\n        \"accountId\": \"\"\n      },\n      \"eventTime\": \"2020-06-30T20:03:57Z\",\n      \"eventSource\": \"s3.amazonaws.com\",\n      \"eventName\": \"DeleteObject\",\n      \"awsRegion\": \"us-east-1\",\n      \"sourceIPAddress\": \"192.0.2.0\",\n      \"userAgent\": \"[aws-sdk-js/2.725.0 promise]\",\n      \"requestParameters\": {...},\n      \"responseElements\": {},\n      \"s3\": {\n        \"s3SchemaVersion\": \"1.0\",\n        \"configurationId\": \"configurationId\",\n        \"bucket\": {...},\n        \"object\": {...}\n      }\n    }\n    ```\n\n3. **Data Accuracy**: With enabled object-level logging, whenever a PutObject operation is implemented to modify a patient file, a log entry will be created. This can help you maintain data accuracy, as you would be able to detect unauthorized or erroneous modifications.\n   \n    ```\n    {\n      \"eventVersion\": \"1.05\",\n      \"userIdentity\": {\n        \"type\": \"Root\",\n        \"principalId\": \"\",\n        \"arn\": \"arn:aws:iam:::root\",\n        \"accessKeyId\": \"\",\n        \"accountId\": \"\" \n      },\n      \"eventTime\": \"2020-06-30T20:03:57Z\",\n      \"eventSource\": \"s3.amazonaws.com\",\n      \"eventName\": \"PutObject\",\n      \"awsRegion\": \"us-east-1\",\n      \"sourceIPAddress\": \"192.0.2.0\",\n      \"userAgent\": \"[aws-sdk-js/2.725.0 promise]\",\n      \"requestParameters\": {...},\n      \"responseElements\": {},\n      \"s3\": {\n        \"s3SchemaVersion\": \"1.0\",\n        \"configurationId\": \"configurationId\",\n        \"bucket\": {...},\n        \"object\": {...}\n      }\n    }\n    ```\nThrough these examples, you can see how enabling object-level logging for S3 buckets could be useful in maintaining data security, integrity, and compliance in a regulated industry scenario."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_12",
    "Title": "1.12 Ensure credentials unused for 90 days or greater are disabled",
    "Description": "AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 90 or greater days be deactivated or removed.",
    "QueryID": "aws_iam_user_unused_credentials_90",
    "DocumentURI": "policies/aws_cis_v130_1_12.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.12"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS Control can have financial, operational, and security costs:\n\n1. **Financial Costs**: Unused AWS IAM credentials that are left active could open the door for malicious actors to gain unauthorized access to AWS resources, leading to financial loss. For example, if these unused AWS IAM credentials lead to a data breach, the organization might end up paying hefty fines, legal fees, and costs associated with incident response and recovery. \n\n2. **Operational Costs**: Once a security breach occurs, there might be significant downtime as the services are restored and secured. This downtime could lead to lost productivity and thus operational costs. Additionally, considerable time and resources might be required to investigate the breach and to implement measures to prevent similar incidents in the future. \n\n3. **Reputation Costs**: Security incidents like data breaches often lead to negative publicity, damaging the reputations of the affected entities. The loss of customers’ trust and confidence can impact future business opportunities. \n\n4. **Security Costs**: Keeping unused credentials active also has security implications. Unused access keys or passwords increase the attack surface for potential hackers. If there's a policy that enforces regular removal or deactivation of unused credentials, the likelihood of an undetected compromise is reduced. Therefore, not following this AWS control could lead to potential security risks and associated costs. \n\nIn summary, it is essential to adhere to this control to not only save costs but also to keep the AWS environment secure and maintain the trust of customers."
      ],
      "x-kaytu-usefulness-example": [
        "For Example:\n\nConsider a large automobile company which migrates all its data and applications from an on-premise setup to the AWS cloud. The company creates multiple AWS IAM users and assigns them various types of credentials to access particular AWS resource (e.g., AWS Management Console, AWS API, AWS CLI, or AWS SDK). \n\nOver time, some employees who had specific IAM credentials may leave the organization, move to different roles, or no longer need access to those resources.\n\nIf these credentials are not deactivated or removed and are left unused for an extended period (like 90 days or more), they pose a security risk. They could potentially be used, or misused, by unauthorized persons to gain access to the company's AWS resources, possibly leading to data leakage or a security breach.\n\nBy adopting this AWS control and removing or deactivating unused IAM accounts, the automobile company can ensure that there is no unauthorized access to their AWS resources through unused IAM credentials, hence boosting their AWS security posture."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_10",
    "Title": "4.10 Ensure a log metric filter and alarm exist for security group changes",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Groups are a stateful packet filter that controls ingress and egress traffic within a VPC. It is recommended that a metric filter and alarm be established for detecting changes to Security Groups.",
    "QueryID": "aws_log_metric_filter_security_group",
    "DocumentURI": "policies/aws_cis_v130_4_10.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.10"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control may lead to serious consequences including financial, reputational, or operational costs, to name a few. Here's a more detailed breakdown:\n\n1. **Financial Cost**: Non-compliance with this control implies that your system is at risk of unauthorized access or changes which could lead to expensive data breaches. This can result not only in the loss of valuable data, but also in fines and penalties if the data breach includes customer's personal data.\n\n2. **Reputational Cost**: Your company reputation can suffer as a result of the data breach, leading to the loss of customer trust and patronage. It may take years to build a company's reputation, but only a few minutes to ruin it with a security scandal.\n\n3. **Operational Cost**: After a security breach, you would need to invest manpower and resources to investigate the source of the breach and correct it. You would also need to recover lost data, if possible, and to implement better security measures.\n\n4. **Regulatory Penalties**: Several industries fall under strict regulatory environments where organizations can face severe penalties for non-compliance, including suspension of operations or hefty fines.\n\nTherefore, to avoid these costs, it's recommended to establish real-time monitoring of API calls by directing CloudTrail Logs to CloudWatch Logs, and setting up corresponding metric filters and alarms. Additionally, setting up metric filter and alarm for detecting changes to Security Groups ensures stronger overall security."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nA medium-sized company established an e-commerce website hosted on AWS. They receive thousands of transactions per day via different API calls. To ensure the stability and smooth operation of their platform, real-time monitoring of these API calls is crucial. By using AWS CloudTrail Logs and CloudWatch Logs, they can attain a detailed view of the API call activities in their AWS environment.\n\nThe company also established security groups to control ingress and egress traffic within their VPC to ensure the security posture of their environment. However, they needed a mechanism to identify and notify if there were any changes to these security groups that might create a potential security risk. By setting up metric filters and alarms, they could efficiently detect any modifications to these groups.\n\nFor instance, if an unauthorized user somehow gains access and tries to alter the security groups to allow more permission than necessary, the metric filter would detect the changes, and an alarm would be triggered. As the alarm goes off, the system immediately notifies the company's security team. Hence, they can promptly take action before any actual harm could take place.\n\nThis way, by using CloudTrail Logs, CloudWatch Logs and establishing metric filters and alarms for Security groups, the company ensures not only the seamless operation of their services but also the maximum security of their AWS environment."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_13",
    "Title": "1.13 Ensure there is only one active access key available for any single IAM user",
    "Description": "Access keys are long-term credentials for an IAM user or the AWS account root user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API. One of the best ways to protect your account is to not allow users to have multiple access keys.",
    "QueryID": "aws_iam_user_one_active_key",
    "DocumentURI": "policies/aws_cis_v130_1_13.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.13"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "There are multiple costs and potential consequences of non-compliance to the mentioned AWS Control. \n\n**Increased Security Risks**\n\nWhen users have multiple access keys, there's a higher chance one or more of these access keys will be mishandled, lost, or stolen. In such situations, if unauthorized individuals gain access to these keys, they can potentially compromise the account by manipulating resources, taking control over sensitive data, or doing any other damaging actions. This would lead to security incidents that could damage the reputation and credibility of the business.\n\n**Financial Ramifications**\n\nIf an access key is misused, either intentionally or unintentionally, it can lead to unanticipated usage charges. For instance, an individual could potentially start up many expensive services, leading to high costs. Even worse, if access keys were to fall into the hands of malicious actors, they could use the breached account for illegal activities like crypto-mining, which could result in significant AWS-based expenses and legal charges.\n\n**Compliance and Legal Issues**\n\nFor enterprises operating in regulated industries, non-compliance to security best practices such as limiting access keys can lead to financial penalties and legal implications. They might fail audits which often require certain security measures like principle of least privilege, which this control supports.\n\n**Increased Management Overhead**\n\nMaintaining multiple access keys per user adds to the complexity of IAM and increases the overhead of management. Businesses need more time and resources to handle the creation, rotation, and deletion of access keys.\n\nTo avoid the mentioned risks and costs, it is a best practice to limit users to a single access key, which makes it easier to manage and reduce the potential attack surface."
      ],
      "x-kaytu-usefulness-example": [
        "Example:\nAssume that you are a part of an organization that uses AWS for their cloud services. One of your roles involves regularly interacting with AWS resources like EC2 instances, S3 Buckets, or RDS Instances using AWS CLI commands or through AWS SDK.\n\nHere, AWS Access Keys are crucial because they help in authenticating your requests to AWS, acting as an ID-password pair to confirm your identity and then grant or deny the permissions based on your IAM role. \n\nConsider you are writing a script for a custom application running on your local machine or an EC2 instance that needs to communicate with an S3 bucket to store customer data, here you would need to use your AWS Access keys to let the S3 service know that your application is authorized to store, read, or modify data in the bucket.\n\n```\nimport boto3\n\n#Place your access keys here\naws_access_key_id = 'AKIAXXXXXXXXXXXXXXXX'\naws_secret_access_key = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n\nsession = boto3.Session(\n    aws_access_key_id,\n    aws_secret_access_key,\n    region_name='us-west-2'\n)\ns3 = session.resource('s3')\n\n# Now you can use `s3` to perform various operations on S3 service like \n# creating/deleting buckets, storing/retrieving files etc.\n```\n\nAn important aspect is to minimize the exposure of Access Keys to ensure the security of your AWS resources. It is highly recommended to not provide multiple access keys to a user because if one of them gets compromised, it introduces unwanted vulnerability to the security of the resources. Instead, it is better to manage access via IAM policies and roles."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_22",
    "Title": "1.22 Ensure IAM users are managed centrally via identity federation or AWS Organizations for multi-account environments",
    "Description": "In multi-account environments, IAM user centralization facilitates greater user control. User access beyond the initial account is then provide via role assumption. Centralization of users can be accomplished through federation with an external identity provider or through the use of AWS Organizations.",
    "QueryID": null,
    "DocumentURI": "policies/aws_cis_v130_1_22.md",
    "ManualVerification": true,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.22"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "manual"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_3_11",
    "Title": "3.11 Ensure that Object-level logging for read events is enabled for S3 bucket",
    "Description": "S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.",
    "QueryID": "aws_cloudtrail_s3_object_read_events_audit_enabled",
    "DocumentURI": "policies/aws_cis_v130_3_11.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "3.11"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "3"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can have both financial and operational impacts, particularly as it relates to security and auditing.\n\n1. **Data Breach**: If Object-level logging for S3 buckets is not enabled, then actions such as GetObject, DeleteObject, and PutObject are not logged. In case of a security incident or data breach, it will be challenging to trace the actions that led to the incident as there will be no details about who accessed or modified the S3 objects.\n\n2. **Audit Fails**: For organizations subject to IT audits for regulatory or compliance reasons, failure to log S3 object-level details could result in a failed audit. This could lead to steep fines, reputational damage, or even loss of licenses or certifications.\n\n3. **Difficulty in Debugging**: In case of technical issues or application errors related to S3, the lack of object-level logging can make it difficult, if not impossible, to debug issues and identify their root causes.\n\n4. **Resource Mismanagement**: Object-level logging allows administrators to monitor the use of S3 resources. Without it, it's harder to identify misused or underused resources, which can lead to inefficient expenditure.\n\n5. **Accountability Issues**: Without knowing who did what and when, it's impossible to hold users accountable for their actions. This can lead to governance issues, especially in large organizations.\n\nIn terms of financial cost, while enabling object-level logging does incur some AWS charges, the potential costs of non-compliance — including data breaches, failed audits, and operational inefficiencies — are likely to be far greater."
      ],
      "x-kaytu-usefulness-example": [
        "For example, imagine you have a scalable web application that stores user uploaded images in an Amazon S3 bucket. As the number of users increases, you would need to track and monitor who accesses, deletes or modifies the image files in your S3 bucket for auditing and security purposes.\n\nFor this, you would need to enable object-level logging with Amazon CloudTrail for the S3 buckets where user image files are stored. This way, Amazon CloudTrail can log all GetObject, PutObject, and DeleteObject API calls made on your S3 bucket and store these logs in a separate, central S3 bucket.\n\nThis centralized log can provide you with detailed records of the activity in your web application's S3 bucket. For instance, you can see who accessed a particular image file and when. If an image file is accidentally deleted or deliberately tampered with, you can use the CloudTrail log to determine who made the DeleteObject API call and when.\n\nTherefore, this control provides an essential layer of visibility and auditability, helping to enhance data security and governance in your Amazon S3 environments."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_11",
    "Title": "4.11 Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL)",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. NACLs are used as a stateless packet filter to control ingress and egress traffic for subnets within a VPC. It is recommended that a metric filter and alarm be established for changes made to NACLs.",
    "QueryID": "aws_log_metric_filter_network_acl",
    "DocumentURI": "policies/aws_cis_v130_4_11.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.11"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the aforementioned AWS control that recommends real-time monitoring of API calls and establishment of metric filter and alarms for changes made to NACL can be underscored under several risks and potential losses:\n\n1. **Security Breach**: Non-compliance to this control could possibly expose your AWS resources to unauthorized access leading to security breaches. If changes in NACLs go unnoticed, it could create security loopholes for malicious entities to exploit.\n\n2. **Data Loss or Theft**: If the AWS resources or services host sensitive data, a security breach could potentially lead to data theft or loss, leading to significant reputational or financial damage.\n\n3. **Unexpected Costs**: Unmonitored API calls can lead to unexpected costs. For instance, if an attacker gains access to your resources, they may start new instances, increase read/write capacity or perform other actions that significantly increase your AWS bill.\n\n4. **Compliance Violations**: If your organization handles sensitive data and is subject to regulations like GDPR, HIPAA, etc., non-compliance to these AWS controls can lead to non-compliance with these data protection regulations risking heavy fines and legal action.\n\n5. **Operational Disruption**: Changes to NACLs without monitoring can lead to disruption of the normal functioning of your services. For instance, a change might block traffic from your applications causing downtime until the issue is discovered and corrected.\n\nIn summary, non-compliance to this AWS control can expose your applications to security threats, create unexpected costs, cause potential compliance violations and disrupt normal operations. Regular and real-time monitoring of API calls and changes to NACLs is imperative to mitigate these risks and ensure smooth and secure operations of your AWS services."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, imagine your company has sensitive data within your AWS environment. You have implemented Network Access Control Lists (NACLs) to manage ingress and egress traffic to your Virtual Private Cloud (VPC), further enhancing the security of your data. An unauthorized user has obtained user credentials for your system and attempts to modify the NACLs to gain access.\n\nBy having metric filters and alarms set up for changes to NACLs, you would be notified in real-time if such changes occur. This allows you to act quickly to investigate the change, identify the issue, and prevent any potential data breaches from occurring. \n\nThe alert could look something like this:\n\n```\n\u003cCloudWatchAlarm\u003e\n  \u003cAlarmName\u003eNACL Changes Detected\u003c/AlarmName\u003e\n  \u003cAlarmDescription\u003eAn alarm that triggers when changes to NACLs are detected.\u003c/AlarmDescription\u003e\n  \u003cAWSNamespace\u003eAWS/Logs\u003c/AWSNamespace\u003e\n  \u003cMetricName\u003eNACLLong\u003c/MetricName\u003e\n  \u003cDimensions\u003e\n    \u003cDimension\u003e\n      \u003cName\u003eLogGroupName\u003c/Name\u003e\n      \u003cValue\u003e/aws/lambda/my-function\u003c/Value\u003e\n    \u003c/Dimension\u003e\n  \u003c/Dimensions\u003e\n  \u003cPeriod\u003e300\u003c/Period\u003e\n  \u003cEvaluationPeriods\u003e1\u003c/EvaluationPeriods\u003e\n  \u003cThreshold\u003e1\u003c/Threshold\u003e\n  \u003cComparisonOperator\u003eGreaterThanOrEqualToThreshold\u003c/ComparisonOperator\u003e\n  \u003cAlarmActions\u003e\n    \u003cAlarmAction\u003earn:aws:sns:us-west-2:111122223333:MyTopic\u003c/AlarmAction\u003e\n  \u003c/AlarmActions\u003e\n\u003c/CloudWatchAlarm\u003e\n```\nIn this alarm, the metric `NACLLong` checks the log group `/aws/lambda/my-function` every 300 seconds (5 minutes). If any NACL change is detected within that time, an alert is sent to the SNS topic `MyTopic`, notifying responsible parties of the change. \n\nThis kind of setup can help your company maintain high levels of security and respond quickly to potentially harmful incidents."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_14",
    "Title": "1.14 Ensure access keys are rotated every 90 days or less",
    "Description": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.",
    "QueryID": "aws_iam_user_access_key_age_90",
    "DocumentURI": "policies/aws_cis_v130_1_14.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.14"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the stated AWS control can mean significant cost due to several factors:\n\n1. **Unauthorized Access and Data Breach:** If the access keys are not regularly rotated, they might be used by unauthorized individuals for unauthorized access, which may lead to a data breach. Accordingly, AWS may impose fine due to non-compliance, not to mention the potentially more extensive cost of the data breach itself. This could include both direct costs, such as legal penalties and recovery expenses, and indirect costs, such as reputational damage and loss of customer faith.\n\n2. **Operational Disruption:** Non-rotated or compromised access keys can result in operational disruptions. For instance, a malicious attacker could interrupt service operations, leading to potential financial losses from downtime and recovery efforts.\n\n3. **Regulatory penalties:** Depending on the jurisdiction and the sensitivity of the data being handled, non-compliance with security best practices like regular key rotation may result in penalties from regulatory bodies. \n\n4. **Non-compliance with Contracts:** Many organizations have contracts with clients that mandate compliance with certain security practices, which likely include key rotation policies. Non-compliance can result in breaches of such contracts, potentially leading to costly legal proceedings and loss of business. \n\n5. **Insecure AWS environment:** Non-compliance to the control makes the AWS environment insecure which might require more investment into incident response, digital forensics, and additional security measures.\n\nTherefore, non-compliance can have a significant financial and operational cost, making it crucial to ensuring regular rotation of all access keys."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, assume you have a project where you are developing a mobile application that interacts with AWS services, such as S3 or DynamoDB databases. To make programmatic calls to AWS services, you would need access keys. You'd utilize the access keys in your code to authenticate your application's requests. \n\nFor example, if you're using the AWS SDK for Javascript, you might have a piece of code like this:\n\n```javascript\nvar AWS = require('aws-sdk');\n\nAWS.config.update({\n  accessKeyId: 'YOUR_ACCESS_KEY',\n  secretAccessKey: 'YOUR_SECRET_ACCESS_KEY',\n  region: 'us-west-2'\n});\n\nvar s3 = new AWS.S3();\n\nvar params = {\n  Bucket: 'myBucket',\n  Key: 'myKey',\n  Body: 'Hello!'\n};\n\ns3.putObject(params, function(err, data) {\n  if (err) console.log(err, err.stack);\n  else console.log(data);\n});\n```\n\nIn this instance, 'YOUR_ACCESS_KEY' and 'YOUR_SECRET_ACCESS_KEY' would be replaced with your actual access key ID and secret access key. The interaction would not be possible without these access keys.\n\nThe recommendation to regularly rotate access keys is to increase security. It mitigates the damage potentially done if your keys are accidentally leaked or maliciously stolen. Regular rotation can limit the window in which the leaked keys can be used."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_15",
    "Title": "1.15 Ensure IAM Users Receive Permissions Only Through Groups",
    "Description": "IAM users are granted access to services, functions, and data through IAM policies. There are three ways to define policies for a user: 1) Edit the user policy directly, aka an inline, or user, policy; 2) attach a policy directly to a user; 3) add the user to an IAM group that has an attached policy.  Only the third implementation is recommended.",
    "QueryID": "aws_iam_user_no_inline_attached_policies",
    "DocumentURI": "policies/aws_cis_v130_1_15.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.15"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS control pertaining to IAM user access can have several costs and potential risks, these include:\n\n- **Increased Security risks:** Not following the recommended method of adding a user to an IAM group that has attached policies can lead to misconfigurations and potential holes in your security setup. This can leave your system vulnerable to unauthorized access and potential data breaches.\n\n- **Inconsistent Permission Management:** Managing individual user policies or directly attached policies can be more time-consuming and prone to errors. Inconsistencies in permissions across users may arise, which can lead to both unintended access and unnecessary barriers to necessary services.\n\n- **Audit Complications:** Manual and inconsistent permissions make the audit process complicated. It can be challenging to track who has access to what, when, and for what purpose. This can also lead to non-compliance with some regulations or internal control rules.\n\n- **Administration overhead:** Managing policies at the individual user level increases the administration overhead. It can become challenging to keep track of who has what permissions, and making changes to permissions can be labor-intensive.\n\nIn conclusion, non-compliance with this AWS control means higher administrative burdens, a less secure and efficient system, and potential regulatory consequences. It is better to manage access through groups as it makes it easier to manage similar permissions for sets of users thereby reducing risk and overhead."
      ],
      "x-kaytu-usefulness-example": [
        "AWS Identity and Access Management (IAM) can give your organization a better control over who can access particular resources. IAM policies are essential for maintaining security in your environment. \n\nFor instance, let's say you have a web application that requires access to an Amazon S3 bucket to store user uploaded files. With IAM, you can create an IAM user and assign it a policy that only allows it to access that particular S3 bucket and no other resources in your AWS environment. \n\nThe policy could look like this:\n\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\",\n                \"s3:GetObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::myapp-user-uploads/*\"\n            ]\n        }\n    ]\n}\n```\nThis policy restricts the user's permissions to only putting (uploading) and getting (downloading) objects from the \"myapp-user-uploads\" S3 bucket.\n\nYou can then provide the access and secret keys for this IAM user to your web application, and the application will only be able to interact with the specified S3 bucket, thus maintaining secure access to your AWS resources.\n\nEven if these keys are accidentally exposed, they will not grant any additional access to other AWS resources due to the strict policy that has been set up, reducing the potential damage from such a security incident."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_12",
    "Title": "4.12 Ensure a log metric filter and alarm exist for changes to network gateways",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.",
    "QueryID": "aws_log_metric_filter_network_gateway",
    "DocumentURI": "policies/aws_cis_v130_4_12.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.12"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Cost of non-compliance to the above-mentioned AWS control could be quite significant and might involve:\n\n#### 1. Security Breaches:\nWithout real-time monitoring of API calls, you might miss unauthorized or malicious activity. Unauthorized changes to network gateways can potentially expose internal resources to the outside world, allowing for data breaches.\n\n#### 2. Operational Issues:\nUndetected changes may also lead to operational problems within a VPC. For instance, if a network gateway is accidentally deleted or modified, the services depending on that gateway may be disrupted.\n\n#### 3. Compliance Failures:\nFailure to monitor key activities like changes to network gateways could lead to non-compliance with certain regulatory standards, potentially resulting in heavy fines or penalties.\n\n#### 4. Unproductive Troubleshooting:\nWithout proper logging and monitoring, troubleshooting becomes a time-consuming and a non-intuitive activity as the root cause of issues is often unclear.\n\nIn a nutshell, not complying with this control can increases the chance of undetected security incidents, unnecessary disruption of services, incurring regulatory fines and adds time and complexity to troubleshooting efforts, all of which potentially translate to a significant monetary cost."
      ],
      "x-kaytu-usefulness-example": [
        "An example instance of the usefulness of this AWS control can occur in a scenario where a company has a virtual private cloud (VPC) setup on AWS, hosting their application. If an unauthorized person somehow gains access to the AWS account, they may attempt to alter the network gateways to redirect network traffic for malicious purposes.\n\nUsing this control, all changes to the network gateway can be logged in real-time with CloudTrail Logs and sent to CloudWatch Logs. By setting up metric filters to look for these specific events (changes to network gateways) and establishing alarms, the company can be promptly alerted when changes occur. \n\nHere is how the markup format might look for such an instance:\n\n```markdown\n- **Scenario**: Setting up alerts for unauthorized changes to network gateways\n\n  - **Given**: A company has a virtual private cloud (VPC) setup on AWS hosting their application.\n  \n  - **When**: If an unauthorized person gains access to the AWS account and attempts to alter the network gateways.\n    \n    - **Then**: The change to the network gateway is logged in real-time with CloudTrail Logs and sent to CloudWatch Logs.\n    \n    - **And**: A metric filter configured to track changes to network gateways identifies the event and triggers an alarm.\n\n- **Outcome**: \n  - The company is immediately alerted about the unauthorized change, enabling them to take swift action and prevent potential data breaches or interruption of service. \n  - They can track the API call that made the change for further investigation.  \n```\nThis setup provides an additional layer of security to the application infrastructure by closely monitoring and alerting on unwanted network configurations changes."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_16",
    "Title": "1.16 Ensure IAM policies that allow full \"*:*\" administrative privileges are not attached",
    "Description": "IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant least privilege -that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform only those tasks, instead of allowing full administrative privileges.",
    "QueryID": "aws_iam_policy_all_attached_no_star_star",
    "DocumentURI": "policies/aws_cis_v130_1_16.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.16"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the AWS control that recommends granting least privilege via IAM (Identity and Access Management) policies can lead to several high-cost consequences. They include:\n\n## Security Breaches \n\nUsers with inappropriate permissions (especially full administrative privileges) are a security risk as they may unintentionally compromise infrastructure, delete important data, or even pose a risk for inside threats. Non-compliance may increase the chances of insecure API calls which can result in unauthorized actions and security breaches. This can lead to heavy financial losses for data damages or breaches.\n\n## Regulatory Violations\n\nWhen your organization has to adhere to certain regulatory guidelines such as HIPAA, GDPR, PCI-DSS, among others, non-compliance to these controls could lead to violations of these regulations. These violations can result in significant fines and penalties, as well as damage to the company's reputation.\n\n## Abuse and Misuse \n\nUnauthorized or over-authorized users could potentially misuse the system by performing actions that haven't been justified by their role, leading to unnecessary costs and potential exploitation.\n\n## Unnecessary Costs \n\nWhen users have access to more services and resources than necessary, it increass the potential for unnecessary and unmonitored resource usage, resulting in higher operating costs.\n\n## System Failures \n\nAn over-privileged user could potentially execute high-level commands or accidentally alter crucial configurations, leading to system failures or fine-tuning demands due to misconfiguration.\n\nNon-compliance with IAM policies and the principle of least privilege not only increases security risks, but can also lead to regulatory penalties, higher operating costs, and potential system failures. Hence, compliance to this AWS control can significantly contribute to the security, efficiency, and cost-effectiveness of cloud operations."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, let's consider the scenario where your organization is working on a new project that requires access to an existing AWS S3 bucket which contains sensitive data. Instead of providing wide-ranging permissions to all the project members, with IAM policies, you can assign granular permissions restricting them to only necessary accesses.\n\nA custom IAM policy could look like:\n\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AllowListAndViewBucket\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\",\n                \"s3:GetObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::sensitive-data-bucket\",\n                \"arn:aws:s3:::sensitive-data-bucket/*\"\n            ]\n        }\n    ]\n}\n```\n\nThis policy permits the users to list the bucket contents and to read the data within it but restricts them from modifying or deleting it. Thus, it mitigates the risk of data breach or accidental loss of sensitive data, whilst maintaining the effectiveness of project collaboration. Importantly, it adheres to the principle of least privilege in managing AWS resources.\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_13",
    "Title": "4.13 Ensure a log metric filter and alarm exist for route table changes",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.",
    "QueryID": "aws_log_metric_filter_route_table",
    "DocumentURI": "policies/aws_cis_v130_4_13.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.13"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS control can be significant and includes:\n\n1. **Security Risks**: Without real-time monitoring of API calls, malicious activities can be overlooked, leading to breaches of sensitive data. For example, an unauthorized user might exploit an unmonitored API call to access, modify, or delete sensitive data.\n\n2. **Operational Inefficiency**: Without monitoring changes in route tables, potential networking issues can go unnoticed. Issues such as misconfiguration, which can disrupt services and applications, might occur more frequently.\n\n3. **Non-Adherence to Regulatory Requirements**: In certain jurisdictions or industries, real-time monitoring of API calls could be a legal or regulatory requirement. Non-compliance could result in financial penalties or other forms of regulatory action.\n\n4. **Increased Costs**: Ignoring AWS control could lead to unexpected costs. For example, a malicious actor could leverage an unmonitored API call to spin up expensive resources, resulting in higher AWS bills.\n\nTherefore, establishing a metric filter and alarm for real-time monitoring of API calls and tracking changes to route tables is essential in maintaining an effective, secure, and cost-efficient environment in AWS."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, imagine you run a E-commerce platform on AWS. Your AWS infrastructure entails multiple layers of security including Security Groups, Network Access Control Lists (NACLs), and Virtual Private Clouds (VPCs) segregated by subnets. Network traffic moves between these subnets, to and from the internet and other AWS services, dependent upon the route tables associated with these subnets.\n\nAn unauthorized or unexpected alteration to a route table may lead to a security breach or service disruption. For instance, an erroneous rule that allows traffic from an untrusted source or malicious entity might be added, or legitimate traffic to a critical service might be blocked. \n\nBy setting up metric filters and alarms for changes in route tables, you are immediately notified whenever a change is made. The alarm could be configured to send a message to your email or phone - notifying of the change and prompting you to review it for correctness and approval. If the change is illicit or erroneous, swift action can be taken to rectify or rollback changes, thereby protecting your platform. \n\nHere's an example in markup format:\n\n```markdown\nTo set up a metric filter and alarm on route table changes:\n\n1. Sign in to the AWS Management Console and open the CloudWatch console at [https://console.aws.amazon.com/cloudwatch/](https://console.aws.amazon.com/cloudwatch/).\n2. In the navigation pane, choose Logs.\n3. Select the checkbox next to the log group that CloudTrail created. This log group is named AWSLogs/YourAccountID/CloudTrail/YourRegion.\n4. Choose Create Metric Filter.\n5. In the Create Metric Filter wizard, for Filter Pattern, type `{ ($.eventName = CreateRoute) || ($.eventName = DeleteRoute) || ($.eventName = ReplaceRoute) }`\n6. Choose Assign Metric.\n7. Review the information and choose create filter.\n8. In the navigation pane, choose Alarms, Create Alarm.\n9. Under create alarm, set an alarm whenever the metric is \u003e 0 for consecutive periods of 5 minutes.\n10. Configure actions to send a notification to an SNS topic.\n```\n\nBy doing so, we can immediately be notified when a change has been made to our route tables, allowing us to proactively monitor and safeguard our AWS route tables."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_17",
    "Title": "1.17 Ensure a support role has been created to manage incidents with AWS Support",
    "Description": "AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support.",
    "QueryID": "aws_iam_support_role",
    "DocumentURI": "policies/aws_cis_v130_1_17.md",
    "ManualVerification": false,
    "Severity": "Medium",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.17"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "Medium"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control might lead to significant costs in several ways namely:\n\n1. **Loss of Control**: If users are not authorized to manage incidents through AWS Support via an IAM Role, organizations are robbed of their ability to take proactive action, effectively leaving things to AWS's discretion. This might lead to suboptimal decisions or unnecessary delays in restoring critical services.\n\n2. **Delay in Response Time**: AWS Support helps in resolving the incidents in the minimum possible time. Non-compliance might lead to longer incident response and resolution times, leading to increased downtime and loss of business.\n\n3. **Increased Security Risk**: Without the appropriate IAM role, there might be a scenario where users start sharing AWS credentials to resolve incidents which increases the risk of security violations and potential data breaches. \n\n4. **Increased Costs**: In the absence of an IAM role, organizations may need to rely on 3rd-party or AWS Premium Support, which can prove to be cost-prohibitive.\n\nIn the markup format:\n\n```markdown\n- **Loss of Control**: If users are not authorized to manage incidents through AWS Support via an IAM Role, organizations are robbed of their ability to take proactive action, effectively leaving things to AWS's discretion. This might lead to suboptimal decisions or unnecessary delays in restoring critical services.\n\n- **Delay in Response Time**: AWS Support helps in resolving the incidents in the minimum possible time. Non-compliance might lead to longer incident response and resolution times, leading to increased downtime and loss of business.\n\n- **Increased Security Risk**: Without the appropriate IAM role, there might be a scenario where users start sharing AWS credentials to resolve incidents which increases the risk of security violations and potential data breaches. \n\n- **Increased Costs**: In the absence of an IAM role, organizations may need to rely on 3rd-party or AWS Premium Support, which can prove to be cost-prohibitive.\n```\n"
      ],
      "x-kaytu-usefulness-example": [
        "For example, assume you have a company named 'OnlineX' that uses various AWS services for their online operations. They have a team of IT professionals who consistently interact with AWS resources and services. An issue arises with their S3 storage bucket. The assigned team needs to get support from AWS promptly to rectify this.\n\nIn this case, creating an IAM Role specifically for dealing with such incidents becomes useful. With this role, authorized personnel like IT team lead or system administrators can access AWS Support directly. \n\nHere's how the process might look like in Markup:\n\n```markdown\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": {\n        \"Effect\": \"Allow\",\n        \"Action\": \"support:*\",\n        \"Resource\": \"*\"\n    },\n    \"RoleName\" : \"Onlinex-AWSSupport-Role\",\n    \"Path\": \"/\",\n    \"Policies\": [ \n        {\n            \"PolicyName\": \"Onlinex-AWSSupport-Policy\", \n            \"PolicyDocument\": {\n                \"Version\": \"2012-10-17\",\n                \"Statement\": [ \n                    {\n                        \"Effect\": \"Allow\",\n                        \"Action\": [\n                            \"support:*\"\n                        ],\n                        \"Resource\": \"*\"\n                    } \n                ]\n            } \n        }\n    ]\n}\n```\nThis example AWS IAM role named `Onlinex-AWSSupport-Role` allows any ID with this role to perform any action (`\"Action\": \"support:*\"`) on any resource (`\"Resource\": \"*\"`) in AWS Support. This policy (`Onlinex-AWSSupport-Policy`) is then attached to the IAM role.\n\nWith this IAM role, your organization’s authorized personnel can quickly raise a support ticket, track its status, use AWS trusted advisor for best practices, and communicate effectively with AWS Support to resolve any issues. This ensures timely incident response, maintaining smooth and uninterrupted services of your organization 'OnlineX'."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_14",
    "Title": "4.14 Ensure a log metric filter and alarm exist for VPC changes",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.",
    "QueryID": "aws_log_metric_filter_vpc",
    "DocumentURI": "policies/aws_cis_v130_4_14.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.14"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to the AWS control of real-time monitoring API calls via directing CloudTrail Logs to CloudWatch Logs and creating metric filters and alarms for changes made to VPCs can be significant. Here are a few primary ways an organization could suffer:\n\n1. **Security Risks**: Without these monitoring and alarms, organizations will lack visibility into changes made in their Virtual Private Clouds (VPCs). As a result, unauthorized access or malicious activity may go undetected, increasing the chances of security breaches or data leaks.\n\n2. **Operational Disruption**: Real-time monitoring plays a crucial role in identifying operational issues early on. If changes in VPCs are not audited in real-time, it may lead to unexpected service downtime or performance impact, which can significantly disrupt business operations.\n\n3. **Increased Costs**: In the event of a security breach or operational disruption, the cost of resolving any resulting issues can be significantly high. This includes direct costs such as recovery processes, as well as indirect costs like reputational damage or loss of business.\n\n4. **Non-compliance Consequences**: Continuous monitoring is a key requirement in many compliance standards (such as PCI-DSS, GDPR etc.). Failure to do so can result in non-compliance fines and penalties, not to mention potential harm to the company's reputation.\n\n5. **Loss of Data**: Without monitoring and alarms, any data loss that might occur due to changes in your VPCs could go unnoticed until it's too late for recovery. This could result in irreversible loss of crucial business data.\n\nIn conclusion, compliance with this AWS control is critical for maintaining security, ensuring operational continuity, preventing unnecessary financial expenditure, staying compliant with regulatory standards, and safeguarding valuable data."
      ],
      "x-kaytu-usefulness-example": [
        "```\nInstances of Usefulness:\n\n1. Intrusion Detection: If there are unexpected API calls being made (especially from unknown sources), setting up metric filters and alarms can help in identifying potential intrusions or security breaches before they become critical.\n\nExample:\n```\nresource \"aws_cloudwatch_log_metric_filter\" \"example\" {\n  name           = \"example\"\n  pattern        = \"{ $.eventName = CreateVpc* }\"\n  log_group_name = aws_cloudwatch_log_group.example.name\n\n  metric_transformation {\n    name      = \"EventCount\"\n    namespace = \"VPCChanges\"\n    value     = \"1\"\n  }\n}\n\nresource \"aws_cloudwatch_metric_alarm\" \"example\" {\n  alarm_name          = \"vpc-changes\"\n  comparison_operator = \"GreaterThanOrEqualToThreshold\"\n  evaluation_periods  = \"1\"\n  metric_name         = \"EventCount\"\n  namespace           = \"VPCChanges\"\n  period              = \"300\"\n  statistic           = \"SampleCount\"\n  threshold           = \"1\"\n  alarm_description   = \"This metric checks for changes made to VPCs.\"\n  alarm_actions       = [aws_sns_topic.example.arn]\n}\n```\nIn this example, a CloudWatch Log Metric Filter and Alarm are created. The filter matches events where the `eventName` is `CreateVpc*`, indicating a potential unauthorized VPC creation. If this event occurs, an alarm `vpc-changes` is triggered and a notification is sent to the specified SNS topic.\n\n2. Compliance Auditing: If your organization has to comply with certain regulations which require maintaining logs of all changes made to the network infrastructure, then setting up CloudWatch Logs for CloudTrail API call logging will be beneficial in creating an audit trail.\n\n3. Troubleshooting: In case of any issues related to the VPC like connection issues or route table misconfigurations, having real-time monitoring of the API calls related to the changes in VPCs will help in speedy troubleshooting and resolution of the issue.\n```"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_4_15",
    "Title": "4.15 Ensure a log metric filter and alarm exists for AWS Organizations changes",
    "Description": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.",
    "QueryID": "aws_log_metric_filter_organization",
    "DocumentURI": "policies/aws_cis_v130_4_15.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "4.15"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "4"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/CloudWatch"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to this AWS control can result in several potential costs:\n\n1. **Security Risks**: The main aim of this control is to ensure and enhance the security of your AWS resources. If your API calls are not monitored in real time, you might miss potential security threats, like unauthorized access or suspicious activities within your AWS environment. This could lead to malicious activities, including data breaches and information theft. \n\n2. **Operational Disruption**: If unauthorized changes are made to AWS Organizations in the master AWS Account and they go unnoticed, it can cause serious operational disruptions and inconsistent configurations among linked accounts.\n\n3. **Financial Consequences**: Security breaches or data loss can lead to significant financial losses due to regulatory penalties, data recovery costs, loss of customer trust and damage to the company's reputation.\n\n4. **Regulatory Compliance**: Organizations operating in regulated industries are required to maintain certain security standards and could face penalties or legal consequences if unable to demonstrate compliance with these standards.\n\n5. **Inaccessible Full Audit Trail**: Not having alert mechanisms can mean failures go unnoticed, or that changes are not logged, which reduces visibility into the actions performed on your resources. This could lead to difficulties in troubleshooting issues or identifying the root cause of a problem. \n\n6. **Delayed Response**: Without real-time monitoring, your response to critical events will likely be delayed. This increases the time to detection and resolution of issues, potentially exacerbating their impact.\n\nHere's the concept in the form of a markup:\n\n```\n- **Security Risks**: Potential security threats can go unnoticed and could lead to data breaches and information theft.\n- **Operational Disruption**: Unauthorized changes can cause operational disruptions and inconsistent configurations.\n- **Financial Consequences**: Security breaches or data loss can lead to financial losses due to penalties, data recovery costs, and loss of reputation.\n- **Regulatory Compliance**: Non-compliance to required security standards can result in penalties or legal consequences.\n- **Inaccessible Full Audit Trail**: Reduced visibility into actions performed on your resources can lead to difficulties in troubleshooting or identifying issues. \n- **Delayed Response**: Absence of real-time monitoring increases detection and resolution time for critical issues, worsening their impact.\n```"
      ],
      "x-kaytu-usefulness-example": [
        "Example:\n\nAn eCommerce company has been using AWS Organizations to manage their AWS accounts and resources centrally. They are maintaining multiple AWS accounts for different departments like development, testing, production, and others. One day, they noticed that some unexpected changes occurred in their master AWS accounts, which resulted in temporary unavailability of their services.\n\nTo address the unexpected changes and protect their AWS resources from unauthorized changes or accidental modifications, they decided to implement real-time monitoring of API calls for AWS Organizations changes in the master AWS account. They set up the AWS CloudTrail to track every action in their AWS accounts like who made the request, from where the request came, when the request was made, and others. They directed the CloudTrail logs to CloudWatch Logs and established metric filters and alarms on these logs.\n\nBy using the logs, they were able to quickly find the source of the unexpected changes and rectify them. They also set alarms for unusual activities, like disabling of cloud trail, security group changes, any changes to network access control lists, etc. This ensured immediate notifications were sent to the appropriate teams whenever such activities were detected, allowing for real-time response and mitigation to prevent any possible impact on their services.\n\nTherefore, such real-time monitoring, tracking, and alerting system helped the eCommerce company to uphold the safety and integrity of their resources and services in AWS."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_18",
    "Title": "1.18 Ensure IAM instance roles are used for AWS resource access from instances",
    "Description": "AWS access from within AWS instances can be done by either encoding AWS keys into AWS API calls or by assigning the instance to a role which has an appropriate permissions policy for the required access. \"AWS Access\" means accessing the APIs of AWS in order to access AWS resources or manage AWS account resources.",
    "QueryID": null,
    "DocumentURI": "policies/aws_cis_v130_1_18.md",
    "ManualVerification": true,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.18"
      ],
      "cis_level": [
        "2"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "manual"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance with this AWS control can lead to several costs and risks, some of which are described below:\n\n1. **Security Risks:** The failure to adhere to this control could result in compromise of your AWS resources. If AWS keys are not protected or are embedded in the code itself and if they are accessed, it can lead to data breaches and unauthorized access to your AWS resources. They can be misused to create unnecessary resources leading to theft of resources and leaking of sensitive data. \n\n2. **Financial Costs:** If unauthorized access or data breaches occur due to failure of adhering to this control, it can lead to unnecessary costs for the organization. This includes the costs of data loss, the costs involved in managing the breach, notification costs, potential fines or penalties and the costs related to the potential damage to the reputation of the business.\n\n3. **Reputation Damage:** Non-compliance can lead to security breaches which can cause serious damage to the reputation of your business. Once the trust of customers is lost, it’s very hard to regain, which can have a long-term impact on the business.\n\n4. **Legal and Regulatory Penalties:** There can be regulatory non-compliance penalties if sensitive data is lost or inappropriately accessed because of improper management of AWS keys. Regulations such as GDPR, CCPA, HIPAA etc., require businesses to ensure proper controls over the data they manage.\n\n5. **Operational Disruptions:** If your AWS access is compromised, it could result in operational disruptions while access is restored, and security breaches are investigated.\n\nAdhering to the control of properly managing AWS access can mitigate these potential risks and costs. Proper management could involve regularly rotating credentials, limiting access to necessary resources only, and regularly monitoring and auditing access to your AWS resources."
      ],
      "x-kaytu-usefulness-example": [
        "One of the key places where this permission policy for accessing AWS services can be useful is when developers are setting up a video streaming application. They create multiple microservices using AWS Lambda to handle various tasks. \n\nFor example, the microservice that processes user uploaded videos is designed to transfer the video files to an Amazon S3 bucket for storage and to transcode the videos using AWS Elemental MediaConvert for streaming.\n\n```markup\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\": \"arn:aws:s3:::bucket-name/*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"mediaconvert:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\nIn this policy, the s3:PutObject, s3:GetObject, s3:DeleteObject permissions allow the AWS Lambda function to add, retrieve, and delete files in the specified S3 bucket. The Action \"mediaconvert:*\" gives the function permission to use all actions within AWS Elemental MediaConvert. Rather than including the AWS access keys directly in the Lambda function code, Amazon recommends assigning this policy to a role and then assigning the role to the AWS Lambda function. This strategy is much more secure and flexible, especially when you need to change permissions or rotate keys."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_1_19",
    "Title": "1.19 Ensure that all the expired SSL/TLS certificates stored in AWS IAM are removed",
    "Description": "To enable HTTPS connections to your website or application in AWS, you need an SSL/TLS server certificate. You can use ACM or IAM to store and deploy server certificates. Use IAM as a certificate manager only when you must support HTTPS connections in a region that is not supported by ACM. IAM securely encrypts your private keys and stores the encrypted version in IAM SSL certificate storage. IAM supports deploying server certificates in all regions, but you must obtain your certificate from an external provider for use with AWS. You cannot upload an ACM certificate to IAM. Additionally, you cannot manage your certificates from the IAM Console.",
    "QueryID": "aws_iam_server_certificate_not_expired",
    "DocumentURI": "policies/aws_cis_v130_1_19.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "1.19"
      ],
      "cis_level": [
        "1"
      ],
      "cis_section_id": [
        "1"
      ],
      "cis_type": [
        "automated"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/IAM"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Failing to comply with the above-mentioned AWS control, namely not enabling HTTPS connections to your website or application in AWS, contravenes data security best practices and could result in a range of negative consequences, including:\n\n- **Data Breaches**: Data transmitted over HTTP is not encrypted, which means it can be easily intercepted by anyone who has access to the network. This exposes sensitive information like usernames, passwords, and credit card numbers, potentially leading to data breaches. If user data is compromised, the cost could involve notification requirements, legal fines, damaged reputation, and loss of customer trust. \n\n- **Non-Compliance Penalties**: Depending on the industry in which your business operates and the regulations it falls under (like GDPR, CCPA, HIPAA, PCI DSS, etc.), non-compliance can lead to heavy fines, audits, penalties, and lawsuits that could have financial implications to the business.\n\n- **Loss of Customer Trust**: Without provisions for HTTPS connections, you risk damaging relationships with customers as data security and privacy have become fundamental expectations in our increasingly digital world.\n\n- **Lower SEO Rankings**: Search engines like Google use HTTPS as a ranking factor. Hence, not using HTTPS could negatively impact your website's visibility on search engine results, indirectly affecting your business's online presence, visits, leads, and conversions.\n\n- **Additional Operational Costs**: If you fail to use ACM for storing and deploying server certificates in supported regions and instead use IAM, you need to get the certificate from an external provider. This could incur additional costs and operational burden in terms of purchasing, rotating, and managing these external SSL/TLS certificates.\n\nThus, it is crucial to comply with this AWS control to minimize risks, protect sensitive information, maintain customer trust, avoid regulatory penalties, and avoid unnecessary costs."
      ],
      "x-kaytu-usefulness-example": [
        "For instance, let's say you operate a multinational business that has its website hosted on AWS servers in multiple regions across the globe. Your business will need to implement security measures to protect sensitive information from being intercepted by malicious actors. One such security measure is having an SSL/TLS certificate for your website, which allows secure HTTPS connections by encrypting the data in transit between users’ browsers and the website server.\n\nAny client (e.g., a laptop with a web browser) connecting to your site will know they're connecting to a server that owns the domain, as a trusted third-party certificate authority has digitally signed the SSL/TLS certificate. But, some of the server locations are in regions that ACM doesn't support yet. So, you would need to manage your certificates using IAM for those regions.\n\nFor instance, you may purchase certificates from an external provider like GoDaddy or Symantec. After purchasing the certificates from these providers, you can then import them into IAM for AWS to use.\n\nExample in action: If you have servers in the EU (Frankfurt) region, you may use ACM for deploying server certificates as it's supported by ACM. But for a server in a region not supported by ACM, you'd use IAM to import and deploy server certificates for HTTPS connections. For instance, a region that is relatively new or is launched after AWS Certificate Manager's last service update might not support ACM yet. But you can always use IAM to deploy your server certificates in all available AWS regions.\n\nPlease note that this example assumes that the ACM service updates haven't rolled out to every region by the time the server was deployed in some regions. The exact regions supported can change as AWS updates their services."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_2_1_1",
    "Title": "2.1.1 Ensure all S3 buckets employ encryption-at-rest",
    "Description": "Amazon S3 provides a variety of no, or low, cost encryption options to protect data at rest.",
    "QueryID": "aws_s3_bucket_default_encryption_enabled",
    "DocumentURI": "policies/aws_cis_v130_2_1_1.md",
    "ManualVerification": false,
    "Severity": "Low",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "2.1.1"
      ],
      "cis_level": [
        "1,2"
      ],
      "cis_section_id": [
        "2.1"
      ],
      "cis_type": [
        "manual"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "Low"
      ],
      "x-kaytu-noncompliance-cost": [
        "AWS provides affordable security in their data storage solution - Amazon S3 through encryption to protect data at rest. Non-compliance to this AWS Control means data stored is unprotected and exposed to potential security breaches, such as unauthorized access, data leakage, tampering, and theft. \n\nThe cost of non-compliance includes:\n\n1. Financial penalties: In case of a data breach, organizations might face significant fines under regulations like GDPR or HIPAA. \n2. Loss of customer trust and satisfaction: Customers may lose trust and switch to other providers in case of data misuse or breaches.\n3. Damaged reputation: This could impact the company's reputation and branding.\n4. Legal consequences: If the data breach involves sensitive or personally identifiable information, the company may face lawsuits.\n5. Loss of intellectual property: In some cases, breaches might lead to loss of important business data or intellectual property, causing further financial and strategic losses. \n\nTherefore, it is essential and cost-effective to adhere to AWS Controls and use encryption options provided by Amazon S3 for data protection."
      ],
      "x-kaytu-usefulness-example": [
        "Amazon S3's encryption options can be greatly beneficial for a business in terms of security and cost-effectiveness. For example, a healthcare company storing sensitive patient data in the cloud can utilise Amazon S3's low-cost encryption options to ensure data security and prevent unauthorized access. By encrypting data at rest, the company can both adhere to HIPAA compliance and other regulatory mandates that require data protection, and also prevent potential financial and reputational losses that could result from a data breach. This encryption feature provided by Amazon S3 thus makes secure cloud storage a viable and affordable option for the company."
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_2_1_2",
    "Title": "2.1.2 Ensure S3 Bucket Policy allows HTTPS requests",
    "Description": "At the Amazon S3 bucket level, you can configure permissions through a bucket policy making the objects accessible only through HTTPS.",
    "QueryID": "aws_s3_bucket_enforces_ssl",
    "DocumentURI": "policies/aws_cis_v130_2_1_2.md",
    "ManualVerification": false,
    "Severity": "Critical",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "2.1.2"
      ],
      "cis_level": [
        "1,2"
      ],
      "cis_section_id": [
        "2.1"
      ],
      "cis_type": [
        "manual"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/S3"
      ],
      "x-kaytu-explanation": [
        "Critical"
      ],
      "x-kaytu-noncompliance-cost": [
        "The cost of non-compliance to this AWS Control can range from data breaches, potential financial losses, damage to the company’s reputation, and potential legal implications. \n\nHere's a detailed explanation:\n\n1. **Data Breaches**: The primary concern is that data transfers that do not use HTTPS could potentially be intercepted and accessed by malicious parties. This means confidential data could be leaked, potentially leading to data breaches. \n\n2. **Financial Losses**: If a data breach occurs, the costs associated with investigating the breach, notifying affected parties, and recovering the lost data can be significant. It can also potentially lead to loss of business as customers may lose trust and shift to a competitor, which could result in long-term revenue loss.\n\n3. **Damage to Reputation**: A data breach can severely affect the reputation of a business. Even if the financial cost can be recovered, regaining customer's trust can be a greater challenge. \n\n4. **Legal Implications**: If the data breach results in a violation of data protection laws and regulations (e.g., GDPR, CCPA), a company could potentially face legal actions which could include hefty fines and sanctions.\n\nTo sum it up, non-compliance to this AWS control not only imposes security risks but can also have severe financial, legal and reputational implications. Therefore, to mitigate these risks, it is crucial to adhere to the appropriate controls and ensure data transfers are performed over a secure network protocol."
      ],
      "x-kaytu-usefulness-example": [
        "This AWS control is highly beneficial in various instances - such as when you're handling sensitive data, or when you require strict data security protocols.\n\nFor instance, a financial institution that leverages the AWS cloud to store client data would highly benefit from this control. By configuring the permissions of the Amazon S3 bucket, they can ensure that the objects are only accessible through the secure HTTPS protocol. This considerably reduces the risk of data interception as HTTPS encrypts the data in transit, thus providing a significant layer of protection for sensitive client information.\n\n```markdown\nExample:\nA bank uses AWS to store and manage their clients' sensitive financial data. To adhere to data protection regulations and to ensure the integrity and confidentiality of the data, they secure their Amazon S3 bucket where the data is stored by applying a bucket policy. This policy is configured to only allow access to the data through secure HTTPS connections. This way, the bank is able to significantly reduce potential unauthorized access or interception of the data while it is in transit.\n```\n"
      ]
    },
    "Managed": true
  },
  {
    "ID": "aws_cis_v130_2_2_1",
    "Title": "2.2.1 Ensure EBS volume encryption is enabled",
    "Description": "Elastic Compute Cloud (EC2) supports encryption at rest when using the Elastic Block Store (EBS) service. While disabled by default, forcing encryption at EBS volume creation is supported.",
    "QueryID": "aws_ebs_volume_encryption_at_rest_enabled",
    "DocumentURI": "policies/aws_cis_v130_2_2_1.md",
    "ManualVerification": false,
    "Severity": "High",
    "Tags": {
      "category": [
        "Compliance"
      ],
      "cis": [
        "true"
      ],
      "cis_item_id": [
        "2.2.1"
      ],
      "cis_level": [
        "1,2"
      ],
      "cis_section_id": [
        "2.2"
      ],
      "cis_type": [
        "manual"
      ],
      "cis_version": [
        "v1.3.0"
      ],
      "plugin": [
        "aws"
      ],
      "service": [
        "AWS/EBS"
      ],
      "x-kaytu-explanation": [
        "High"
      ],
      "x-kaytu-noncompliance-cost": [
        "Non-compliance to the Elastic Compute Cloud (EC2) encryption control can lead to several consequences:\n\n1. **Increased Security Risks**: Without encryption, sensitive data stored on Elastic Block Store (EBS) volumes are more susceptible to unauthorized access, leakage, and other forms of cyber threats. This can jeopardize the security and integrity of the data and the overall system.\n\n2. **Regulatory Penalties**: Many industries require compliance with certain data protection regulations like GDPR, HIPAA, and PCI DSS among others. Non-compliance, which includes failure to encrypt stored data, can lead to hefty fines and penalties. The exact cost can significantly vary depending on the regulation and the extent of non-compliance.\n\n3. **Loss of Trust and Business Reputation**: A data breach resulting from inadequate data protection mechanisms like lack of encryption can lead to loss of customer trust and reputational damage. Both of these can impact the company's market position and may lead to loss of business.\n\n4. **Loss of Data**: In some severe cases, a lack of encryption can lead to total loss of data, particularly if an attack includes ransomware or other malicious software aimed at removing or altering data. The cost of data loss, which includes recovery and opportunity costs, can be significant.\n\n5. **Legal Costs**: Non-compliance may result in legal action, especially if the data breach involves access to sensitive personal data of customers or users. This will involve legal fees and possible compensation payouts.\n\nThe cost of non-compliance is therefore multifaceted, affecting not only the financial standing of the company but also its reputation, customer trust, and overall business operations. This underscores the importance of compliance with AWS controls like encryption."
      ],
      "x-kaytu-usefulness-example": [
        "The usefulness of AWS EC2 supporting encryption at rest with EBS is well demonstrated in the scenario of a financial company.\n\nExample:\n\nA financial technology company dealing with sensitive customer information such as Social Security numbers, credit card numbers and bank account details, has an obligation to protect this data to the best of their ability.\n\nIn this case, the company uses AWS EC2 instances for their various applications and services, and they store their customer's sensitive data on EBS volumes attached to these instances.\n\nThey mandate the use of encryption at rest, for all data stores, not just their customer databases, to prevent unauthorized access to this data, should anyone manage to gain unlawful access to their data stores.\n\nSo, whenever an EBS volume is created, the admin is forced to enable encryption. This encryption ensures that the data is unreadable to unauthorized users, even if they manage to gain access to it, thereby helping the company maintain the security and confidentiality of their customer's sensitive information."
      ]
    },
    "Managed": true
  }
]