Description: Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.
DocumentURI: ""
ID: aws_log_metric_filter_bucket_policy
Managed: true
ManualVerification: false
Query:
  Connector: AWS
  Engine: odysseus-v0.0.1
  ListOfTables:
  - aws_account
  - aws_cloudtrail_trail
  - aws_cloudwatch_alarm
  - aws_cloudwatch_log_metric_filter
  - aws_sns_topic_subscription
  PrimaryTable: aws_account
  QueryToExecute: "with filter_data as (\n  select\n    trail.account_id,\n    trail.name as trail_name,\n    trail.is_logging as is_logging,\n    split_part(trail.log_group_arn, ':', 7) as log_group_name,\n    filter.name as filter_name,\n    action_arn as topic_arn,\n    alarm.metric_name,\n    subscription.subscription_arn,\n    filter.filter_pattern,\n    filter.metric_transformation_name\n  from\n    aws_cloudtrail_trail as trail,\n    jsonb_array_elements(trail.event_selectors) as se,\n    aws_cloudwatch_log_metric_filter as filter,\n    aws_cloudwatch_alarm as alarm,\n    jsonb_array_elements_text(alarm.alarm_actions) as action_arn,\n    aws_sns_topic_subscription as subscription\n  where\n    trail.is_multi_region_trail is true\n    and trail.is_logging\n    and se ->> 'ReadWriteType' = 'All'\n    and trail.log_group_arn is not null\n    and filter.log_group_name = split_part(trail.log_group_arn, ':', 7)\n    and filter.filter_pattern ~ '\\s*\\$\\.eventSource\\s*=\\s*s3.amazonaws.com.+\\$\\.eventName\\s*=\\s*PutBucketAcl.+\\$\\.eventName\\s*=\\s*PutBucketPolicy.+\\$\\.eventName\\s*=\\s*PutBucketCors.+\\$\\.eventName\\s*=\\s*PutBucketLifecycle.+\\$\\.eventName\\s*=\\s*PutBucketReplication.+\\$\\.eventName\\s*=\\s*DeleteBucketPolicy.+\\$\\.eventName\\s*=\\s*DeleteBucketCors.+\\$\\.eventName\\s*=\\s*DeleteBucketLifecycle.+\\$\\.eventName\\s*=\\s*DeleteBucketReplication'\n    and alarm.metric_name = filter.metric_transformation_name\n    and subscription.topic_arn = action_arn\n)\nselect\n  distinct 'arn:' || a.partition || ':::' || a.account_id as resource,\n  a.kaytu_account_id as kaytu_account_id,\n  a.kaytu_resource_id as kaytu_resource_id,\n  case\n    when f.trail_name is null then 'alarm'\n    else 'ok'\n  end as status,\n  case\n    when f.trail_name is null then 'No log metric filter and alarm exist for S3 bucket policy changes.'\n    else filter_name || ' forwards events for S3 bucket policy changes.'\n  end as reason\n  , a.account_id\nfrom\n  aws_account as a\n  left join filter_data as f on a.account_id = f.account_id;\n"
Severity: high
Tags:
  category:
  - Compliance
  cis:
  - "true"
  cis_item_id:
  - "3.8"
  cis_level:
  - "1"
  cis_section_id:
  - "3"
  cis_type:
  - scored
  cis_version:
  - v1.2.0
  plugin:
  - aws
  service:
  - AWS/CloudWatch
  x-kaytu-explanation:
  - "# Real-Time Monitoring of API Calls with CloudTrail and CloudWatch Logs\n\nThis AWS control outlines a process for real-time monitoring of AWS API calls using the integration of AWS CloudTrail and CloudWatch Logs. \n\n## Setting Up a Metric Filter and Alarm for S3 Bucket Policy Changes\n\nAWS recommends setting up a metric filter and alarm to keep track of changes to S3 bucket policies. This can help ensure the security of your data stored in S3 buckets by alerting you when policies are modified.\n\n### Steps:\n\n1. Direct your CloudTrail Logs to CloudWatch Logs.\n2. Create a metric filter on the CloudWatch Logs group. To set up a filter for S3 bucket policy changes, use a filter pattern that matches the `SetBucketPolicy`, `DeleteBucketPolicy`, and `PutBucketPolicy` event names.\n3. Establish an alarm for the metric filter. Configure the alarm to notify you when it gets triggered.\n\nBy following these steps, you can effectively monitor your API calls and ensure the necessary security standards of your AWS environment. \n\nThe markup format above contains headers, lists, and additional formatting to provide structure and present information in a clear, organized manner."
  x-kaytu-noncompliance-cost:
  - |-
    The cost of non-compliance to the control which involves real-time monitoring of API calls via CloudTrail Logs directed to CloudWatch Logs could be significant.

    1. **Security & Compliance Risk:** 
        - Failure to monitor changes to S3 bucket policies may let malicious modifications go undetected. This can lead to unauthorized access to sensitive data inside the S3 bucket, causing data leaks or even data loss. 

    2. **Financial Costs:**
        - Any data breach or data loss could lead to financial damages. There might be costs associated with incident response, forensic investigation, recovery of lost data, reinforcing security measures and potential legal ramifications.

    3. **Operational Disruptions:**
        - In case of unauthorized alterations to S3 bucket policies, there might be interruptions in services or operations which rely on the data stored within the affected buckets. These disruptions can lead to lost business or decreased productivity.

    4. **Reputation Damage:**
        - Any data leak can lead to reputation damage, loss of customer trust and in some cases, loss of business. This can have long term negative effects on the company's image and revenue.

    5. **Potential Regulatory Fines:**
        - Depending on the industry and the jurisdiction of operation, the organization might also be subject to fines, sanctions, or other regulatory actions due to non-compliance with data protection laws or standards like GDPR, HIPAA etc. 

    It is, therefore, essential to adhere to the recommended control and implement real-time monitoring of changes to S3 bucket policies to alleviate these risks.
  x-kaytu-usefulness-example:
  - "For example, Imagine you're the manager of a large scale web application that involves the use of AWS S3 for storage of user data. You have a team of engineers with varying levels of access to your AWS services and resources. Given the sensitive nature of data, any modifications to the S3 bucket policies can potentially open up access to unauthorized users leading to data breaches.\n\nBy having real-time monitoring of API calls with CloudTrail Logs being directed to CloudWatch Logs, and setting up an alarm for changes to S3 bucket policies, you can ensure immediate alerts whenever an alteration is made. Such a feature would allow your team to investigate the event in a timely manner, verify if the change was authorized and necessary, as well as take immediate remediation steps if it was not. This ensures the security and integrity of your application's data stored in S3 buckets. \n\nHere is the Configuration in markup format:\n\n```yaml\n---\n  AWSTemplateFormatVersion: '2010-09-09'\n  Resources:\n    CloudWatchAlarm:\n      Type: 'AWS::CloudWatch::Alarm'\n      Properties:\n        AlarmName: \"s3-bucket-policy-changes\"\n        MetricName: \"S3BucketPolicyChanges\"\n        Namespace: \"AWS/CloudTrail\"\n        Statistic: \"SampleCount\"\n        Period: '300'\n        EvaluationPeriods: '1'\n        Threshold: '1'\n        ComparisonOperator: \"GreaterThanOrEqualToThreshold\"\n        AlarmActions: \n          - arn:aws:sns:*:*:NotifyMe  \n        AlarmDescription: \"Alarm if there is any change in S3 bucket Policies\"\n        Dimensions:\n          - Name: EventName\n            Value: PutBucketPolicy  \n        TreatMissingData: notBreaching\n```\n\nThis CloudFormation template creates a CloudWatch Alarm that triggers whenever there is a `PutBucketPolicy` event on any S3 bucket in your AWS environment. The alarm will publish a notification to an SNS topic (`NotifyMe` in this case), alerting you of the policy change."
Title: Ensure a log metric filter and alarm exist for S3 bucket policy changes
