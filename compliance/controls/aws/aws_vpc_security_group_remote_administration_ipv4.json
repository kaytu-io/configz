{
  "ID": "aws_vpc_security_group_remote_administration_ipv4",
  "Title": "Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports",
  "Description": "Security groups provide stateful filtering of ingress and egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.",
  "Query": {
    "Engine": "odysseus-v0.0.1",
    "QueryToExecute": "with bad_rules as (\n  select\n    group_id,\n    count(*) as num_bad_rules\n  from\n    aws_vpc_security_group_rule\n  where\n    type = 'ingress'\n    and (\n      cidr_ipv4 = '0.0.0.0/0'\n    )\n    and (\n        ( ip_protocol = '-1'      -- all traffic\n        and from_port is null\n        )\n        or (\n            from_port >= 22\n            and to_port <= 22\n        )\n        or (\n            from_port >= 3389\n            and to_port <= 3389\n        )\n    )\n  group by\n    group_id\n)\nselect\n  arn as resource,\n  kaytu_account_id as kaytu_account_id,\n  kaytu_resource_id as kaytu_resource_id,\n  case\n    when bad_rules.group_id is null then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when bad_rules.group_id is null then sg.group_id || ' does not allow ingress to port 22 or 3389 from 0.0.0.0/0.'\n    else  sg.group_id || ' contains ' || bad_rules.num_bad_rules || ' rule(s) that allow ingress to port 22 or 3389 from 0.0.0.0/0.'\n  end as reason\n  \n  , sg.region, sg.account_id\nfrom\n  aws_vpc_security_group as sg\n  left join bad_rules on bad_rules.group_id = sg.group_id;\n",
    "Connector": "AWS",
    "PrimaryTable": "aws_vpc_security_group",
    "ListOfTables": [
      "aws_vpc_security_group",
      "aws_vpc_security_group_rule"
    ]
  },
  "ManualVerification": false,
  "Severity": "critical",
  "Tags": {
    "category": [
      "Compliance"
    ],
    "cis": [
      "true"
    ],
    "cis_item_id": [
      "5.2"
    ],
    "cis_level": [
      "1"
    ],
    "cis_section_id": [
      "5"
    ],
    "cis_type": [
      "automated"
    ],
    "cis_version": [
      "v1.5.0"
    ],
    "plugin": [
      "aws"
    ],
    "service": [
      "AWS/VPC"
    ],
    "x-kaytu-explanation": [
      "AWS provides a feature called \"security groups\" which are essentially virtual firewalls for your AWS resources. These security groups control both inbound (ingress) and outbound (egress) network traffic. \n\nIngress filtering determines which types of incoming traffic will be allowed into your resource, while egress filtering controls what type of outgoing traffic will be allowed. Both ingress and egress traffic can be customized according to different rules and protocols such as IP, PORT, and protocol (TCP/UDP). \n\nA vital part of maintaining proper security in your AWS environment is managing these security groups effectively. AWS recommends that remote server administration ports, such as SSH (port 22) and RDP (port 3389), should not have unrestricted inbound access. This practice limits the potential attack surface as exposure to the open internet could make these ports ideal targets for hackers seeking unauthorized access.\n\n```markup\n# Security Groups in AWS\n\nSecurity groups in AWS play a crucial role in protecting your resources by acting as a virtual firewall. They provide stateful filtering of both incoming (**ingress**) and outgoing (**egress**) network traffic. \n\n## Best Practice\n\nIt's a recommended practice not to allow unrestricted ingress access to specific ports associated with remote server administration. These ports include; \n\n- **SSH (Port 22)**: Used for secure, encrypted communication between two untrusted hosts over an insecure network.\n- **RDP (Port 3389)**: Stands for Remote Desktop Protocol. It's a proprietary protocol developed by Microsoft to perform remote desktop services.\n\n\u003e Note: Unrestricted access to these ports can make your AWS resources vulnerable to security risks and hack attempts.\n```"
    ],
    "x-kaytu-noncompliance-cost": [
      "Non-compliance to this AWS control could result in several costs including:\n\n1. **Security Vulnerabilities:** Allowing unrestricted access to remote server administration ports such as SSH and RDP can expose the AWS resources to potential threats and attacks. This could lead to situations where confidential data is stolen or the integrity of the server is compromised.\n\n2. **Financial Loss:** In case of a cyberattack, not only will the company have to pay for the recovery of data and systems, but there can also be severe financial penalties in case of regulatory non-compliance.\n\n3. **Reputation Damage:** A security breach, resulting from the non-compliance, could damage the reputation of the organization leading to loss of costs as users might lose trust.\n\n4. **Operational Disruption:** A successful attack due to non-compliance could disrupt business operations, this could cause downtime and could affect the company's productivity and revenue. \n\n5. **Regulatory Fines:** Certain industries have strict network security regulations, and non-compliance could result in significant fines. \n\nHere's a markup format example:\n\n```\n- **Security Vulnerabilities:** Allowing _unrestricted access_ to server administration ports can expose the AWS resources to potential attacks.\n- **Financial Loss:** There can be severe financial penalties in case of _non-compliance_ which could be due to recovery of data or regulatory penalties. \n- **Reputation Damage:** A _security breach_ could damage the reputation of the organization leading to loss of trust.\n- **Operational Disruption:** _Non-compliance_ could disrupt business operations, causing _downtime_ and could affect productivity and revenue.\n- **Regulatory Fines:** Non-compliance could result in _significant fines_ due to strict network security regulations in certain industries.\n\n```"
    ],
    "x-kaytu-usefulness-example": [
      "Access to AWS resources must be closely controlled to prevent malicious activity like data theft, server attacks, or unintended configurations that might disrupt operations. In this respect, Security groups play a useful role in securing your AWS resources. \n\nFor example, consider an organization that is operating important services on EC2 instances. There are two main types of user interaction with these EC2 instances:\n\n1. Administrators accessing the instances for management and maintenance purposes using SSH or RDP.\n2. Customers or internal users accessing services hosted on the instances (like a web application on port 80 or 443).\n\nUnrestricted access to administrative ports (like SSH 22 and RDP 3389) would be a major security risk. An attacker could potentially brute force these ports for access or exploit any open vulnerabilities.\n\nIn this scenario, using security groups effectively restricts access to these admins-only ports, creating a secure environment. A security group can be configured to allow SSH (port 22) and RDP (port 3389) connections only from specific IP ranges (such as the company's IP range), which greatly reduces the danger of unauthorized access.\n\nThis configuration would look something like this:\n\n```markup\n[ \n   {\n      \"IpProtocol\": \"tcp\",\n      \"FromPort\": 22,\n      \"ToPort\": 22,\n      \"IpRanges\": [ { \"CidrIp\": \"203.0.113.0/24\" } ]\n   },\n   {\n      \"IpProtocol\": \"tcp\",\n      \"FromPort\": 3389,\n      \"ToPort\": 3389,\n      \"IpRanges\": [ { \"CidrIp\": \"203.0.113.0/24\" } ]\n   }\n]\n```\n\nIn this example, only IPs within the range \"203.0.113.0/24\" would be allowed to initiate SSH or RDP connections to EC2 instances associated with this security group. Consequently, the potential attack surface would be significantly reduced."
    ]
  },
  "Managed": true
}