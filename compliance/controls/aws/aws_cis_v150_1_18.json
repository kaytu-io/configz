{
  "ID": "aws_cis_v150_1_18",
  "Title": "Ensure IAM instance roles are used for AWS resource access from instances",
  "Description": "AWS access from within AWS instances can be done by either encoding AWS keys into AWS API calls or by assigning the instance to a role which has an appropriate permissions policy for the required access. \"AWS Access\" means accessing the APIs of AWS in order to access AWS resources or manage AWS account resources.",
  "Query": null,
  "ManualVerification": true,
  "Severity": "high",
  "Tags": {
    "category": [
      "Compliance"
    ],
    "cis": [
      "true"
    ],
    "cis_item_id": [
      "1.18"
    ],
    "cis_level": [
      "2"
    ],
    "cis_section_id": [
      "1"
    ],
    "cis_type": [
      "manual"
    ],
    "cis_version": [
      "v1.5.0"
    ],
    "plugin": [
      "aws"
    ],
    "service": [
      "AWS/IAM"
    ],
    "x-kaytu-explanation": [
      "When you work with AWS services, there are two general ways for your AWS instances (like EC2 instances), to interact or communicate with other AWS services:\n\n1. **AWS Keys**: You can include AWS keys in your API calls. These keys - also known as Access Key ID and Secret Access Key - are like a username and password that allows your AWS instance to interact with other AWS services. This is not recommended as it can lead to security risks if compromised.\n\n2. **Roles**: AWS also allows assigning roles to AWS instances. A role does not have standard long-term credentials (password or access keys) associated with it. Instead, it uses temporary security tokens that AWS Security Token Service (STS) provides. A role includes a set of permissions that determine what the identity (user, application, or service) can and cannot do in AWS. It provides a secured way to grant permissions to your AWS service without sharing Access Key ID and Secret Access Key.\n\n\"AWS Access\" refers to the ability to use AWS APIs to interact with AWS resources or manage resources in your AWS account. This interaction could be anything from launching an EC2 instance, reading a file from an S3 bucket, or making changes to your AWS account settings. These operations require certain permissions, which is governed by AWS Identity and Access Management (IAM) policies. If an AWS service doesn't have required permissions, it cannot interact with other services or resources."
    ],
    "x-kaytu-noncompliance-cost": [
      "Non-compliance to this control can lead to several financial, securicial, and reputational costs:\n\n1. **Security Breach Costs**: If AWS access isn't securely managed according to these principles, it could lead to unauthorized access to your AWS resources. This can result in the theft, damage, or unauthorized modification of data, which can lead to considerable financial loss.\n\n2. **Non-Compliance Penalties**: Depending on the specific industry or jurisdiction that your business operates in, not following appropriate access management principles for cloud resources could violate regulations or laws, resulting in fines or penalties.\n\n3. **Operational Downtime**: In the event of a security breach or mishandling of access keys, you may have to halt operations to do damage control, fix the issue, or investigate the breach. This operational downtime can be costly.\n\n4. **Reputational Damage**: If your AWS resources are breached due to poor access control, it could result in significant reputational damage, impacting your relationships with customers and partners, and potentially resulting in lost business.\n\n5. **Remediation Costs**: If your AWS access management is found to be deficient, you may need to invest in remediation, including identifying and implementing more secure management practices, potentially hiring consultants or more experienced personnel, and conducting thorough testing and audits.\n\n6. **Increased Audit Costs**: Failure to comply with this control could lead to more frequent and intrusive audits, which can be costly both in terms of time and money.\n\nTherefore, it's important to adhere to secure AWS access principles, such as encoding AWS keys into API calls and assigning instances to roles with appropriate permission policies. This not only enhances security but also avoids non-compliance costs."
    ],
    "x-kaytu-usefulness-example": [
      "An example worth considering would be deploying a web application in an AWS environment. This web application might require read and write access to an Amazon DynamoDB table. Without role-based access control, you would have to hard-code the AWS access keys into the application code, risking potential security issues. \n\nHowever, with the AWS role-based system, you wouldn't have to explicitly provide your AWS credentials within the instances to make requests to other AWS services. Instead, you would create an IAM role with the necessary permissions to access the DynamoDB table, and then you can assign this role to the EC2 instance running the web application. This provides a more secure and scalable method of managing AWS access within the AWS instances. \n\nHere's a break down in markup format:\n\n```\n1. Create an IAM Role:\n  a. Navigate to IAM console on AWS.\n  b. Choose 'Roles' and then 'Create role'.\n  c. Select 'AWS service' as the type of trusted entity and 'EC2' as the service that will use this role. Proceed with 'Next: Permissions'.\n  d. In permissions, choose the policy that grants required permissions to the DynamoDB table. Proceed with 'Next: Tags'.\n  e. You can optionally add tags. Proceed with 'Next: Review'.\n  f. Name the role appropriately and describe its purpose. Confirm creation with 'Create role'.\n\n2. Assign the Role to an EC2 Instance:\n  a. Navigate to EC2 dashboard.\n  b. Choose 'Instances' and select the instance that will run the web application.\n  c. Under 'Actions', navigate to 'Security' then 'Modify IAM role'.\n  d. Select the role that was just created from the drop-down menu. Save changes with 'Apply'.\n```\nNow, the web application can securely access the necessary DynamoDB resources without embedding AWS keys directly in the code."
    ]
  },
  "Managed": true
}