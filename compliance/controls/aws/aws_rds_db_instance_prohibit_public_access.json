{
  "ID": "aws_rds_db_instance_prohibit_public_access",
  "Title": "RDS DB instances should prohibit public access",
  "Description": "Manage access to resources in the AWS Cloud by ensuring that Amazon Relational Database Service (Amazon RDS) instances are not public.",
  "Query": {
    "Connector": "AWS",
    "Engine": "odysseus-v0.0.1",
    "ListOfTables": [
      "aws_rds_db_instance"
    ],
    "PrimaryTable": "aws_rds_db_instance",
    "QueryToExecute": "select\n  arn as resource,\n  kaytu_account_id as kaytu_account_id,\n  kaytu_resource_id as kaytu_resource_id,\n  case\n    when publicly_accessible then 'alarm'\n    else 'ok'\n  end status,\n  case\n    when publicly_accessible then title || ' publicly accessible.'\n    else title || ' not publicly accessible.'\n  end reason\n  \n  , region, account_id\nfrom\n  aws_rds_db_instance;\n"
  },
  "DocumentURI": "",
  "ManualVerification": false,
  "Severity": "high",
  "Tags": {
    "audit_manager_control_tower": [
      "true"
    ],
    "category": [
      "Compliance"
    ],
    "cis_controls_v8_ig1": [
      "true"
    ],
    "cisa_cyber_essentials": [
      "true"
    ],
    "fedramp_low_rev_4": [
      "true"
    ],
    "fedramp_moderate_rev_4": [
      "true"
    ],
    "ffiec": [
      "true"
    ],
    "gxp_21_cfr_part_11": [
      "true"
    ],
    "hipaa_final_omnibus_security_rule_2013": [
      "true"
    ],
    "hipaa_security_rule_2003": [
      "true"
    ],
    "nist_800_171_rev_2": [
      "true"
    ],
    "nist_800_53_rev_4": [
      "true"
    ],
    "nist_800_53_rev_5": [
      "true"
    ],
    "nist_csf": [
      "true"
    ],
    "pci_dss_v321": [
      "true"
    ],
    "plugin": [
      "aws"
    ],
    "rbi_cyber_security": [
      "true"
    ],
    "service": [
      "AWS/RDS"
    ],
    "soc_2": [
      "true"
    ],
    "x-kaytu-explanation": [
      "\u003cdescription\u003e\nThe control focus here is on managing access to AWS cloud resources by making sure that instances of the Amazon Relational Database Service (RDS) are not public. Amazon RDS is a web service that makes it easier to set up, operate, and scale a relational database in the AWS cloud environment. By ensuring that these Instances are not publically accessible, users can maintain control of their data, aiding in the prevention of unauthorized access or potential data loss. This rule is managed and maintained within the security configurations of the AWS account.\n\u003c/description\u003e"
    ],
    "x-kaytu-noncompliance-cost": [
      "Non-compliance to this AWS control can result in a number of potential costs:\n\n1. **Security Risks** - Making your Amazon RDS instances publicly accessible creates an unnecessary security risk, exposing your data to potential cyber-attacks like SQL injections, unauthorized access, or data breaches. \n\n2. **Financial Loss** - Any data breach or unauthorized access may result in financial loss. This could be direct, such as loss of sales or customers, or indirect, such as fines for failing to protect customer data. \n\n3. **Non-compliance Fines** - Depending on the industry and the nature of the data held in the RDS, non-compliance to this security measure could result in penalties, fines, or sanctions from regulatory bodies.\n\n4. **Reputation Damage** - Incidents resulting from this non-compliance can lead to significant reputational damage. Customers may lose their trust in your ability to protect their data leading to loss of business.\n\n5. **Operational Disruption** - Criminal activities, such as a ransomware attack, might not only steal data but also disrupt services causing downtime or loss of service availability.\n\nTo mitigate these costs, AWS recommends that RDS instances are not publicly accessible and should be adequately guarded by appropriate security group settings, network access control lists (NACLs), and other protective measures."
    ],
    "x-kaytu-usefulness-example": [
      "Instance 1:\nBefore launching the AWS Control, a company discovered a serious security breach. An unauthorized person had gained access to vital customer data stored in their Amazon RDS instances because they had accidentally been set up as accessible to the public. Increasing numbers of such breaches filled the company with concern over potential loom of legal suits and costs of remediating the breaches.\n\nOnce the company launched the AWS Control and ensured that Amazon RDS instances were not public, unauthorized access got radically mitigated. With AWS refusing all traffic that was not explicitly allowed by a security group, the company could prevent future incidents. Keeping such a security blanket was crucial in their efforts to protect customer data and maintain their reputation.\n\nInstance 2:\nA retail company had its database containing financial transactions and sensitive customer information stored on their Amazon RDS instances. Any leak or unauthorized access to this information could have severe consequences both financially and legally for the company.\n\nUsing the 'Manage access to resources in the AWS Cloud', the company ensured that their Amazon RDS instances were not public, shielding them from unapproved access. Consequently, this measure significantly enhanced the company's data security, allowing them to meet standards for data protection and customer privacy, thereby building customer trust in the brand. \n\nInstance 3:\nA healthcare company storing patient profiles and records in their Amazon RDS instances brought the AWS Control into action to ensure that their RDS instances were not public. Notably, unauthorized access to such sensitive data could lead to violation of regulations like HIPAA.\n\nBy managing access to their AWS resources and making sure that their Amazon RDS instances were private, they secured protection against potential data breaches. Therefore, they could avoid severe fines and legal action associated with violations of healthcare regulations."
    ]
  },
  "Managed": true
}