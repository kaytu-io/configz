Description: Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.
DocumentURI: ""
ID: aws_log_metric_filter_cloudtrail_configuration
Managed: true
ManualVerification: false
Query:
  Connector: AWS
  Engine: odysseus-v0.0.1
  ListOfTables:
  - aws_account
  - aws_cloudtrail_trail
  - aws_cloudwatch_alarm
  - aws_cloudwatch_log_metric_filter
  - aws_sns_topic_subscription
  PrimaryTable: aws_account
  QueryToExecute: "with filter_data as (\n  select\n    trail.account_id,\n    trail.name as trail_name,\n    trail.is_logging,\n    split_part(trail.log_group_arn, ':', 7) as log_group_name,\n    filter.name as filter_name,\n    action_arn as topic_arn,\n    alarm.metric_name,\n    subscription.subscription_arn,\n    filter.filter_pattern\n  from\n    aws_cloudtrail_trail as trail,\n    jsonb_array_elements(trail.event_selectors) as se,\n    aws_cloudwatch_log_metric_filter as filter,\n    aws_cloudwatch_alarm as alarm,\n    jsonb_array_elements_text(alarm.alarm_actions) as action_arn,\n    aws_sns_topic_subscription as subscription\n  where\n    trail.is_multi_region_trail is true\n    and trail.is_logging\n    and se ->> 'ReadWriteType' = 'All'\n    and trail.log_group_arn is not null\n    and filter.log_group_name = split_part(trail.log_group_arn, ':', 7)\n    and filter.filter_pattern ~ '\\s*\\$\\.eventName\\s*=\\s*CreateTrail.+\\$\\.eventName\\s*=\\s*UpdateTrail.+\\$\\.eventName\\s*=\\s*DeleteTrail.+\\$\\.eventName\\s*=\\s*StartLogging.+\\$\\.eventName\\s*=\\s*StopLogging'\n    and alarm.metric_name = filter.metric_transformation_name\n    and subscription.topic_arn = action_arn\n)\nselect\n  distinct 'arn:' || a.partition || ':::' || a.account_id as resource,\n  a.kaytu_account_id as kaytu_account_id,\n  a.kaytu_resource_id as kaytu_resource_id,\n  case\n    when f.trail_name is null then 'alarm'\n    else 'ok'\n  end as status,\n  case\n    when f.trail_name is null then 'No log metric filter and alarm exist for CloudTrail configuration changes.'\n    else filter_name || ' forwards events for CloudTrail configuration changes.'\n  end as reason\n  , a.account_id\nfrom\n  aws_account as a\n  left join filter_data as f on a.account_id = f.account_id;\n"
Severity: high
Tags:
  category:
  - Compliance
  cis:
  - "true"
  cis_item_id:
  - "3.5"
  cis_level:
  - "1"
  cis_section_id:
  - "3"
  cis_type:
  - scored
  cis_version:
  - v1.2.0
  plugin:
  - aws
  service:
  - AWS/CloudWatch
  x-kaytu-explanation:
  - "AWS CloudTrail is a service that provides visibility into users activity by recording API calls made on an account. By directing these logs to CloudWatch, you can create realtime metrics to continually monitor and react to changes.\n\nThe control mentions about setting a metric filter and alarm to monitor changes to CloudTrail's configurations. This helps in detecting any modifications made in the configurations which could potentially affect your auditing capabilities uselessly.\n\nHere is a brief description of the control in markup format:\n\n```markdown\n# AWS CloudTrail and CloudWatch Integration\n\nAWS CloudTrail logs all API calls made within an AWS account. These logs can be routed to AWS CloudWatch for real-time monitoring. \n\n## Metric Filter and Alarm\n\nTo detect changes to CloudTrail configurations, it's recommended to create a metric filter and corresponding alarm in CloudWatch. This ensures that any changes made to the CloudTrail configurations triggers an alarm.\n\nThe setup includes:\n\n1. Directing CloudTrail Logs to CloudWatch logs.\n2. Establishing a metric filter on CloudWatch.\n3. Setting an alarm for the metric filter.\n\nThis allows you to take immediate action upon any changes made in the configurations which can potentially impact your AWS resources.\n\nUsing this control, you can enhance your security and ensure that your AWS configurations are tampered with. \n```"
  x-kaytu-noncompliance-cost:
  - "The cost of non-compliance to the said AWS control can have significant implications. Here's an explanation in the markup format:\n\n- **Security Risk**: One of the major costs of non-compliance is the increased risk to security. If changes to CloudTrail's configurations are not monitored in real-time, unauthorized activities or misconfigurations may go unnoticed. This can potentially lead to security breaches, data loss, or data exposure, leading to significant harm to a business.\n\n- **Regulatory Penalties**: Regulatory bodies like GDPR demand stringent auditing, logging and monitoring requirements. Non-compliance to such practices may result in heavy fines or penalties.\n\n- **Operational Inefficiencies**: Without real-time monitoring, diagnosing and rectifying issues can become time-consuming and lead to prolonged system downtime. \n\n- **Reputation Damage**: In case of a security breach, apart from the financial implications, the reputation of the company may also be at stake â€” loss of customer trust is often hard to regain.\n\n- **Financial Implication**: The cost of remediation after an incident is often significantly higher than the cost of implementing preventative measures like real-time monitoring. This includes the cost to repair and recover the affected systems, cost to investigate the incident, potential ransoms, legal costs, and any regulatory fines.\n\nIn essence, not having real-time monitoring for detecting changes to CloudTrail's configurations can lead to a variety of costly implications. This reinforces the need for vigilant monitoring in ensuring the security and integrity of the business's AWS environment."
  x-kaytu-usefulness-example:
  - |-
    Envision a scenario where your organization is heavily relying on Amazon Web Services (AWS). To maintain proper configuration and security, your teams need real-time monitoring of API calls. They often have to review AWS CloudTrail logs for any changes or anomalies in API calling patterns.

    Instead of manually doing this, you use CloudTrail logs directed to CloudWatch Logs. With this setup, they can monitor API calls in real-time, allowing for quick detection and response to any suspicious activity.

    Additionally, a metric filter and alarm can be set up specifically for detecting any changes to CloudTrail configurations. This becomes very useful when you want to ensure that no unauthorized changes are made which could potentially leave your system vulnerable.

    For instance, if an unauthorized person or a malicious software tries to change CloudTrail's configurations, CloudWatch can notify the respective teams immediately. This way, you can bolster the security of your AWS cloud environment, prevent potential data breaches, and ensure uninterrupted operations.
Title: Ensure a log metric filter and alarm exist for CloudTrail configuration changes
