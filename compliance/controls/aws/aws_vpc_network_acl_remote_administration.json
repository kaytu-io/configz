{
  "ID": "aws_vpc_network_acl_remote_administration",
  "Title": "Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports",
  "Description": "The Network Access Control List (NACL) function provide stateless filtering of ingress and egress network traffic to AWS resources. It is recommended that no NACL allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.",
  "Query": {
    "Connector": "AWS",
    "Engine": "odysseus-v0.0.1",
    "ListOfTables": [
      "aws_vpc_network_acl"
    ],
    "PrimaryTable": "aws_vpc_network_acl",
    "QueryToExecute": "with bad_rules as (\n  select\n    network_acl_id,\n    count(*) as num_bad_rules\n  from\n    aws_vpc_network_acl,\n    jsonb_array_elements(entries) as att\n  where\n    att -\u003e\u003e 'Egress' = 'false' -- as per aws egress = false indicates the ingress\n    and (\n      att -\u003e\u003e 'CidrBlock' = '0.0.0.0/0'\n      or att -\u003e\u003e 'Ipv6CidrBlock' =  '::/0'\n    )\n    and att -\u003e\u003e 'RuleAction' = 'allow'\n    and (\n      (\n        att -\u003e\u003e 'Protocol' = '-1' -- all traffic\n        and att -\u003e\u003e 'PortRange' is null\n      )\n      or (\n        (att -\u003e 'PortRange' -\u003e\u003e 'From') :: int \u003c= 22\n        and (att -\u003e 'PortRange' -\u003e\u003e 'To') :: int \u003e= 22\n        and att -\u003e\u003e 'Protocol' in('6', '17')  -- TCP or UDP\n      )\n      or (\n        (att -\u003e 'PortRange' -\u003e\u003e 'From') :: int \u003c= 3389\n        and (att -\u003e 'PortRange' -\u003e\u003e 'To') :: int \u003e= 3389\n        and att -\u003e\u003e 'Protocol' in('6', '17')  -- TCP or UDP\n    )\n  )\n  group by\n    network_acl_id\n)\nselect\n  'arn:' || acl.partition || ':ec2:' || acl.region || ':' || acl.account_id || ':network-acl/' || acl.network_acl_id  as resource,\n  acl.kaytu_account_id as kaytu_account_id,\n  acl.kaytu_resource_id as kaytu_resource_id,\n  case\n    when bad_rules.network_acl_id is null then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when bad_rules.network_acl_id is null then acl.network_acl_id || ' does not allow ingress to port 22 or 3389 from 0.0.0.0/0 or ::/0.'\n    else acl.network_acl_id || ' contains ' || bad_rules.num_bad_rules || ' rule(s) allowing ingress to port 22 or 3389 from 0.0.0.0/0 or ::/0.'\n  end as reason\n  \n  , acl.region, acl.account_id\nfrom\n  aws_vpc_network_acl as acl\n  left join bad_rules on bad_rules.network_acl_id = acl.network_acl_id;\n"
  },
  "DocumentURI": "",
  "ManualVerification": false,
  "Severity": "high",
  "Tags": {
    "category": [
      "Compliance"
    ],
    "cis": [
      "true"
    ],
    "cis_item_id": [
      "5.1"
    ],
    "cis_level": [
      "1"
    ],
    "cis_section_id": [
      "5"
    ],
    "cis_type": [
      "automated"
    ],
    "cis_version": [
      "v1.3.0"
    ],
    "plugin": [
      "aws"
    ],
    "service": [
      "AWS/VPC"
    ],
    "x-kaytu-explanation": [
      "```markdown\n# AWS - Network Access Control List (NACL)\n\nThe **Network Access Control List (NACL)** is a function designed for the purpose of executing stateless filtering on both inbound (ingress) and outbound (egress) network traffic which is directed towards AWS resources. \n\nThe primary function of NACL is to put a restriction on the incoming access to key server administration ports. This control is crucial in order to avoid unrestricted access. Generally, access to two primary ports are usually restricted:\n\n1. **SSH to Port 22**: Secure Shell (SSH) is a network protocol that provides administrators with a secure way to access a remote computer. AWS recommends that a NACL should prevent unrestricted access to port 22, the default port for SSH connections.\n\n2. **RDP to Port 3389**: Remote Desktop Protocol (RDP) is a protocol developed by Microsoft, which provides a user with a graphical interface to connect to another computer over a network connection. AWS recommends that a NACL should prevent unrestricted access to port 3389, the default port for RDP connections.\n\nHaving this control in place helps bolster the overall security of AWS resources, protecting them from unauthorized and potentially harmful, network traffic.\n```"
    ],
    "x-kaytu-noncompliance-cost": [
      "The cost of non-compliance to the above AWS control, specifically regarding permitting unrestricted ingress access to remote server administration ports such as SSH on port 22 and RDP on port 3389, could potentially be significant. A few potentially incurred costs are listed below:\n\n1. **Security Breaches:** If ports 22 (SSH) and 3389 (RDP) are left open, it could lead to unauthorized access to the server. This poses a severe security risk as it could lead to data breaches. The cost of a data breach can be significant, including regulatory fines, the cost of investigating and resolving the breach, potential lawsuits, and the loss of customer trust.\n\n2. **Resource Misuse:** An attacker with SSH or RDP access could misuse the server for their purposes like running malicious activities, forcing the company to pay for unauthorized resource consumption.\n\n3. **Compliance Violations:** If the company is subject to regulatory standards like HIPAA, GDPR, or PCI-DSS, unsecured access could lead to non-compliance, resulting in fines and penalties.\n\n4. **Loss of Service:** If an attacker gains access, they could potentially disrupt the services running on the server. This could lead to downtime for the business â€”losing sales and customers in the process.\n\nIn summary, the cost of non-compliance can be steep, with businesses potentially facing financial losses, reputational damage, loss of customer trust, and legal penalties. All these underscore the essential nature of following controls such as the Network Access Control List (NACL) in AWS. So, it's always advised to secure the remote server administration ports to avoid any unrestricted ingress access."
    ],
    "x-kaytu-usefulness-example": [
      "The usefulness of the Network Access Control List (NACL) can be illustrated with a following scenario:\n\nImagine a company that operates an e-commerce website which is hosted within an AWS EC2 instance. The company's website must handle a continuous influx of transactions from users all over the world which means it has to be open to public access. However, the same EC2 instance also contains sensitive customer data which needs to be accessed and managed by the company's IT team.\n\nWithout NACLs, the company would need to expose its IT team's access ports (like SSH on port 22 or RDP on port 3389) to the entire internet, greatly increasing the risk of unauthorized access and potential data breaches.\n\nBy implementing NACLs, the company could configure the rules to only permit traffic to those ports from specific, trusted IP addresses (such as the company's office IP). This would allow their IT team to continue managing the server while minimizing the risk of exposing sensitive data.\n\nHere's the scenario in markup format:\n\n```\nCompany Scenario:\n  - Operating an E-Commerce website hosted on AWS EC2\n  - EC2 Instance access points include:\n      - Public traffic to handle user transactions\n      - IT Team's access for server management\n  - Risk: Unrestricted access to IT ports could lead to data breaches\n\nSolution with NACL:\n  - Configure NACL rules to:\n      - Allow public access for user transactions\n      - Restrict access to SSH (port 22) and RDP (port 3389) to company's office IP only\n  - Result: Server management possible without exposing sensitive data\n```\n\nBy using NACLs, the company can efficiently manage network security by allowing necessary traffic and denying potentially malicious access."
    ]
  },
  "Managed": true
}