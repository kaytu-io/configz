Description: To help protect data at rest, ensure that encryption is enabled for your Amazon Relational Database Service (Amazon RDS) instances.
DocumentURI: ""
ID: aws_rds_db_instance_encryption_at_rest_enabled
Managed: true
ManualVerification: false
Query:
  Connector: AWS
  Engine: odysseus-v0.0.1
  ListOfTables:
  - aws_rds_db_instance
  PrimaryTable: aws_rds_db_instance
  QueryToExecute: |
    select
      arn as resource,
      kaytu_account_id as kaytu_account_id,
      kaytu_resource_id as kaytu_resource_id,
      case
        when storage_encrypted then 'ok'
        else 'alarm'
      end as status,
      case
        when storage_encrypted then title || ' encrypted at rest.'
        else title || ' not encrypted at rest.'
      end as reason
      
      , region, account_id
    from
      aws_rds_db_instance;
Severity: high
Tags:
  category:
  - Compliance
  cis_controls_v8_ig1:
  - "true"
  cisa_cyber_essentials:
  - "true"
  fedramp_moderate_rev_4:
  - "true"
  ffiec:
  - "true"
  gdpr:
  - "true"
  gxp_21_cfr_part_11:
  - "true"
  gxp_eu_annex_11:
  - "true"
  hipaa_final_omnibus_security_rule_2013:
  - "true"
  hipaa_security_rule_2003:
  - "true"
  nist_800_171_rev_2:
  - "true"
  nist_800_53_rev_4:
  - "true"
  nist_800_53_rev_5:
  - "true"
  nist_csf:
  - "true"
  pci_dss_v321:
  - "true"
  plugin:
  - aws
  rbi_cyber_security:
  - "true"
  service:
  - AWS/RDS
  soc_2:
  - "true"
  x-kaytu-explanation:
  - "# AWS Control: Encryption for Amazon RDS Instances\n\nAmazon Web Service (AWS) provides a control function to enhance security. One such control is the encryption of data stored on the Amazon Relational Database Service (RDS).\n\n### Overview\n\nEncryption is a critical security feature that prevents unauthorized access to data. By encrypting data at rest in your Amazon RDS instances, you ensure that confidentiality and integrity of your data are maintained, thereby preventing unauthorized personnel from accessing sensitive information.\n\n### How it Works\n\nAmazon RDS uses AWS Key Management Service (KMS) for handling keys employed in encrypting the data at rest. When you instruct Amazon RDS to encrypt your data, each data block in the storage layer gets encrypted by the AES-256 encryption algorithm and a key. Only when someone with access to the necessary keys requests the data, it gets decrypted.\n\n### Enabling Encryption\n\n- To enable encryption for an Amazon RDS instance, go to your Amazon RDS dashboard, select your db instance, and navigate to 'Modify'.\n- Check the box for 'Enable encryption' and select the master key in the dropdown menu.\n- Select 'Apply Immediately' to apply changes.\n- Do note that the encryption cannot be removed once it has been enabled, hence ensure that this is a necessary step before proceeding.\n\nThe above-stated control is a strong mechanism to prevent unauthorized access to data and serves as a crucial component for security in AWS."
  x-kaytu-noncompliance-cost:
  - "Non-compliance to the aforementioned AWS control (encryption of Amazon RDS instances) can have several impacts including:\n\n1. **Security Implications**: Non-encrypted data is vulnerable to theft and malicious activity. If a malicious actor gains access to your RDS instance, they can read, modify, or delete your data. This could have serious ramifications, particularly if your data contains sensitive or proprietary information.\n\n2. **Financial Consequences**: Data breaches can lead to financial loss. Depending on the nature of the data and the extent of the breach, companies can face penalties, lawsuits, or lose business due to a loss of trust.\n\n3. **Regulatory Fines and Legal Consequences**: Certain industries (e.g., finance, healthcare) have regulations requiring data to be encrypted at rest. Non-compliance can result in fines or legal action.\n\n4. **Reputation Damage**: If a data breach is made public, it can damage a company's reputation, making it harder to acquire or retain customers.\n\nTo summarize, while it might seem unimportant or an area where you could cut corners, non-compliance to this AWS control could end up costing much more in the end. Therefore, encryption should be a key component of your overall security strategy.\n"
  x-kaytu-usefulness-example:
  - |-
    In the scenario of a financial services application, with financial transaction information, personal identifiable information, and other sensitive data stored in an Amazon RDS instance, it is paramount to ensure the protection of this critical data. 

    ```
    For example, 

    John is a solution architect for a financial tech startup. His company has a web application that handles hundreds of transactions each day. All the clients' transactional data are stored on an Amazon RDS MySQL instance. To ensure the security of this sensitive data, John must ensure that encryption is enabled for the RDS instance.

    To do this, he makes sure to use AWS Key Management Service (AWS KMS) when setting up the RDS instance. Using AWS KMS, keys can be centrally managed and it helps to meet compliance and regulatory requirements for data security. John applied the AES-256 encryption algorithm, providing a high level of security.

    By enabling encryption for the RDS instance, John ensures that all data saved to the storage associated with the RDS instance is encrypted and the protection of sensitive financial data is ensured. It helps the company to maintain trust with their customers, meet regulatory requirements, and prevent potential data breaches.
    ```

    In this way, the AWS control of Amazon RDS encryption is useful in providing enhanced security for sensitive data stored on Amazon RDS.
Title: RDS DB instance encryption at rest should be enabled
