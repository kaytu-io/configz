{
  "ID": "aws_iam_root_last_used",
  "Title": "Eliminate use of the root user for administrative and daily tasks",
  "Description": "With the creation of an AWS account, a root user is created that cannot be disabled or deleted. That user has unrestricted access to and control over all resources in the AWS account. It is highly recommended that the use of this account be avoided for everyday tasks.",
  "Query": {
    "Connector": "AWS",
    "Engine": "odysseus-v0.0.1",
    "ListOfTables": [
      "aws_iam_credential_report"
    ],
    "PrimaryTable": "aws_iam_credential_report",
    "QueryToExecute": "select\n  user_arn as resource,\n  kaytu_account_id as kaytu_account_id,\n  kaytu_resource_id as kaytu_resource_id,\n  case\n    when password_last_used \u003e= (current_date - interval '90' day) then 'alarm'\n    when access_key_1_last_used_date \u003c= (current_date - interval '90' day)  then 'alarm'\n    when access_key_2_last_used_date \u003c= (current_date - interval '90' day)  then 'alarm'\n    else 'ok'\n  end as status,\n  case\n    when password_last_used is null then 'Root never logged in with password.'\n    else 'Root password used ' || to_char(password_last_used , 'DD-Mon-YYYY') || ' (' || extract(day from current_timestamp - password_last_used) || ' days).'\n  end ||\n  case\n    when access_key_1_last_used_date is null then ' Access Key 1 never used.'\n    else ' Access Key 1 used ' || to_char(access_key_1_last_used_date , 'DD-Mon-YYYY') || ' (' || extract(day from current_timestamp - access_key_1_last_used_date) || ' days).'\n  end ||\n    case\n    when access_key_2_last_used_date is null then ' Access Key 2 never used.'\n    else ' Access Key 2 used ' || to_char(access_key_2_last_used_date , 'DD-Mon-YYYY') || ' (' || extract(day from current_timestamp - access_key_2_last_used_date) || ' days).'\n  end as reason\n  , account_id\nfrom\n  aws_iam_credential_report\nwhere\n  user_name = '\u003croot_account\u003e';\n"
  },
  "DocumentURI": "",
  "ManualVerification": false,
  "Severity": "high",
  "Tags": {
    "category": [
      "Compliance"
    ],
    "cis": [
      "true"
    ],
    "cis_item_id": [
      "1.7"
    ],
    "cis_level": [
      "1"
    ],
    "cis_section_id": [
      "1"
    ],
    "cis_type": [
      "automated"
    ],
    "cis_version": [
      "v1.3.0"
    ],
    "plugin": [
      "aws"
    ],
    "service": [
      "AWS/IAM"
    ],
    "x-kaytu-explanation": [
      "`# AWS Root User\n\nWhen an AWS account is created, a **root user** is automatically generated. This root user has unlimited access and control over all the resources within the AWS account. It should be noted that this user cannot be disabled or deleted.\n\nThe root user possesses all-encompassing permissions, making it a powerful tool within the system. However, due to the extensive access it provides, it's **highly recommended** to prevent using this account for routine tasks. Utilizing the root user for common tasks can pose potential security risks and it's advisable to manage access strictly.\n\nIn order to maintain secure practices, consider creating IAM users with specific permissions or roles for daily operational tasks. This can limit the potential damage in the event of a security breach.\n\nFor heightened security, AWS users are strongly discouraged from sharing their root user credentials and instead delegate access to resources using AWS Identity and Access Management (IAM).`\n"
    ],
    "x-kaytu-noncompliance-cost": [
      "Non-compliance to this AWS control could result in several potential costs, risks, and repercussions:\n\n- **Security Breach:** The AWS root account possesses powerful permissions which could be exploited if the security of the account is compromised. This can potentially lead to unauthorized access to sensitive data or malicious actions such as alteration or deletion of data, disruption of services, or possibly data theft.\n\n- **Operational Risk:** Using the root account for daily tasks increases the risk of accidental changes or deletions. Significant disruptions could occur from unintentional changes made to critical services or resources.\n\n- **Financial Consequences:** If an attacker gains root access, they can spin up resources or services which can result in unexpected costs. The attacker could utilize expensive AWS services, or use the company's computing resources for their personal gain (like crypto mining), causing a significant rise in AWS expenses.\n\n- **Regulatory Compliance:** Many industries have compliance regulations requiring certain levels of data security and operational control. The unrestricted use of a root account could violate these regulations, potentially leading to fines, sanctions, or loss of certifications.\n\n- **Reputation Damage:** A security breach, particularly one that impacts customers or leads to loss of sensitive data, can cause serious damage to a company's reputation and customer trust, affecting the long-term business prospects.\n\nTherefore, it is essential to enforce and ensure the strict usage control of the root user account. Managers should implement requisite measures such as enabling multi factor authentication(MFA), creating individual IAM users with least privilege access, implementing restriction policies and continuing to monitor and audit root account activities."
    ],
    "x-kaytu-usefulness-example": [
      "This AWS Control is highly useful in several scenarios. Here is an instance showing its significance:\n\n```markdown\nConsider a software development company that uses AWS services for their infrastructure needs. They require full access to all services and resources of their AWS account for administrative purposes like billing setup, managing users, regulating permissions etc. \n\nAt the same time, they need to restrict everyday access of the team to prevent any unauthorized changes or accidental deletion of important services. Here, the AWS root user comes into play. It has unrestricted access to all services and resources, making it perfect for such administrative actions.\n\nThe company admin can use the AWS root user account for major changes and management, while the developers and other team members can be given limited access based on their roles and responsibilities. This way, the use of the root user is minimized and restricted for crucial tasks only, thereby ensuring better security and reliability.\n```\nThis instance demonstrates how important this AWS Control is for maintaining the privacy, integrity, and security of software development operations."
    ]
  },
  "Managed": true
}