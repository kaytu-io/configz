Description: AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 45 or greater days be deactivated or removed.
DocumentURI: ""
ID: aws_iam_user_unused_credentials_45
Managed: true
ManualVerification: false
Query:
  Connector: AWS
  Engine: odysseus-v0.0.1
  ListOfTables:
  - aws_iam_credential_report
  PrimaryTable: aws_iam_credential_report
  QueryToExecute: |
    select
      user_arn as resource,
      kaytu_account_id as kaytu_account_id,
      kaytu_resource_id as kaytu_resource_id,
      case
        --root_account will have always password associated even though AWS credential report returns 'not_supported' for password_enabled
        when user_name = '<root_account>'
          then 'info'
        when password_enabled and password_last_used is null and password_last_changed < (current_date - interval '45' day)
          then 'alarm'
        when password_enabled and password_last_used  < (current_date - interval '45' day)
          then 'alarm'
        when access_key_1_active and access_key_1_last_used_date is null and access_key_1_last_rotated < (current_date - interval '45' day)
          then 'alarm'
        when access_key_1_active and access_key_1_last_used_date  < (current_date - interval '45' day)
          then 'alarm'
        when access_key_2_active and access_key_2_last_used_date is null and access_key_2_last_rotated < (current_date - interval '45' day)
          then 'alarm'
        when access_key_2_active and access_key_2_last_used_date  < (current_date - interval '45' day)
          then 'alarm'
        else 'ok'
      end status,
      user_name ||
        case
          when not password_enabled
            then ' password not enabled,'
          when password_enabled and password_last_used is null
            then ' password created ' || to_char(password_last_changed, 'DD-Mon-YYYY') || ' never used,'
          else
            ' password used ' || to_char(password_last_used, 'DD-Mon-YYYY') || ','
        end ||
        case
          when not access_key_1_active
            then ' key 1 not enabled,'
          when access_key_1_active and access_key_1_last_used_date is null
            then ' key 1 created ' || to_char(access_key_1_last_rotated, 'DD-Mon-YYYY') || ' never used,'
          else
            ' key 1 used ' || to_char(access_key_1_last_used_date, 'DD-Mon-YYYY') || ','
        end ||
          case
          when not access_key_2_active
            then ' key 2 not enabled.'
          when access_key_2_active and access_key_2_last_used_date is null
            then ' key 2 created ' || to_char(access_key_2_last_rotated, 'DD-Mon-YYYY') || ' never used.'
          else
            ' key 2 used ' || to_char(access_key_2_last_used_date, 'DD-Mon-YYYY') || '.'
        end
      as reason
      , account_id
    from
      aws_iam_credential_report;
Severity: high
Tags:
  category:
  - Compliance
  cis:
  - "true"
  cis_item_id:
  - "1.12"
  cis_level:
  - "1"
  cis_section_id:
  - "1"
  cis_type:
  - automated
  cis_version:
  - v1.4.0
  plugin:
  - aws
  service:
  - AWS/IAM
  x-kaytu-explanation:
  - "**AWS Identity and Access Management (IAM) Users and Credentials**\n\nAWS IAM involves creating and managing AWS users and groups and assigning them permission to access AWS resources. AWS users can access these resources by using different types of credentials such as:\n\n- Passwords\n- Access keys\n\nThese credentials allow the IAM users to access AWS resources programmatically, via APIs, AWS CLI, or SDKs, or non-programmatically, via the AWS Management Console. \n\n**Credential Rotation Policy**\n\nFor maintaining secure access, credentials that have been unused for 45 or more days should be deactivated or removed. This rotation policy ensures that any potential compromise or misuse of long-unused credentials can be mitigated. \n\nHere's the markup for this content:\n\n```\n**AWS Identity and Access Management (IAM) Users and Credentials**\n\nAWS IAM involves creating and managing AWS users and groups and assigning them permission to access AWS resources. AWS users can access these resources by using different types of credentials such as:\n\n- Passwords\n- Access keys\n\nThese credentials allow the IAM users to access AWS resources programmatically, via APIs, AWS CLI, or SDKs, or non-programmatically, via the AWS Management Console. \n\n**Credential Rotation Policy**\n\nFor maintaining secure access, credentials that have been unused for 45 or more days should be deactivated or removed. This rotation policy ensures that any potential compromise or misuse of long-unused credentials can be mitigated. \n```\nSimply, copy the markup text and paste it into a markdown file or text editor that supports markdown formatting, such as Visual Studio Code, Atom, or Markdown Pad."
  x-kaytu-noncompliance-cost:
  - |-
    The cost of non-compliance to this AWS control can be associated to both financial and security risks. Here are some areas to consider:

    1. **Security Risk:** Unused credentials, particularly access keys, pose a potential security risk. If these credentials are compromised, they provide an entry point for unauthorized users to the AWS resources. Regularly auditing and removing unused credentials reduces this risk.

    2. **Financial Costs:** If compromised, these stale credentials can lead to unwanted access to AWS services that could increase the AWS costs. This could come in the form of data theft, data transfers or operation of AWS resources without your knowledge.

    3. **Non-compliance with Regulations and Standards:** Failure to periodically review and remove unused credentials may result in non-compliance with regulations like the GDPR, PCI-DSS, HIPAA, or other cybersecurity standards, which could lead to penalties and damage to a company's reputation.

    In summary, maintaining unused credentials increases the attack surface for potential bad actors, which could result in financial losses, a damaged reputation due to a data breach, as well as penalties for non-compliance with regulations and standards.
  x-kaytu-usefulness-example:
  - |
    The recommended control of deactivating or removing unused AWS credentials after 45 days can be beneficial in the following scenario:

    Consider a large software development company that heavily relies on AWS for diverse tasks such as hosting web applications, data storage, machine learning tasks, etc. It is common for such an organization to have multiple IAM users with various types of credentials like passwords or access keys for accessing different AWS resources.

    Over time, some IAM users might not remain active due to reasons like a change in job role, employees leaving the organization, or simply the completion of certain projects. If such inactive users have access to sensitive resources, it poses security risks since the unused credentials can potentially be exploited for unauthorized access to AWS resources.

    This is where our control comes into play. By deactivating or removing IAM credentials that haven't been used for 45 or more days, the company can significantly minimize the potential security risks. It helps the company to maintain only the necessary access keys and reduce the possibility of outdated credentials being misused. 

    Following this practice also helps the company to stay compliant with regulatory requirements and adhere to the principle of least privilege (only giving necessary access required for a user to perform his/her job), enhancing the overall security posture of their AWS environment.
Title: Ensure credentials unused for 45 days or greater are disabled
