{
  "ID": "azure_network_security_group_ssh_access_restricted",
  "Title": "Ensure that SSH access is restricted from the internet",
  "Description": "Disable SSH access on network security groups from the Internet.",
  "Query": {
    "Connector": "Azure",
    "Engine": "odysseus-v0.0.1",
    "ListOfTables": [
      "azure_network_security_group",
      "azure_subscription"
    ],
    "PrimaryTable": "azure_network_security_group",
    "QueryToExecute": "with network_sg as (\n  select\n    distinct name sg_name\n  from\n    azure_network_security_group nsg,\n    jsonb_array_elements(security_rules) sg,\n    jsonb_array_elements_text(sg -\u003e 'properties' -\u003e 'destinationPortRanges' || (sg -\u003e 'properties' -\u003e 'destinationPortRange') :: jsonb) dport,\n    jsonb_array_elements_text(sg -\u003e 'properties' -\u003e 'sourceAddressPrefixes' || (sg -\u003e 'properties' -\u003e 'sourceAddressPrefix') :: jsonb) sip\n  where\n    sg -\u003e 'properties' -\u003e\u003e 'access' = 'Allow'\n    and sg -\u003e 'properties' -\u003e\u003e 'direction' = 'Inbound'\n    and (sg -\u003e 'properties' -\u003e\u003e 'protocol' ilike 'TCP' or sg -\u003e 'properties' -\u003e\u003e 'protocol' = '*')\n    and sip in ('*', '0.0.0.0', '0.0.0.0/0', 'Internet', 'any', '\u003cnw\u003e/0', '/0')\n    and (\n      dport in ('22', '*')\n      or (\n        dport like '%-%'\n        and split_part(dport, '-', 1) :: integer \u003c= 22\n        and split_part(dport, '-', 2) :: integer \u003e= 22\n      )\n    )\n)\nselect\n  sg.id resource,\n  sg.kaytu_account_id as kaytu_account_id,\n  sg.kaytu_resource_id as kaytu_resource_id,\n  case\n    when nsg.sg_name is null then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when nsg.sg_name is null\n      then sg.title || ' restricts SSH access from internet.'\n    else sg.title || ' allows SSH access from internet.'\n  end as reason\n  \n  , sg.resource_group as resource_group\n  , sub.display_name as subscription\nfrom\n  azure_network_security_group sg\n  left join network_sg nsg on nsg.sg_name = sg.name\n  join azure_subscription sub on sub.subscription_id = sg.subscription_id;\n"
  },
  "DocumentURI": "",
  "ManualVerification": false,
  "Severity": "high",
  "Tags": {
    "category": [
      "Compliance"
    ],
    "cis": [
      "true"
    ],
    "cis_item_id": [
      "6.2"
    ],
    "cis_level": [
      "1"
    ],
    "cis_section_id": [
      "6"
    ],
    "cis_type": [
      "automated"
    ],
    "cis_version": [
      "v1.3.0"
    ],
    "plugin": [
      "azure"
    ],
    "service": [
      "Azure/Network"
    ],
    "x-kaytu-explanation": [
      "# Disable SSH Access on Network Security Groups from the Internet\n\nSecure Shell (SSH) is a protocol that provides secure command-line access to your instances. To enhance the security of your AWS environment, it is recommended to disable SSH access from the internet. This can help protect your instances from potential brute force or other malicious attacks.\n\nBy default, Amazon EC2 instances are assigned a security group that allows SSH access from any IP address (0.0.0.0/0). To disable this, you can modify the inbound rules of your security groups.\n\nIt’s important to take note that disabling SSH access from the internet doesn’t mean you can’t SSH into your instances. You can do so from other instances within your VPC, or use AWS Systems Manager Session Manager, which is a fully managed AWS service that allows you to manage your instances entirely in the cloud.\n\nHere are the steps to disable SSH access from the internet:\n\n1. Log in to the AWS Management Console.\n\n2. Go to EC2 Dashboard \u003e Security Groups.\n\n3. Select the security group associate with the instance that you want to restrict SSH access to.\n\n4. In the 'Inbound rules' tab, find the rule that allows SSH (port 22) access from 'Source' 0.0.0.0/0 or ::/0.\n\n5. Select the 'Edit inbound rules' button.\n\n6. Remove or modify the rule that allows all inbound traffic on port 22, then click 'Save rules'.\n\nBy following these steps, you will effectively disable SSH access to your instances from the internet and protect your environment from potential security threats.\n \n**Important Note**: Ensure you have other means of accessing your instances (e.g., AWS Systems Manager Session Manager), before disabling SSH access from the internet."
    ],
    "x-kaytu-noncompliance-cost": [
      "The cost of non-compliance to the AWS Control of disabling SSH access on network security groups from the Internet can be significant and varied.\n\n1. **Security Breach:** Probably the most serious cost of non-compliance is the potential for a security breach. SSH (Secure Shell) is a common method used by hackers to gain unauthorized access to systems. If SSH access is not disabled, it could be exploited by malicious actors to gain control over your AWS resources, which can lead to data breaches, loss of sensitive information, or unauthorized activities. \n\n2. **Financial Losses:** A security breach could result in severe financial losses. These could result from the theft of sensitive financial information, the costs associated with addressing and rectifying the breach, potential fines for regulatory non-compliance, or from a loss of business due to damage to your reputation. \n\n3. **Regulatory Fines and Legal Consequences:** Depending on the industry and the type of data you are handling, not following best practices like this one could lead to regulatory fines and legal issues. For example, for companies dealing with personal data of EU citizens, non-compliance with GDPR's security requirements could result in fines of up to €20M or 4% of the annual worldwide turnover, whichever is higher.\n\n4. **Loss of Trust and Reputation:** If your security measures are found to be lacking and this leads to a data breach or other security incident, it could seriously damage your company’s reputation, leading to a loss of trust from your customers or users.\n\n5. **System or Service Disruptions:** If SSH access is not disabled and your system security is compromised, it could lead to disruption of your services. This could lead to loss of business, or increased costs as you try to rectify the problem and get your services up and running again.\n\nTherefore, complying with the AWS Control of disabling SSH access on network security groups from the Internet is not just a matter of following recommended best practices, but it is also crucial for the security, stability, and financial health of enterprises."
    ],
    "x-kaytu-usefulness-example": [
      "Disabling SSH access on network security groups from the Internet is a useful AWS control in many scenarios. For instance, imagine a company named XYZ has all its applications hosted on AWS. \n\nTheir infrastructure includes various servers, with sensitive customer data stored. If SSH access is left enabled from the Internet, it could be a significant security risk. Malicious attackers can attempt to gain unauthorized access to these servers. \n\nTo avoid this, XYZ uses this AWS control to disable SSH access from the Internet. This allows only internal connections - connections from within the private network - to access the servers via SSH, significantly reducing the risk of an external breach.\n\nThis step substantially enhances the security of their infrastructure in AWS, safeguarding their sensitive data and ensuring smooth, disruption-free business operations.\n\n```\nmarkup:\n```yaml\n- type: aws:EC2:SecurityGroupMysqlCheck\n  related_events:\n  - df073651-07b8-4695-855b-a3b491a125a7\n  relationships:\n  - resource_id: sg-123456789\n    resource_type: Security Group\n    name: CONTAINS\n    resource_id: nacl-1a2b3c4d \n    resource_type: Network ACL\n  ...\n  configuration:\n    groupId: sg-123456789\n    groupName: Secure-Group\n    ipPermissions:\n      - fromPort: 22\n        ipProtocol: tcp\n        ipRanges:\n        - cidrIp: 0.0.0.0/0\n        toPort: 22\n      ...\n  supplementary_configuration:\n    VpcId: vpc-1a2b3c4d\n  compliance:\n    status: NON_COMPLIANT\n  ...\n```\n```"
    ]
  },
  "Managed": true
}