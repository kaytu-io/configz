{
  "ID": "azure_keyvault_with_non_rbac_secret_expiration_set",
  "Title": "Ensure that the Expiration Date is set for all Secrets in Non-RBAC Key Vaults",
  "Description": "Ensure that all Secrets in Non Role Based Access Control (RBAC) Azure Key Vaults have an expiration time set.",
  "Query": {
    "Connector": "Azure",
    "Engine": "odysseus-v0.0.1",
    "ListOfTables": [
      "azure_key_vault",
      "azure_key_vault_secret",
      "azure_subscription"
    ],
    "PrimaryTable": "azure_key_vault_secret",
    "QueryToExecute": "with non_rbac_vault as (\n  select\n    name\n  from\n    azure_key_vault\n  where not enable_rbac_authorization\n)\nselect\n  kvs.id as resource,\n  kvs.kaytu_account_id as kaytu_account_id,\n  kvs.kaytu_resource_id as kaytu_resource_id,\n  case\n    when v.name is null then 'skip'\n    when enabled and expires_at is null then 'alarm'\n    else 'ok'\n  end as status,\n  vault_name || ' key ' || kvs.name ||\n  case\n    when v.name is null then ' RBAC enabled vault.'\n    when enabled and expires_at is null then ' expiration date not set.'\n    when not enabled then ' disabled.'\n    else ' expiration date set to ' || to_char(expires_at, 'DD-Mon-YYYY') || '.'\n  end as reason\n  \n  , kvs.resource_group as resource_group\n  , sub.display_name as subscription\nfrom\n  azure_key_vault_secret kvs\n  left join non_rbac_vault as v on v.name = kvs.vault_name,\n  azure_subscription sub\nwhere\n  sub.subscription_id = kvs.subscription_id;\n"
  },
  "DocumentURI": "",
  "ManualVerification": false,
  "Severity": "high",
  "Tags": {
    "category": [
      "Compliance"
    ],
    "cis": [
      "true"
    ],
    "cis_item_id": [
      "8.4"
    ],
    "cis_level": [
      "1"
    ],
    "cis_section_id": [
      "8"
    ],
    "cis_type": [
      "automated"
    ],
    "cis_version": [
      "v1.4.0"
    ],
    "plugin": [
      "azure"
    ],
    "service": [
      "Azure/KeyVault"
    ],
    "x-kaytu-explanation": [
      "This AWS Control is about setting expiration times for all Secrets in Non Role Based Access Control (RBAC) Azure Key Vaults. This ensures that secrets (like API keys, passwords, certificates, etc.) are not left indefinitely accessible, which could potentially lead to security risks. \n\nHere is a markup format:\n\n### AWS Control: Expiration for Secrets in Non RBAC Azure Key Vaults\n\nThis control aims to implement proper security measures for sensitive data stored in Azure Key Vaults. \n\n#### Control Description:\n\n**Ensure that all Secrets in Non Role Based Access Control (RBAC) Azure Key Vaults have an expiration time set.**\n\nKey Vaults are used to securely store and tightly control access to tokens, passwords, certificates, API keys, and other secrets. It's crucial to set an expiration time for these secrets to prevent unlimited access, which could lead to potential security breaches.\n\n#### Rationale:\n\nSetting an expiration time for secrets in Azure Key Vaults can significantly improve the security posture. This control ensures:\n\n- Limiting the time a secret can be accessed reduces the chance of unauthorized access.\n- Regularly updating secrets can prevent misuse of stale or compromised ones.\n\n#### Audit:\n\nTo verify the implementation of this control, use:\n\n1. Azure portal, Azure CLI, Azure PowerShell, or Azure Rest API to get the list of all the secrets in the Key Vault.\n2. From the list, check each secret for an expiration date. If any secret doesn't have an expiration date set, it's a finding.\n\n#### Remediation:\n\nTo mitigate this issue, for each secret in the Key Vault:\n\n1. Set an expiration date using the Azure portal, Azure CLI, Azure PowerShell, or Azure Rest API.\n2. Review and update the expiration dates regularly, to ensure the secret doesn't remain valid indefinitely.\n\n#### Compliance:\n\nThis control is necessary for compliance with security policies and standards that require time-bound access to secrets."
    ],
    "x-kaytu-noncompliance-cost": [
      "Non-compliance with this control can end up costing an organization in several ways:\n\n1. **Security Incidents:** Secrets that do not expire can be used indefinitely if they fall into the wrong hands, leading to potential data breaches or other security incidents. This can cause significant financial loss due to regulatory fines, loss of business, and remediation costs.\n\n2. **Regulatory non-compliance:** Many industries such as healthcare (HIPAA), the payment card industry (PCI DSS), and finance (GLBA, SOX) mandate specific requirements for sensitive data handling which includes setting an expiration time for secrets. Non-compliance may result in hefty fines, penalties, or even legal consequences.\n\n3. **Loss of Trust:** Any data breach resulting from mismanaged access control can result in loss of customer trust and potential business, further resulting in financial loss.\n\n4. **Operational Disruption:** Security incidents due to compromised credentials can disrupt regular business operations until resolved, again leading to a financial hit.\n\n5. **Monitoring and Management Overhead:** Persistent, indefinitely valid secrets create management and monitoring issues – it's harder to keep track of access if the access keys or secrets don't expire.\n\nHere's a markup version for better clarity:\n\n```\n- **Security Incidents:** Persistent secrets pose a prolonged vulnerability that can result in serious security incidents if misused, leading to financial loss due to regulatory fines and remediation costs.\n\n- **Regulatory non-compliance:** Non-compliance with industry-specific regulations around data handling can result in severe penalties.\n\n- **Loss of Trust:** Any form of data breach due to poor access control can lead to significant loss of customer trust and potential business.\n\n- **Operational Disruption:** A security incident due to indefinitely valid secrets can disrupt business operations, leading to financial repercussions.\n\n- **Monitoring and Management Overhead:** Persistent secrets add unnecessary complexity to access monitoring and management.\n```\n"
    ],
    "x-kaytu-usefulness-example": [
      "```markdown\nAs an IT manager at XYZ Company, we utilize AWS Control alongside Azure Key Vaults for managing our sensitive data such as keys, passwords, and certificates. However, without appropriate controls, these can become vulnerabilities. \n\nSo, to strengthen security, I implemented a rule using AWS Control to ensure that all Secrets in Non Role Based Access Control (RBAC) Azure Key Vaults have an expiration time set. This rule would ensure that these secrets couldn’t be used indefinitely if they were to fall into the wrong hands.\n\nExample:\n\nOne day, a batch of keys accidentally leaked, but since we had this measure in place, the leaked keys auto-expired after the set period, making them useless. This control proved beneficial as it managed to prevent potential unauthorized access and saved us from a severe data breach.\n```\n"
    ]
  },
  "Managed": true
}