Description: Based on business needs or criticality of data/databases hosted a SQL server, it is recommended that the TDE protector is encrypted by a key that is managed by the data owner (Customer-managed key).
DocumentURI: ""
ID: azure_cosmosdb_account_uses_private_link
Managed: true
ManualVerification: false
Query:
  Connector: Azure
  Engine: odysseus-v0.0.1
  ListOfTables:
  - azure_cosmosdb_account
  - azure_subscription
  PrimaryTable: azure_cosmosdb_account
  QueryToExecute: |
    with cosmosdb_private_connection as (
      select
        distinct a.id
      from
        azure_cosmosdb_account as a,
        jsonb_array_elements(private_endpoint_connections) as connection
      where
        connection -> 'properties' -> 'privateLinkServiceConnectionState' ->> 'status' = 'Approved'
    )
    select
      a.id as resource,
      a.kaytu_account_id as kaytu_account_id,
      a.kaytu_resource_id as kaytu_resource_id,
      case
        when c.id is null then 'alarm'
        else 'ok'
      end as status,
      case
        when c.id is null then a.name || ' not uses private link.'
        else a.name || ' uses private link.'
      end as reason
      
      , a.resource_group as resource_group
      , sub.display_name as subscription
    from
      azure_cosmosdb_account as a
      left join cosmosdb_private_connection as c on c.id = a.id,
      azure_subscription as sub
    where
      sub.subscription_id = a.subscription_id;
Severity: medium
Tags:
  category:
  - Compliance
  cis:
  - "true"
  cis_item_id:
  - 4.5.2
  cis_level:
  - "2"
  cis_section_id:
  - "4.5"
  cis_type:
  - manual
  cis_version:
  - v1.5.0
  plugin:
  - azure
  service:
  - Azure/SQL
  x-kaytu-explanation:
  - "**Azure Control Statement:**\nBased on business needs or criticality of data/databases hosted on a SQL server, it is recommended that the TDE protector is encrypted by a key that is managed by the data owner (Customer-managed key).\n\n**Explanation:**\n- *Control Category:* Data Security\n- *Control Type:* Transparent Data Encryption (TDE) Key Management\n- *Control Objective:* Ensure secure encryption of the TDE protector for SQL Server hosted on Azure.\n- *Rationale:* The level of encryption for the TDE protector should align with the business needs or criticality of the data and databases.\n- *Best Practice:* Utilize a Customer-Managed Key for encrypting the TDE protector.\n- *Key Management Responsibility:* The data owner is responsible for managing the Customer-Managed Key.\n\n**Implementation Guidance:**\n- Assess the business needs and criticality of data to determine the appropriate level of encryption for the TDE protector.\n- Choose a Customer-Managed Key for TDE protector encryption to maintain control over the key management process.\n- Implement and manage the Customer-Managed Key securely to ensure the integrity and confidentiality of the TDE protector.\n\n**Impact on Security:**\n- Enhances the security posture by allowing data owners to have direct control over the encryption key used for TDE protection.\n- Aligns encryption practices with the specific security requirements of the hosted data and databases.\n\n**Note:**\nTransparent Data Encryption (TDE) is a technology that encrypts SQL Server, Azure SQL Database, and Azure Synapse Analytics (formerly SQL Data Warehouse) data files, log files, and backup files. Encrypting the TDE protector with a Customer-Managed Key provides an additional layer of security and control over the encryption process.\n"
  x-kaytu-noncompliance-cost:
  - "**Azure Control: Encryption of TDE Protector with Customer-Managed Key**\n\n*Recommendation:*\nBased on business needs or criticality of data/databases hosted on a SQL server, it is recommended that the Transparent Data Encryption (TDE) protector is encrypted by a key that is managed by the data owner (Customer-managed key).\n\n*Cost of Non-Compliance:*\nFailure to comply with this recommendation may result in the following costs:\n\n- **Data Security Risks:** The TDE protector contains encryption keys that secure sensitive data. Non-compliance could expose these keys, leading to potential unauthorized access, data breaches, and compromised confidentiality.\n\n- **Regulatory Penalties:** Depending on the industry and geographic location, there may be data protection regulations mandating specific encryption practices. Non-compliance could lead to regulatory fines and legal consequences.\n\n- **Reputation Damage:** Data breaches and non-compliance with security best practices can significantly harm an organization's reputation. Loss of customer trust and confidence can have long-lasting negative effects on the business.\n\n- **Operational Disruptions:** In the event of a security incident or breach, there may be operational disruptions, downtime, and additional resources required to remediate the situation. This can impact business continuity and incur unexpected costs.\n\n*Conclusion:*\nEnsuring compliance with the recommended practice of encrypting the TDE protector with a Customer-managed key is crucial for safeguarding data, meeting regulatory requirements, maintaining a positive reputation, and minimizing the potential financial and operational consequences associated with non-compliance.\n"
  x-kaytu-usefulness-example:
  - "# Azure TDE with Customer-Managed Key (CMK) Use Case\n\n## Business Scenario\n\nIn our organization, we host sensitive data and databases on Azure SQL Server. The criticality of this data requires robust security measures to protect against unauthorized access and ensure compliance with regulatory standards.\n\n## Requirement\n\nAs per our security policy and based on the criticality of the hosted data, it is mandated that the Transparent Data Encryption (TDE) protector for our SQL Server databases must be encrypted using a key that is managed by us, the data owner. This is to ensure complete control over the encryption keys and enhance the overall security posture of our database environment.\n\n## Solution with Azure TDE and Customer-Managed Key (CMK)\n\nTo meet this requirement, we have implemented Azure Transparent Data Encryption (TDE) with Customer-Managed Key (CMK). This configuration ensures that the encryption key used to protect our SQL Server databases is in our sole control, providing an additional layer of security.\n\n### Benefits:\n\n1. **Enhanced Security:**\n   - Encryption keys are managed by us, the data owner, ensuring full control and ownership over the keys used for TDE.\n   - Mitigates the risk of unauthorized access to sensitive data through the use of a customer-managed key.\n\n2. **Compliance:**\n   - Meets regulatory requirements by allowing us to demonstrate control and management of encryption keys, a crucial aspect of compliance audits.\n\n3. **Flexibility:**\n   - Provides flexibility in key lifecycle management, including rotation and revocation, according to our organization's security policies.\n\n4. **Integration with Azure Key Vault:**\n   - Enables seamless integration with Azure Key Vault for secure storage and management of customer-managed keys.\n\n## Implementation Details\n\nTo implement Azure TDE with Customer-Managed Key (CMK) for our SQL Server, the following steps were taken:\n\n1. **Key Creation:**\n   - A customer-managed key was created in Azure Key Vault specifically for SQL Server TDE.\n\n2. **Configuration in SQL Server:**\n   - The SQL Server was configured to use Transparent Data Encryption (TDE) with the customer-managed key stored in Azure Key Vault.\n\n3. **Monitoring and Management:**\n   - Regular monitoring of key usage and management tasks, such as key rotation, are performed as part of our ongoing security practices.\n\n## Conclusion\n\nBy implementing Azure TDE with Customer-Managed Key (CMK), we have strengthened the security of our SQL Server databases, met compliance requirements, and ensured that encryption keys remain under our exclusive control. This proactive approach aligns with our commitment to safeguarding sensitive data and maintaining a robust security posture.\n"
Title: Ensure That Private Endpoints Are Used Where Possible
