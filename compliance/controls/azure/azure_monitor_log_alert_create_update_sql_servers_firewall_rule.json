{
  "ID": "azure_monitor_log_alert_create_update_sql_servers_firewall_rule",
  "Title": "Ensure that Activity Log Alert exists for Create or Update SQL Server Firewall Rule",
  "Description": "Create an activity log alert for the Create or Update SQL Server Firewall Rule event.",
  "Query": {
    "Connector": "Azure",
    "Engine": "odysseus-v0.0.1",
    "ListOfTables": [
      "azure_log_alert",
      "azure_subscription"
    ],
    "PrimaryTable": "azure_log_alert",
    "QueryToExecute": "with alert_rule as\n(\n  select\n    alert.id as alert_id,\n    alert.name as alert_name,\n    alert.enabled,\n    alert.location,\n    alert.subscription_id\n  from\n    azure_log_alert as alert,\n    jsonb_array_elements_text(scopes) as sc\n  where\n    alert.location = 'Global'\n    and alert.enabled\n    and sc = '/subscriptions/' || alert.subscription_id\n    and\n    (\n      ( alert.condition -\u003e 'allOf' @\u003e '[{\"equals\":\"Administrative\",\"field\":\"category\"}]'\n      and alert.condition -\u003e 'allOf' @\u003e '[{\"field\": \"resourceType\", \"equals\": \"microsoft.sql/servers/firewallrules\"}]'\n      and alert.condition -\u003e 'allOf' @\u003e '[{\"field\": \"operationName\", \"equals\": \"Microsoft.Sql/servers/firewallRules/write\"}]'\n      )\n      or\n      (\n        alert.condition -\u003e 'allOf' @\u003e '[{\"equals\":\"Administrative\",\"field\":\"category\"}]'\n        and alert.condition -\u003e 'allOf' @\u003e '[{\"field\": \"resourceType\", \"equals\": \"microsoft.sql/servers/firewallrules\"}]'\n        and jsonb_array_length(alert.condition -\u003e 'allOf') = 2\n      )\n    )\n    limit 1\n)\nselect\n  sub.subscription_id as resource,\n  sub.kaytu_account_id as kaytu_account_id,\n  sub.kaytu_resource_id as kaytu_resource_id,\n  case\n    when count(a.subscription_id) \u003e 0 then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when count(a.subscription_id) \u003e 0 then 'Activity Log Alert exists for Create or Update SQL Server Firewall Rule.'\n    else 'Activity Log Alert does not exists for Create or Update SQL Server Firewall Rule.'\n  end as reason\n  \n  , sub.display_name as subscription\nfrom\n  azure_subscription sub\n  left join alert_rule a on sub.subscription_id = a.subscription_id\ngroup by\n  sub.kaytu_account_id,\n  sub.kaytu_resource_id,\n  sub._ctx,\n  sub.subscription_id,\n  sub.display_name;\n"
  },
  "DocumentURI": "",
  "ManualVerification": false,
  "Severity": "medium",
  "Tags": {
    "category": [
      "Compliance"
    ],
    "cis": [
      "true"
    ],
    "cis_item_id": [
      "5.2.7"
    ],
    "cis_level": [
      "1"
    ],
    "cis_section_id": [
      "5.2"
    ],
    "cis_type": [
      "automated"
    ],
    "cis_version": [
      "v1.5.0"
    ],
    "plugin": [
      "azure"
    ],
    "service": [
      "Azure/Monitor"
    ],
    "x-kaytu-explanation": [
      "This AWS control refers to setting up an alert system to monitor and notify you about the creation or update of SQL Server Firewall Rule event.\n\nPresented in the Extensible Markup Language (XML), it may look something like this:\n\n```xml\n\u003cAWSCloudTrail\u003e\n  \u003ceventName\u003eCreate or Update SQL Server Firewall Rule Event\u003c/eventName\u003e\n  \u003ceventSource\u003eaws.sqlserver\u003c/eventSource\u003e\n  \u003crequestParameters\u003e\n    \u003ccreate\u003e\n      \u003cfirewallRuleName\u003estring\u003c/firewallRuleName\u003e\n      \u003cstartIpAddress\u003estring\u003c/startIpAddress\u003e\n      \u003cendIpAddress\u003estring\u003c/endIpAddress\u003e\n    \u003c/create\u003e\n    \u003cupdate\u003e\n      \u003cfirewallRuleName\u003estring\u003c/firewallRuleName\u003e\n      \u003cstartIpAddress\u003estring\u003c/startIpAddress\u003e\n      \u003cendIpAddress\u003estring\u003c/endIpAddress\u003e\n    \u003c/update\u003e\n    \u003clogStreamName\u003estring\u003c/logStreamName\u003e\n  \u003c/requestParameters\u003e\n  \u003cresponseElements\u003e\n    \u003calarmName\u003estring\u003c/alarmName\u003e\n    \u003calarmActions\u003e\n      \u003csnsTopicArn\u003estring\u003c/snsTopicArn\u003e\n    \u003c/alarmActions\u003e\n  \u003c/responseElements\u003e\n\u003c/AWSCloudTrail\u003e\n```\nThis XML example describes the creation of rules for either creating or updating a SQL Server firewall rule, it tracks the new rule and how to update it, and then sends out an alert action to a specified Simple Notification Service (SNS) topic. \n\nKindly note that you have to replace `string` with your own configurations. \n\nThis is an illustrative example, and actual implementation can vary depending on the specific requirements and the AWS services employed. \n\nPotential variations might include different methods for creating or updating the rules, different log stream names, or different methods for triggering the alert action."
    ],
    "x-kaytu-noncompliance-cost": [
      "Non-compliance with this AWS control where there is no activity log alert for Create or Update SQL Server Firewall Rule event can lead to several potential implications including:\n\n1. **Security Risks**: Without system alerts for firewall rule modifications, malicious activity like unauthorized access or alteration attempts could go unnoticed. This poses a grave threat to the data and resources located on the SQL Server, leading to potential data breaches, stealing of sensitive data, or ransomware attacks.\n\n2. **Regulatory Compliance**: Depending on the nature of your business and the data you store or manage, not tracking changes to firewall rules can lead to non-compliance with various regulatory requirements, such as the GDPR, PCI-DSS, HIPAA, etc. This can lead to hefty fines and penalties, loss of business licenses, or potential lawsuits.\n\n3. **Operational inefficiency**: Untracked changes in firewall rules can lead to operational issues such as blocking legitimate traffic or allowing malicious traffic. Either scenario can lead to system downtime, suboptimal resource usage and overall decreased business performance.\n\n4. **Audit failure**: Failure to log security changes like firewall rule modifications can lead to negative audit findings. To maintain system integrity and to meet audit requirements, comprehensive logging and alerting are often required.\n\n5. **Incident Response**: Without proper alerts, the Incident Response Team might witness a delay in identifying and responding to an incident, leading to greater exposure and potential damage.\n\n6. **Loss of trust**: Any of the above risks can damage a companyâ€™s reputation. If clients distrust your security practices, they may terminate their business contracts leading to financial losses.\n\nIn conclusion, failure to comply with this AWS Control can result in financial impact, harm corporate reputation, create operational inefficiency, and increase security risks."
    ],
    "x-kaytu-usefulness-example": [
      "The AWS CloudWatch service allows you to create activity log alerts for specific events such as the Create or Update SQL Server Firewall Rule event. This can be extremely useful in a variety of scenarios. \n\nFor example, consider a situation where you have a production application running on an Amazon RDS SQL Server instance. It is crucial from a security perspective that only certain IP addresses have access to your SQL Server instance. \n\nYou have set up a SQL Server Firewall Rule to restrict access to your database. However, there are multiple people with admin rights who could potentially change these firewall rules either accidentally or intentionally. \n\nBy setting up an activity log alert for the Create or Update SQL Server Firewall Rule event, you would be instantly notified whenever these firewall rules are altered. You can then quickly check to ensure that the changes were authorized and appropriate, and if not, take immediate action to correct the rules.\n\nHere is a sample alarm configuration:\n\n```markdown\n- resource: \"AWS::CloudWatch::Alarm\"\n  properties:\n    AlarmName: CreateUpdateSqlServerFirewallRule\n    AlarmDescription: An alert for Create or Update SQL Server Firewall rule event\n    Namespace: AWS/RDS\n    MetricName: CPUCreditBalance\n    ComparisonOperator: LessThanOrEqualToThreshold\n    Threshold: \"2\"\n    AlarmActions: \n      - (through SNS)\n    Statistic: SampleCount\n    Period: \"300\"\n    EvaluationPeriods: \"1\"\n```\n\nThis alarm will trigger and send you a notification whenever the SQL Server Firewall rule is created or updated."
    ]
  },
  "Managed": true
}