{
  "ID": "azure_keyvault_with_rbac_secret_expiration_set",
  "Title": "Ensure that the Expiration Date is set for all Secrets in RBAC Key Vaults",
  "Description": "Ensure that all Secrets in Role Based Access Control (RBAC) Azure Key Vaults have an expiration time set",
  "Query": {
    "Connector": "Azure",
    "Engine": "odysseus-v0.0.1",
    "ListOfTables": [
      "azure_key_vault",
      "azure_key_vault_secret",
      "azure_subscription"
    ],
    "PrimaryTable": "azure_key_vault_secret",
    "QueryToExecute": "with rbac_vault as (\n  select\n    name\n  from\n    azure_key_vault\n  where enable_rbac_authorization\n)\nselect\n  kvs.id as resource,\n  kvs.kaytu_account_id as kaytu_account_id,\n  kvs.kaytu_resource_id as kaytu_resource_id,\n  case\n    when v.name is null then 'skip'\n    when enabled and expires_at is null then 'alarm'\n    else 'ok'\n  end as status,\n  vault_name || ' key ' || kvs.name ||\n  case\n    when v.name is null then ' not RBAC enabled vault.'\n    when enabled and expires_at is null then ' expiration date not set.'\n    when not enabled then ' disabled.'\n    else ' expiration date set to ' || to_char(expires_at, 'DD-Mon-YYYY') || '.'\n  end as reason\n  \n  , kvs.resource_group as resource_group\n  , sub.display_name as subscription\nfrom\n  azure_key_vault_secret kvs\n  left join rbac_vault as v on v.name = kvs.vault_name,\n  azure_subscription sub\nwhere\n  sub.subscription_id = kvs.subscription_id;\n"
  },
  "DocumentURI": "",
  "ManualVerification": false,
  "Severity": "high",
  "Tags": {
    "category": [
      "Compliance"
    ],
    "cis": [
      "true"
    ],
    "cis_item_id": [
      "8.3"
    ],
    "cis_level": [
      "1"
    ],
    "cis_section_id": [
      "8"
    ],
    "cis_type": [
      "automated"
    ],
    "cis_version": [
      "v1.4.0"
    ],
    "plugin": [
      "azure"
    ],
    "service": [
      "Azure/KeyVault"
    ],
    "x-kaytu-explanation": [
      "`AWS Control` in this context is referring to management rules or protocols that are adhered to while using AWS (Amazon Web Services), specifically when it comes to role-based access control (RBAC) and key vaults. But, your question seems to be focused on Microsoft Azure, not AWS.\n\nHere it is in markup format for Azure:\n\n```markdown\n# Azure RBAC and Key Vault Secrets Expiration Time\n\n## Description\nIt is important to ensure that all secrets stored within Role Based Access Control (RBAC) Azure Key Vaults have an expiration time set. This helps to mitigate the risk of unauthorized access of these secrets.\n\n## Rationale\nBy setting an expiration date for Azure Key Vault secrets, it ensures that these are rotated regularly and the risk of them being used maliciously if they are accidently exposed is limited.\n\n## Remediation Steps\n1. In the Azure portal, navigate to your key vault and select the 'Secrets' section.\n2. For each secret, check its 'Expiration Date'. If there is not a date set, you should set one.\n3. It is a good practice to revisit these secrets before their expiration dates and either extend the date or rotate the secrets.\n\n## Additional Resources\n- [Azure Key Vault](https://azure.microsoft.com/en-us/services/key-vault/)\n- [Managing Key Vault Secrets, Certificates, and Storage Account Keys](https://docs.microsoft.com/en-us/azure/key-vault/general/about-keys-secrets-certificates)\n\n```\n\nPlease replace Azure references with AWS ones if you meant Amazon Web Services. AWS equivalent services are IAM for RBAC and secrets manager or KMS for key vault."
    ],
    "x-kaytu-noncompliance-cost": [
      "Non-compliance with this AWS control may lead to several potential costs. \n\n1. **Security Costs**: Secrets that do not have an expiration time are susceptible to potential misuse or unauthorized access over an indefinite period of time. In the event of a security breach, the cost of resolving such incidents can be substantial, both technically and financially. \n\n2. **Regulatory Sanctions**: Non-compliance might violate certain regulations, laws, and standards that govern information security, leading to substantial fines, penalties, or sanctions. \n\n3. **Reputation Damage**: If a security breach occurs and is made public, the reputation damage can be significant. Prospective customers may distrust the organization, leading to potential lost revenue.\n\n4. **Operational Costs**: Secrets without an expiration time could complicate operations as these factors add complexity to access management and regular auditing. \n\nIn a markup format, it can be written as:\n\n```\n- **Security Costs**: Secrets without expiration time can be misused or accessed unauthorizedly over indefinite time. In the event of a security breach, the cost can be substantial.\n\n- **Regulatory Sanctions**: Non-compliance might violate information security laws, regulations, and standards, leading to substantial fines or sanctions. \n\n- **Reputation Damage**: A security breach can significantly damage the organization's reputation, leading to potential customer loss and declining revenue.\n\n- **Operational Costs**: Secrets without an expiration time can add complexity to access management and regular auditing, therefore bringing in additional operational costs.\n```"
    ],
    "x-kaytu-usefulness-example": [
      "This AWS Control is designed to ensure the security and integrity of sensitive organizational data stored in Azure Key Vaults with RBAC. A good use example would be:\n\nA large organization uses Azure Key Vaults to store sensitive data such as API keys, connection strings, database passwords among other secrets. Their IT department utilizes Role Based Access Control (RBAC) to manage who has access to these secrets.\n\nHowever, they have noticed that revoking access to a specific credential after a staff member leaves or changes roles is sometimes overlooked which could potentially lead to unauthorized access or data breach. \n\nBy implementing this AWS Control to ensure that all Secrets in RBAC Azure Key Vaults have an expiration time set, they mitigate the risk by having those secrets expire automatically. For instance, they could set it such that a secret expires after 90 days. This means even if a staff member leaves and their rights are not revoked immediately, they would lose access after the secret expires, thereby preserving the organization's data integrity and security."
    ]
  },
  "Managed": true
}