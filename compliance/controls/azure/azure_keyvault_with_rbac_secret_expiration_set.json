{
  "ID": "azure_keyvault_with_rbac_secret_expiration_set",
  "Title": "Ensure that the Expiration Date is set for all Secrets in RBAC Key Vaults",
  "Description": "Ensure that all Secrets in Role Based Access Control (RBAC) Azure Key Vaults have an expiration time set",
  "Query": {
    "Connector": "Azure",
    "Engine": "odysseus-v0.0.1",
    "ListOfTables": [
      "azure_key_vault",
      "azure_key_vault_secret",
      "azure_subscription"
    ],
    "PrimaryTable": "azure_key_vault_secret",
    "QueryToExecute": "with rbac_vault as (\n  select\n    name\n  from\n    azure_key_vault\n  where enable_rbac_authorization\n)\nselect\n  kvs.id as resource,\n  kvs.kaytu_account_id as kaytu_account_id,\n  kvs.kaytu_resource_id as kaytu_resource_id,\n  case\n    when v.name is null then 'skip'\n    when enabled and expires_at is null then 'alarm'\n    else 'ok'\n  end as status,\n  vault_name || ' key ' || kvs.name ||\n  case\n    when v.name is null then ' not RBAC enabled vault.'\n    when enabled and expires_at is null then ' expiration date not set.'\n    when not enabled then ' disabled.'\n    else ' expiration date set to ' || to_char(expires_at, 'DD-Mon-YYYY') || '.'\n  end as reason\n  \n  , kvs.resource_group as resource_group\n  , sub.display_name as subscription\nfrom\n  azure_key_vault_secret kvs\n  left join rbac_vault as v on v.name = kvs.vault_name,\n  azure_subscription sub\nwhere\n  sub.subscription_id = kvs.subscription_id;\n"
  },
  "DocumentURI": "",
  "ManualVerification": false,
  "Severity": "high",
  "Tags": {
    "category": [
      "Compliance"
    ],
    "cis": [
      "true"
    ],
    "cis_item_id": [
      "8.3"
    ],
    "cis_level": [
      "1"
    ],
    "cis_section_id": [
      "8"
    ],
    "cis_type": [
      "automated"
    ],
    "cis_version": [
      "v1.4.0"
    ],
    "plugin": [
      "azure"
    ],
    "service": [
      "Azure/KeyVault"
    ],
    "x-kaytu-explanation": [
      "## Azure Control: Secrets Expiration in RBAC Azure Key Vaults\n\n### Description:\nEnsure that all secrets stored in Azure Key Vaults, specifically those governed by Role-Based Access Control (RBAC), have an expiration time set. This measure enhances security by enforcing a time limit on the validity of secrets.\n\n### Implementation Steps:\n\n1. **Identify RBAC-Affected Key Vaults:**\n   - Enumerate and list all Azure Key Vaults that are configured with Role-Based Access Control.\n\n2. **Review Existing Secrets:**\n   - Examine the secrets within each identified Key Vault to check if they already have an expiration time set.\n\n3. **Set Expiration Time for Secrets:**\n   - For each secret without an expiration time, define an appropriate expiration period and configure the secrets accordingly.\n\n4. **Automation (Optional):**\n   - Consider implementing automation scripts or tools to regularly check and enforce the expiration time for secrets in RBAC Azure Key Vaults.\n\n### Considerations:\n- Ensure that the defined expiration times align with security policies and compliance requirements.\n- Document the expiration policies and procedures for future reference.\n\n### Compliance Verification:\n- Periodically audit RBAC Azure Key Vaults to ensure that all secrets have a valid expiration time set.\n\n### Notes:\n- The implementation of this control helps mitigate the risk of outdated or unused secrets compromising the security of the system.\n"
    ],
    "x-kaytu-noncompliance-cost": [
      "The cost of non-compliance with the Azure control \"Ensure that all Secrets in Role Based Access Control (RBAC) Azure Key Vaults have an expiration time set\" can have various implications for security and regulatory compliance. Non-compliance may result in the following consequences:\n\nSecurity Risks:\n\nLack of expiration time on secrets increases the risk of unauthorized access and potential misuse.\nWithout automatic expiration, secrets might remain valid indefinitely, making it easier for attackers to exploit them.\nRegulatory Violations:\n\nFailure to set expiration times on secrets may lead to non-compliance with industry-specific regulations or data protection laws that mandate the secure management of sensitive information.\nIncreased Vulnerability Window:\n\nSecrets with no expiration time pose a prolonged security risk. The longer a secret remains valid, the higher the likelihood of it being compromised.\nAudit Failures:\n\nAuditors may identify the absence of expiration times on secrets as a deficiency in the organization's security practices, leading to audit failures.\nReputational Damage:\n\nSecurity incidents resulting from non-compliance can harm the organization's reputation and erode trust among clients, partners, and stakeholders.\nTo address these risks and ensure compliance, it is crucial to regularly review and update secrets with appropriate expiration times in RBAC-enabled Azure Key Vaults. This proactive approach helps mitigate security threats, align with regulatory requirements, and safeguard the organization's reputation."
    ],
    "x-kaytu-usefulness-example": [
      "Below is an example instance of how you might express the Azure Policy for ensuring that all secrets in Role Based Access Control (RBAC) Azure Key Vaults have an expiration time set using Azure Policy in JSON format:\n\njson\n\n{\n  \"mode\": \"All\",\n  \"policyRule\": {\n    \"if\": {\n      \"allOf\": [\n        {\n          \"field\": \"type\",\n          \"equals\": \"Microsoft.KeyVault/vaults/secrets\"\n        },\n        {\n          \"field\": \"Microsoft.KeyVault/vaults/accessPolicies[*].permissions[*]\",\n          \"equals\": \"get\"\n        }\n      ]\n    },\n    \"then\": {\n      \"effect\": \"auditIfNotExists\",\n      \"details\": {\n        \"type\": \"Microsoft.KeyVault/vaults/secrets\",\n        \"name\": \"secretexpiration\",\n        \"existenceCondition\": {\n          \"field\": \"Microsoft.KeyVault/vaults/secrets[*].attributes.expires\"\n        }\n      }\n    }\n  },\n  \"parameters\": {}\n}\nExplanation:\n\nThe if condition checks if the resource type is a secret in a Key Vault and if the access policy permissions include \"get.\"\nThe then block specifies the policy effect as \"auditIfNotExists,\" meaning it will audit resources that do not meet the specified condition.\nThe details section specifies the type as \"Microsoft.KeyVault/vaults/secrets\" and sets the name as \"secretexpiration.\"\nThe existenceCondition checks if the expiration attribute of secrets exists.\nPlease note that this is a simplified example, and you may need to customize it based on your specific requirements and the structure of your Azure environment. Additionally, you can modify the policy to have a more restrictive effect, such as denying the creation of secrets without an expiration time instead of just auditing."
    ]
  },
  "Managed": true
}