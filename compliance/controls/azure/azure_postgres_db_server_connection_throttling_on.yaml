Description: Enable connection_throttling on PostgreSQL Servers.
DocumentURI: ""
ID: azure_postgres_db_server_connection_throttling_on
Managed: true
ManualVerification: false
Query:
  Connector: Azure
  Engine: odysseus-v0.0.1
  ListOfTables:
  - azure_postgresql_server
  - azure_subscription
  PrimaryTable: azure_postgresql_server
  QueryToExecute: |
    select
      s.id as resource,
      s.kaytu_account_id as kaytu_account_id,
      s.kaytu_resource_id as kaytu_resource_id,
      case
        when lower(config -> 'ConfigurationProperties' ->> 'value') != 'on' then 'alarm'
        else 'ok'
      end as status,
      case
        when lower(config -> 'ConfigurationProperties' ->> 'value') != 'on' then s.name || ' server parameter connection_throttling off.'
        else s.name || ' server parameter connection_throttling on.'
      end as reason
      
      , s.resource_group as resource_group
      , sub.display_name as subscription
    from
      azure_postgresql_server s,
      jsonb_array_elements(server_configurations) config,
      azure_subscription sub
    where
      config ->> 'Name' = 'connection_throttling'
      and sub.subscription_id = s.subscription_id;
Severity: medium
Tags:
  category:
  - Compliance
  cis:
  - "true"
  cis_item_id:
  - 4.3.6
  cis_level:
  - "1"
  cis_section_id:
  - "4.3"
  cis_type:
  - automated
  cis_version:
  - v1.3.0
  plugin:
  - azure
  service:
  - Azure/PostgreSQL
  x-kaytu-explanation:
  - "Connection throttling in PostgreSQL Servers on Azure refers to the limitation of the network connectivity in order to manage the server resources and maintain the responsiveness and availability of your server.\n\nHowever, Azure's interface doesn't directly expose a `connection_throttling` option in its settings. Instead, it offers various other options that indirectly achieve the same aim:\n\n- Connection Pooling: This feature reduces the number of connections open concurrently in a PostgreSQL database. This can improve the speed and reliability of the server by spreading the load across multiple connections.\n- vCore Settings: The number of vCores (virtual cores) allocated to your server determines the number of active connections it can handle at once. Adjusting these settings can throttle the number of connections.\n- Azure Database for PostgreSQL firewall rules: These rules allow you to restrict the number of IP addresses that can connect to your server. In theory, this could be used to indirectly 'throttle' connections, by limiting which addresses can make them.\n- Using PgBouncer: It is a PostgreSQL connection pooler. Any targeting of the PostgreSQL server can be pointed to PgBouncer instead, which then handles much connection setup and tear down.\n\nIn markup language for PostgreSQL, you would not manipulate connection throttling directly. You need to configure parameters to determine the limit connections.\n\nYou can set the maximum number of concurrent connections with the `max_connections` parameter in the postgresql.conf file. However, increasing max_connections costs about 400 bytes of shared memory per connection slot, plus lock space, etc.\n\n```SQL\nmax_connections = 100\n```\n\nFor more advanced throttling configuration, you should research connection poolers, firewall rules, and adjusting hardware settings according to your specific use case."
  x-kaytu-noncompliance-cost:
  - "Enabling `connection_throttling` on PostgreSQL servers in Azure is an important aspect of ensuring the stability, performance, and security of the database.\n\nNon-compliance to this control can result in several potential costs:\n\n1. **Security Risks**: Without connection throttling, your PostgreSQL server could potentially become an easy target for unauthorized users or cyber attackers who might attempt to flood the server with numerous simultaneous connections to cause disruption.\n\n2. **Performance Degradation**: The server could become slower due to the high number of connections, causing negative effects on your applications' performance. It could even lead to a denial of service, making your database inaccessible.\n\n3. **Increased Costs**: Dealing with the after-effects of security breaches or performance issues can lead to additional unexpected expenditures, both in terms of technical resources and manpower needed to mitigate and resolve the issues.\n\n4. **Potential Regulatory Fines**: Depending on the nature of your application and the data it handles, non-compliance may result in violation of certain legal or industry rules (such as GDPR or HIPAA), resulting in substantial fines.\n\n5. **Reputation Damage**: A slow performing, often inaccessible application or a data breach can severely damage your company's reputation, potentially leading to loss of customer trust and business.\n\nTherefore, it's recommended to always enable `connection_throttling` on your PostgreSQL servers in Azure to control the number of connections and manage server bandwidth effectively for optimal performance and enhanced security."
  x-kaytu-usefulness-example:
  - |-
    PostgreSQL servers in Azure can be subjected to instances of high traffic and requests, which can affect data processing speeds and the overall performance of the server. You can mitigate this problem by enabling connection throttling. By enforcing limits on the number of connections a client can create within a specified period, connection throttling prevents individual clients from monopolizing server resources.

    Here's an example in markup format:

    ```
    resource "azurerm_postgresql_server" "example" {
      name                            = "example-psqlserver"
      location                        = azurerm_resource_group.example.location
      resource_group_name             = azurerm_resource_group.example.name
      sku_name                        = "GP_Gen5_4"
      administrator_login             = "psqladminun"
      administrator_login_password    = "H@Sh1CoR3!"
      version                         = "9.5"
      storage_mb                      = 5120
      backup_retention_days           = 7
      geo_redundant_backup_enabled    = false
      auto_grow_enabled               = true
      public_network_access_enabled   = false
      ssl_enforcement_enabled         = true

      connection_throttling {
        rules {
          name        = "throttling_rule"
          rate_limit  = 100
          burst_limit = 200
        }
      }
      
      tags = {
        environment = "Production"
      }
    }
    ```

    In this example, the `connection_throttling` block has rules for throttling connections to the PostgreSQL server. The `rate_limit` attribute specifies how many new connections a client can create every second. The `burst_limit` attribute sets the maximum number of connections a client can create in a burst even if the rate limit has been exceeded. This ensures that all clients get fair and equal access to the resources on the server.
Title: Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server
