{
  "ID": "azure_cosmosdb_account_uses_private_link",
  "Title": "Ensure That Private Endpoints Are Used Where Possible",
  "Description": "Based on business needs or criticality of data/databases hosted a SQL server, it is recommended that the TDE protector is encrypted by a key that is managed by the data owner (Customer-managed key).",
  "Query": {
    "Connector": "Azure",
    "Engine": "odysseus-v0.0.1",
    "ListOfTables": [
      "azure_cosmosdb_account",
      "azure_subscription"
    ],
    "PrimaryTable": "azure_cosmosdb_account",
    "QueryToExecute": "with cosmosdb_private_connection as (\n  select\n    distinct a.id\n  from\n    azure_cosmosdb_account as a,\n    jsonb_array_elements(private_endpoint_connections) as connection\n  where\n    connection -\u003e 'properties' -\u003e 'privateLinkServiceConnectionState' -\u003e\u003e 'status' = 'Approved'\n)\nselect\n  a.id as resource,\n  a.kaytu_account_id as kaytu_account_id,\n  a.kaytu_resource_id as kaytu_resource_id,\n  case\n    when c.id is null then 'alarm'\n    else 'ok'\n  end as status,\n  case\n    when c.id is null then a.name || ' not uses private link.'\n    else a.name || ' uses private link.'\n  end as reason\n  \n  , a.resource_group as resource_group\n  , sub.display_name as subscription\nfrom\n  azure_cosmosdb_account as a\n  left join cosmosdb_private_connection as c on c.id = a.id,\n  azure_subscription as sub\nwhere\n  sub.subscription_id = a.subscription_id;\n"
  },
  "DocumentURI": "",
  "ManualVerification": false,
  "Severity": "medium",
  "Tags": {
    "category": [
      "Compliance"
    ],
    "cis": [
      "true"
    ],
    "cis_item_id": [
      "4.5.2"
    ],
    "cis_level": [
      "2"
    ],
    "cis_section_id": [
      "4.5"
    ],
    "cis_type": [
      "manual"
    ],
    "cis_version": [
      "v1.5.0"
    ],
    "plugin": [
      "azure"
    ],
    "service": [
      "Azure/SQL"
    ],
    "x-kaytu-explanation": [
      "**AWS Control Explanation in Markdown**\n\nThis control refers to the importance of securing your data within Amazon Web Services (AWS). Specifically, it’s about utilizing Transparent Data Encryption (TDE) to protect your SQL server databases.\n\nTDE encrypts the database's files and requires a database encryption key for decryption. This key is protected by a TDE protector, a certificate or an asymmetric key.\n\nWhile AWS can manage the TDE protector using a service-managed key, this control suggests you should use a customer-managed key instead, especially for high-criticality databases or when dictated by business requirements.\n\nA 'Customer-managed key' allows you to have full control and responsibility over the encryption and decryption keys used by AWS services. \n\nAWS KMS (Key Management Service) is the service that enables you to manage these keys. You can create, modify, and use CMKs along with auditing their use.\n\nThis is not to say service-managed keys are insecure; however, for more sensitive data, customer-managed keys could provide an additional layer of security and control, including the ability to audit, monitor, and control the usage of those keys.\n\nHere is a illustrative example:\n```\nCustomer-managed key: \n\n1. Create a new customer-managed key.\n   - Navigate to the AWS Management Console.\n   - In the Security, Identity, \u0026 Compliance section, choose ‘KMS’.\n   - Choose ‘Create key’. \n   - Follow the prompts to create and secure your key.\n2. Encrypt your TDE protector with your customer-managed key.\n\nThis is the general concept - please refer to the AWS documentation for more detailed steps and recommendations on key rotation and other best practices.\n```\n\nRemember, using a customer-managed key increases your responsibility towards securing your AWS resources, but also provides you complete control and transparency over their usage."
    ],
    "x-kaytu-noncompliance-cost": [
      "Non-compliance to this AWS control may have several financial, operational, and legal consequences such as:\n\n1. **Data Breaches**: If the TDE protector is not encrypted with a customer-managed key, it can make the SQL server and the data it hosts more susceptible to cyber threats. Unauthorized access can lead to data theft or manipulation which can have severe consequences including financial loss, reputation damage, and potential lawsuits.\n\n2. **Loss of Control Over Data**: If the key is not managed by the customer, the control over data may be compromised. This can cause disruptions in business operations which can subsequently lead to financial losses. This also has implications regarding data sovereignty issues in case the third-party managing the key is in another legislative jurisdiction.\n\n3. **Non-Compliance Fines**: Organizations may face fines or penalties for not adhering to certain industry standards and regulations such as GDPR or HIPAA, which may require encryption of sensitive data using a customer-managed key. \n\n4. **Trust Issues**: Lack of control may lead to trust issues with customers, business partners, and shareholders. This can affect the business' reputation, which might lead to loss of customers or business opportunities.\n\nTo sum up, it's critical to manage your own keys when encrypting TDE protector to ensure that your business retains full control over its own data, lowering risks associated with data breaches, and ensuring setup is done to industry and legal standards. Non-compliance to the aforementioned AWS control could potentially result in substantial financial losses and damage to business reputation. Always ensure that encryption protocols employed match the criticality of the data it's meant to protect."
    ],
    "x-kaytu-usefulness-example": [
      "If a company is running a financial system on AWS using SQL Server, all of their financial transactions can be stored within this database. This data could include sensitive information such as customers' credit card numbers, bank account information, or other personal identifiable information.\n\nIf an unauthorized person got access to this database and it was not encrypted, they could potentially steal important financial data, putting both the company and its customers at risk.\n\nBy encrypting the TDE protector with a customer-managed key, the company could add an extra layer of security to their data. They could manage who has access to this key, where it is stored, and when it is rotated to ensure its security.\n\n```\nExample:\n\n1.  A Financial Company X, uses SQL Server hosted on AWS to manage all its sensitive customer data related to transactions, account info etc.\n2.  To ensure data safety and confidentiality, Company X decides to enable TDE (Transparent Data Encryption) on SQL server which requires a protector to encrypt the database.\n3.  Instead of using AWS managed key, Company X uses a Customer-managed key to encrypt the TDE protector. This is because, managing own key gives them more control over protecting their data.\n4.  By doing this, the key used to encrypt the TDE protector is in the hands of Company X and they are responsible for its rotation, secure storage and handling, providing a stringent safeguarding measure for the data.\n```\n\nEncrypting the TDE protector with a customer-managed key can be particularly useful for those industries that need to adhere to strict regulations regarding data protection, such as healthcare, finance, or government."
    ]
  },
  "Managed": true
}