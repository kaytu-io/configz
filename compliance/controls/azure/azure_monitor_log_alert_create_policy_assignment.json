{
  "ID": "azure_monitor_log_alert_create_policy_assignment",
  "Title": "Ensure that Activity Log Alert exists for Create Policy Assignment",
  "Description": "Create an activity log alert for the Create Policy Assignment event.",
  "Query": {
    "Connector": "Azure",
    "Engine": "odysseus-v0.0.1",
    "ListOfTables": [
      "azure_log_alert",
      "azure_subscription"
    ],
    "PrimaryTable": "azure_log_alert",
    "QueryToExecute": "with alert_rule as (\n  select\n    alert.id as alert_id,\n    alert.name as alert_name,\n    alert.kaytu_account_id as kaytu_account_id,\n    alert.kaytu_resource_id as kaytu_resource_id,\n    alert.enabled,\n    alert.location,\n    alert.subscription_id\n  from\n    azure_log_alert as alert,\n    jsonb_array_elements_text(scopes) as sc\n  where\n    alert.location = 'Global'\n    and alert.enabled\n    and sc = '/subscriptions/' || alert.subscription_id\n    and alert.condition -\u003e 'allOf' @\u003e '[{\"equals\":\"Administrative\",\"field\":\"category\"}]'\n    and alert.condition -\u003e 'allOf' @\u003e '[{\"field\": \"resourceType\", \"equals\": \"microsoft.authorization/policyassignments\"}]'\n    and alert.condition -\u003e 'allOf' @\u003e '[{\"field\": \"operationName\", \"equals\": \"Microsoft.Authorization/policyAssignments/write\"}]'\n  limit 1\n)\nselect\n  sub.subscription_id as resource,\n  sub.kaytu_account_id as kaytu_account_id,\n  sub.kaytu_resource_id as kaytu_resource_id,\n  case\n    when count(a.subscription_id) \u003e 0 then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when count(a.subscription_id) \u003e 0 then 'Activity log alert exists for create policy assignment event.'\n    else 'Activity log alert does not exists for create policy assignment event.'\n  end as reason\n  \n  , sub.display_name as subscription\nfrom\n  azure_subscription sub\n  left join alert_rule a on sub.subscription_id = a.subscription_id\ngroup by\n  sub.subscription_id,\n  sub.kaytu_account_id,\n  sub.kaytu_resource_id,\n  sub._ctx,\n  sub.display_name;\n"
  },
  "DocumentURI": "",
  "ManualVerification": false,
  "Severity": "medium",
  "Tags": {
    "category": [
      "Compliance"
    ],
    "cis": [
      "true"
    ],
    "cis_item_id": [
      "5.2.1"
    ],
    "cis_level": [
      "1"
    ],
    "cis_section_id": [
      "5.2"
    ],
    "cis_type": [
      "automated"
    ],
    "cis_version": [
      "v1.3.0"
    ],
    "plugin": [
      "azure"
    ],
    "service": [
      "Azure/Monitor"
    ],
    "x-kaytu-explanation": [
      "AWS does not have a direct feature named \"activity log alert\". However, you can utilize AWS CloudWatch and AWS CloudTrail services to monitor and get alerts for specific events like \"Create Policy Assignment\".\n\n```markdown\n**Step 1: Enable AWS CloudTrail Log**\nAWS CloudTrail provides a record of actions taken by a user, role, or an AWS service in your AWS environment.\n\nNavigate to the AWS CloudTrail console and create a new trail.\n\n**Step 2: Enable CloudWatch Logs**\nConfigure CloudTrail to send log files to CloudWatch Logs. \n\n**Step 3: Create a Metric Filter and Alarm**\nIn the CloudWatch console, navigate to `Logs` and choose the log group to which CloudTrail logs are delivered. \nCreate a metric filter that matches the \"CreatePolicyVersion\" event name.\n\nHere's an example of a pattern that you might use:\n```json\n{ $.eventSource = \"iam.amazonaws.com\" \u0026\u0026 $.eventName = \"CreatePolicyVersion\" }\n```\nAfter the metric filter is created, create an alarm for the CloudWatch metric.\n\n**Step 4: Configure Alarm State**\nCreate a new SNS topic or choose an existing SNS topic to deliver the alarm. When the alarm changes state, it sends notification to the configured SNS topic. \n```\n\nThis process will help you get alerted whenever there's a \"Create Policy Assignment\" event in your AWS environment. Remember, these steps might incur costs in your AWS account."
    ],
    "x-kaytu-noncompliance-cost": [
      "Non-compliance to the AWS control of creating an activity log alert for the \"Create Policy Assignment\" event may have various direct and indirect costs.\n\n1. **Security Vulnerability Costs**: Failing to monitor Policy Assignment can lead to unauthorized activities or security breaches in your AWS environment. These incidents could lead to compromising of sensitive data or system failures. The cost of such a breach can be severe including financial penalties, litigation costs, and damage to the company's reputation.\n\n2. **Regulatory Compliance Costs**: Certain sectors have stringent regulations for data security and auditing, such as GDPR, HIPAA, or PCI DSS. Non-compliance with these regulations due to lack of adequate logging can lead to hefty fines and sanctions.\n\n3. **Operational Costs**: Without monitoring policy assignment, changes could be made that affect the operation of your services or applications without your knowledge. These could lead to downtime, loss of business and increased operational costs.\n\n4. **Incident Response Costs**: In case of a security incident, lacking a detailed activity log would make it much more difficult and time-consuming to identify the cause of the incident and to remediate it. \n\n5. **Loss of Customer Trust**: Finally, if customers find out about weak security practices or experience a negative impact due to an issue that could have been prevented with proper alerting, you may lose their trust and consequently their business.\n\nTo summarize, not following the control can lead to operational, financial, and reputational costs. This reinforces the importances of implementing such measures to enhance the security posture in AWS environments."
    ],
    "x-kaytu-usefulness-example": [
      "In order to ensure the security and integrity of an AWS platform, it is essential to monitor, track, and alert the administrative activities, especially around policy assignments. For instance, having an activity log alert for the 'Create Policy Assignment' event can be useful in the following scenario:\n\n```markdown\nScenario:\nJohn Doe, a cloud engineer of XYZ Corp, is responsible for assigning policies to the resources in the AWS platform. A new policy 'SensitiveDataAccessPolicy' was created to grant access to sensitive data which should be only assigned to the necessary personnel. \n\nTo ensure that this policy assignment is monitored, an activity log alert was created for 'Create Policy Assignment' event. Over the weekend, an unexpected assignment of 'SensitiveDataAccessPolicy' was made to a new user account that John Doe was not aware of.\n\nFortunately, the AWS control created an immediate alert for this activity. This allowed the security team to be notified of this event, investigate who created the new user account and why the 'SensitiveDataAccessPolicy' was assigned to it. \n\nAs a result, timely detection of the unauthorized assignment prevented a potential data breach, demonstrating the usefulness of an activity log alert for 'Create Policy Assignment' event.\n```\n\nThis scenario shows the importance and usefulness of setting up automatic alerts to monitor changes in policy assignments, as it plays a crucial role in maintaining the security and data protection of the organization."
    ]
  },
  "Managed": true
}