{
  "ID": "azure_storage_account_table_service_logging_enabled",
  "Title": "Ensure Storage Logging is Enabled for Table Service for 'Read', 'Write', and 'Delete' Requests ",
  "Description": "Azure Table storage is a service that stores structured NoSQL data in the cloud, providing a key/attribute store with a schema-less design. Storage Logging happens server-side and allows details for both successful and failed requests to be recorded in the storage account. These logs allow users to see the details of read, write, and delete operations against the tables. Storage Logging log entries contain the following information about individual requests: timing information such as start time, end-to-end latency, and server latency; authentication details; concurrency information; and the sizes of the request and response messages.",
  "Query": {
    "Connector": "Azure",
    "Engine": "odysseus-v0.0.1",
    "ListOfTables": [
      "azure_storage_account",
      "azure_subscription"
    ],
    "PrimaryTable": "azure_storage_account",
    "QueryToExecute": "select\n  sa.id as resource,\n  sa.kaytu_account_id as kaytu_account_id,\n  sa.kaytu_resource_id as kaytu_resource_id,\n  case\n    when table_logging_write and table_logging_read and table_logging_delete then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when table_logging_write and table_logging_read and table_logging_delete\n      then sa.name || ' table service logging enabled for read, write, delete requests.'\n    else sa.name || ' table service logging not enabled for: ' ||\n      concat_ws(', ',\n        case when not table_logging_write then 'write' end,\n        case when not table_logging_read then 'read' end,\n        case when not table_logging_delete then 'delete' end\n      ) || ' requests.'\n  end as reason\n  \n  , sa.resource_group as resource_group\n  , sub.display_name as subscription\nfrom\n  azure_storage_account as sa,\n  azure_subscription as sub\nwhere\n  sub.subscription_id = sa.subscription_id;\n"
  },
  "DocumentURI": "",
  "ManualVerification": false,
  "Severity": "medium",
  "Tags": {
    "category": [
      "Compliance"
    ],
    "cis": [
      "true"
    ],
    "cis_item_id": [
      "3.14"
    ],
    "cis_level": [
      "2"
    ],
    "cis_section_id": [
      "3"
    ],
    "cis_type": [
      "automated"
    ],
    "cis_version": [
      "v1.5.0"
    ],
    "plugin": [
      "azure"
    ],
    "service": [
      "Azure/Storage"
    ],
    "x-kaytu-explanation": [
      "Azure Table Storage allows storing structured NoSQL data in the cloud. It acts as a key/attribute store having a schema-less design. Storage Logging is performed on the server-side that records details about successful as well as failed requests in the storage account. These logs provide details of operations such as read, write, and delete operations performed against the tables.\n\nA Storage Logging log entry contains information about:\n\n- Timing Information: This includes the start time of a request, its end-to-end latency, and the server latency.\n- Authentication Details: Details about which user (or system) made a request and whether it was successfully authenticated or not\n- Concurrency Information: Details about simultaneous operations performed against the same data in the table\n- Request and Response Sizes: The sizes of both the request and the response messages\n\nHere is an example of how you would use this in markup format:\n\n```\n\u003cStorageServiceProperties\u003e\n   \u003cLogging\u003e\n      \u003cVersion\u003e1.0\u003c/Version\u003e\n      \u003cRead\u003etrue\u003c/Read\u003e\n      \u003cWrite\u003etrue\u003c/Write\u003e\n      \u003cDelete\u003etrue\u003c/Delete\u003e\n      \u003cRetentionPolicy\u003e\n         \u003cEnabled\u003etrue\u003c/Enabled\u003e\n         \u003cDays\u003e7\u003c/Days\u003e\n      \u003c/RetentionPolicy\u003e\n   \u003c/Logging\u003e\n   \u003cHourMetrics\u003e\n....\n\u003c/StorageServiceProperties\u003e\n```\n\nIn this example, `Read`, `Write` and `Delete` are set to `true`, which means logging is enabled for these operations. The `RetentionPolicy` is also enabled and set to retain logs for 7 days."
    ],
    "x-kaytu-noncompliance-cost": [
      "Non-compliance to Azure's Table storage control essentially means not implementing or maintaining storage logging. This could result in:\n\n1. **Potential Data Breaches:** Without storage logging, it would be difficult to monitor who is accessing the data and what operations they're performing. This could leave the data susceptible to unauthorized changes or data breaches.\n\n2. **Limited Auditability:** If things go wrong, especially in the case of a security incident like unauthorized access or data breach, logs are essential for forensic investigations. Without comprehensive logging, it would be impossible to conduct a thorough and accurate audit of actions.\n\n3. **Lack of Performance Insight:** Storage logging provides key details about the performance of read, write, and delete operations against tables (e.g. timing information and server latency). Non-compliance to the control would mean lacking these valuable insights, potentially impacting service optimization and performance improvement efforts.\n\n4. **Non-Compliance with Regulation:** Depending on the nature of the data being stored and processed, not implementing storage logging could also represent non-compliance with regulations like GDPR, HIPAA, etc. that require certain levels of data handling and processing logs.\n\nThe cost of non-compliance could hence include financial loss from data breaches, regulatory penalties, and missed opportunities for performance optimization."
    ],
    "x-kaytu-usefulness-example": [
      "```\nAn example of the usefulness of Azure Table Storage with Storage Logging can be a Supply Chain Management System. The system can leverage Azure Table Storage's NoSQL functionality to store a variety of data like order details, shipping details, customer details, etc. Data stored can be in the form of key/value pairs which can efficiently handle the different types of data.\n\nSince supply chain operations are critical, the system needs to track each operation for audit purposes. This is where Storage Logging can be extremely useful. For instance, a deletion operation on an Order must be tracked with who performed the operation, what was the time of the operation, how much time it took, and what were the size of request and response. \n\nIn case of any discrepancies or disputes, these logs can then be accessed and analyzed. Any signs of a security breach or operational concern can be identified through these storage logs. \n\nHere is a sample in markup format illustrating how this can look like:\n\n```xml\n\u003cEntry\u003e\n  \u003cRequestStart\u003e2016-10-24T18:08:36.0242320Z\u003c/RequestStart\u003e\n  \u003cOperationType\u003eDeleteEntity\u003c/OperationType\u003e\n  \u003cRequestStatus\u003eSucceeded\u003c/RequestStatus\u003e\n  \u003cHttpStatusCode\u003e204\u003c/HttpStatusCode\u003e\n  \u003cE2ELatency\u003e23.2528\u003c/E2ELatency\u003e\n  \u003cServerLatency\u003e21.2251\u003c/ServerLatency\u003e\n  \u003cAuthenticationType\u003eSAS\u003c/AuthenticationType\u003e\n  \u003cRequestPacketSize\u003e395\u003c/RequestPacketSize\u003e\n  \u003cResponsePacketSize\u003e0\u003c/ResponsePacketSize\u003e\n  \u003cUserAgent\u003ePython+azure-storage/0.32.0-0.33.0+(Python+CPython+3.5.2;+Windows+10)\u003c/UserAgent\u003e\n  \u003cUserObjectId\u003euserId\u003c/UserObjectId\u003e\n  \u003cTableName\u003eorders\u003c/TableName\u003e\n  \u003cClientIp\u003e192.0.2.1:12345\u003c/ClientIp\u003e\n\u003c/Entry\u003e\n```\nAbove XML snippet provides detail about a `DeleteEntity` operation on `orders` table and other related information.\n```"
    ]
  },
  "Managed": true
}