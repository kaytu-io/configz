{
  "ID": "azure_sql_server_auditing_on",
  "Title": "Ensure that 'Auditing' is set to 'On'",
  "Description": "Enable auditing on SQL Servers.",
  "Query": {
    "Connector": "Azure",
    "Engine": "odysseus-v0.0.1",
    "ListOfTables": [
      "azure_sql_server",
      "azure_subscription"
    ],
    "PrimaryTable": "azure_sql_server",
    "QueryToExecute": "select\n  s.id as resource,\n  s.kaytu_account_id as kaytu_account_id,\n  s.kaytu_resource_id as kaytu_resource_id,\n  case\n    when audit -\u003e 'properties' -\u003e\u003e 'state' = 'Disabled' then 'alarm'\n    else 'ok'\n  end as status,\n  case\n    when audit -\u003e 'properties' -\u003e\u003e 'state' = 'Disabled' then name || ' auditing disabled.'\n    else name || ' auditing enabled.'\n  end as reason\n  \n  , s.resource_group as resource_group\n  , sub.display_name as subscription\nfrom\n  azure_sql_server s,\n  jsonb_array_elements(server_audit_policy) audit,\n  azure_subscription sub\nwhere\n  sub.subscription_id = s.subscription_id;\n"
  },
  "DocumentURI": "",
  "ManualVerification": false,
  "Severity": "medium",
  "Tags": {
    "category": [
      "Compliance"
    ],
    "cis": [
      "true"
    ],
    "cis_item_id": [
      "4.1.1"
    ],
    "cis_level": [
      "1"
    ],
    "cis_section_id": [
      "4.1"
    ],
    "cis_type": [
      "automated"
    ],
    "cis_version": [
      "v1.3.0"
    ],
    "plugin": [
      "azure"
    ],
    "service": [
      "Azure/SQL"
    ],
    "x-kaytu-explanation": [
      "Azure Control is a part of Azure's SQL Server service that enables auditing on SQL servers. This is very important for maintaining security, compliance, and troubleshooting.\n\nThe control works by recording database events and writing them to an audit log in your Azure storage account, Log Analytics workspace, or Event Hubs. The types of actions you can audit include successful and failed logins, executed queries, and more.\n\nTo enable auditing on your Azure SQL Servers, you would use the \"Auditing\" section in the Azure Portal. You can also use PowerShell, CLI, or REST APIs.\n\nHere is an example of how to enable auditing using Azure's Markup Language (Azure Resource Manager templates):\n\n```json\n{\n   \"type\": \"Microsoft.Sql/servers/auditingSettings\",\n   \"apiVersion\": \"2020-11-01-preview\",\n   \"name\": \"[concat(parameters('serverName'), '/Default')]\",\n   \"dependsOn\": [\n      \"[resourceId('Microsoft.Sql/servers', parameters('serverName'))]\"\n   ],\n   \"properties\": {\n    \"state\": \"Enabled\",\n    \"storageAccountAccessKey\": \"[listKeys(resourceId(parameters('storageResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')),'2015-05-01-preview').key1]\",\n    \"storageEndpoint\": \"[reference(resourceId(parameters('storageResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')),'2015-06-15').primaryEndpoints.blob]\"\n}\n}\n```\n\nThis JSON snippet is an example of an ARM template. Here, we are defining a resource of type \"Microsoft.Sql/servers/auditingSettings\". The name of the audit is set to \"Default\", and it depends on your Azure SQL Server. It sets the state of the audit to \"Enabled\", and it points to a storage account where the audit logs will be stored.\n\nRemember to replace parameters like 'serverName', 'storageResourceGroupName' and 'storageAccountName' with your actual Azure SQL Server name, the Resource Group name where your storage account exists, and the storage account name, respectively."
    ],
    "x-kaytu-noncompliance-cost": [
      "Non-compliance to the Azure control of enabling auditing on SQL servers could potentially result in multiple costs for an organization. \n\n* **Loss of Data Integrity and Confidentiality**: Without proper auditing, any unauthorized access or changes to the data can pass unnoticed, compromising the integrity and confidentiality of the data. This can lead to deformed business decisions based on inaccurate data.\n\n* **Incurred Regulatory Fines or Penalties**: Many industries and regions have strict regulations around data security and how data should be handled/stored/accessed. Not enabling auditing might be against compliance standards and thus, could lead to financial penalties and legal actions.\n\n* **Compromise of Intellectual Property**: For many organizations, databases contain sensitive, proprietary information that constitutes the organization's intellectual property. A lack of auditing could place this valuable information at risk.\n\n* **Damage to Reputation**: If confidential customer data are leaked due to non-auditing, it could lead to a loss of customer trust and tarnish the organization's reputation.\n\n* **Negative Financial Impact**: The cost of fixing issues and problems that arise from unnoticed unauthorized data manipulations can be significant. Also, the cost of potential downtime and interruptions to business caused by these unnoticed manipulations can negatively impact an organization's bottom line. \n\n```markdown\n# Cost of Non-Compliance to 'Enable Auditing on SQL Servers'\n1. **Loss of Data Integrity and Confidentiality**: Potential compromise of data quality leading to inaccurate business decisions.\n2. **Incurred Regulatory Fines or Penalties**: Financial penalties and potential legal actions due to non-compliance with data security regulations.\n3. **Compromise of Intellectual Property**: Risk of sensitive, proprietary business information getting into the wrong hands.\n4. **Damage to Reputation**: Potential breaches could result in a loss of customer trust and reputation damage.\n5. **Negative Financial Impact**: Unforeseen costs associated with fixing unnoticed unauthorized data manipulations and potential business interruptions.\n```\n"
    ],
    "x-kaytu-usefulness-example": [
      "Auditing on SQL Servers within Microsoft Azure is an essential feature mainly utilized for maintaining security and compliance with regulations such as GDPR, HIPAA, and PCI-DSS. This function allows tracking and logging of database events, making it easier to detect and investigate unusual activities or anomalies that may indicate potential security threats.\n\n```markup\n# How to Enable Auditing on SQL Servers in Azure\n\nYou can turn on auditing in Azure SQL Server using Azure Portal, PowerShell, Azure CLI or REST API. The example below shows how to enable it using the Azure portal:\n\n1. In the Azure portal, locate and select your SQL Server.\n2. In the SQL Server blade, select **Security** from the left-hand menu, then select **Auditing**.\n3. Set the auditing to **ON**.\n4. Choose the **storage account** where you want to save the audit logs.\n5. Set the **storage retention** (the number of days you want to keep the logs in the storage account).\n6. You can also set up an **email address** to get alerts on auditing failures.\n7. Click **Save** to apply the changes.\n\nRemember, Auditing can impact performance, but it's crucial to keep your data secure and meet any regulations applicable to your industry or company.\n```\n\nthe example above shows how one can easily enable auditing in Azure SQL servers using Azure portal, and the useful features of this Azure control."
    ]
  },
  "Managed": true
}