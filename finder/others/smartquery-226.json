{
  "connectors": ["AWS"],
  "title": "Find all Network ACLs that allow ingress from all (0.0.0.0/0) to remote server administrator ports",
  "query": "with bad_rules as (\n  select\n    network_acl_id,\n    count(*) as num_bad_rules\n  from\n    aws_vpc_network_acl,\n    jsonb_array_elements(entries) as att\n  where\n    att -\u003e\u003e 'Egress' = 'false' -- as per aws egress = false indicates the ingress\n    and (\n      att -\u003e\u003e 'CidrBlock' = '0.0.0.0/0'\n      or att -\u003e\u003e 'Ipv6CidrBlock' =  '::/0'\n    )\n    and att -\u003e\u003e 'RuleAction' = 'allow'\n    and (\n      (\n        att -\u003e\u003e 'Protocol' = '-1' -- all traffic\n        and att -\u003e\u003e 'PortRange' is null\n      )\n      or (\n        (att -\u003e 'PortRange' -\u003e\u003e 'From') :: int \u003c= 22\n        and (att -\u003e 'PortRange' -\u003e\u003e 'To') :: int \u003e= 22\n        and att -\u003e\u003e 'Protocol' in('6', '17')  -- TCP or UDP\n      )\n      or (\n        (att -\u003e 'PortRange' -\u003e\u003e 'From') :: int \u003c= 3389\n        and (att -\u003e 'PortRange' -\u003e\u003e 'To') :: int \u003e= 3389\n        and att -\u003e\u003e 'Protocol' in('6', '17')  -- TCP or UDP\n    )\n  )\n  group by\n    network_acl_id\n)\n\nselect\n  -- Required Columns\n  'arn:' || acl.partition || ':ec2:' || acl.region || ':' || acl.account_id || ':network-acl/' || acl.network_acl_id  as resource,\n  case\n    when bad_rules.network_acl_id is null then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when bad_rules.network_acl_id is null then acl.network_acl_id || ' does not allow ingress to port 22 or 3389 from 0.0.0.0/0 or ::/0.'\n    else acl.network_acl_id || ' contains ' || bad_rules.num_bad_rules || ' rule(s) allowing ingress to port 22 or 3389 from 0.0.0.0/0 or ::/0.'\n  end as reason,\n  -- Additional Dimensions\n  acl.region,\n  acl.account_id\nfrom\t\n  aws_vpc_network_acl as acl\n  left join bad_rules on bad_rules.network_acl_id = acl.network_acl_id"
}