{
  "ID": "azure_compute_vm_attached_with_network",
  "Engine": "odysseus-v0.0.1",
  "QueryToExecute": "with vm_with_network_interfaces as (\n  select\n    vm.id as vm_id,\n    n -\u003e\u003e 'id' as network_id\n  from\n    azure_compute_virtual_machine as vm,\n    jsonb_array_elements(network_interfaces) as n\n),\nvm_with_appoved_networks as (\n  select\n    vn.vm_id as vm_id,\n    vn.network_id as network_id,\n    t.title as title\n  from\n    vm_with_network_interfaces as vn\n    left join azure_network_interface as t on t.id = vn.network_id\n    where exists\n      (select\n        ip -\u003e 'properties' -\u003e 'subnet' -\u003e\u003e 'id' as ip\n      FROM\n        azure_network_interface,\n        jsonb_array_elements(ip_configurations) as ip\n      where\n        ip -\u003e 'properties' -\u003e 'subnet' -\u003e\u003e 'id' is not null)\n)\nselect\n  a.vm_id as resource,\n  case\n    when b.vm_id is null then 'alarm'\n    else 'ok'\n  end as status,\n  case\n    when b.vm_id is null then a.title || ' not attached with virtual network.'\n    else a.name || ' attached with virtual network ' || b.title || '.'\n  end as reason\n  \n  , a.resource_group as resource_group\n  , sub.display_name as subscription\nfrom\n  azure_compute_virtual_machine as a\n  left join vm_with_appoved_networks as b on a.id = b.vm_id,\n  azure_subscription sub\nwhere\n  sub.subscription_id = a.subscription_id;\n",
  "Connector": "Azure",
  "PrimaryTable": "azure_compute_virtual_machine",
  "ListOfTables": [
    "azure_compute_virtual_machine",
    "azure_network_interface",
    "azure_subscription"
  ]
}