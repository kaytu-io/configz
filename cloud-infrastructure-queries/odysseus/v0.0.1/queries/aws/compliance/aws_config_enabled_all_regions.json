{
  "ID": "aws_config_enabled_all_regions",
  "Engine": "odysseus-v0.0.1",
  "QueryToExecute": "-- pgFormatter-ignore\n-- Get count for any region with all matching criteria\nwith global_recorders as (\n  select\n    count(*) as global_config_recorders\n  from\n    aws_config_configuration_recorder\n  where\n    recording_group -\u003e 'IncludeGlobalResourceTypes' = 'true'\n    and recording_group -\u003e 'AllSupported' = 'true'\n    and status -\u003e\u003e 'Recording' = 'true'\n    and status -\u003e\u003e 'LastStatus' = 'SUCCESS'\n)\nselect\n  'arn:aws::' || a.region || ':' || a.account_id as resource,\n  case\n  -- When any of the region satisfies with above CTE\n  -- In left join of \u003caws_config_configuration_recorder\u003e table, regions now having\n  -- 'Recording' and 'LastStatus' matching criteria can be considered as OK\n    when\n      g.global_config_recorders \u003e= 1\n      and status -\u003e\u003e 'Recording' = 'true'\n      and status -\u003e\u003e 'LastStatus' = 'SUCCESS'\n    then 'ok'\n  -- Skip any regions that are disabled in the account.\n    when a.opt_in_status = 'not-opted-in' then 'skip'\n    else 'alarm'\n  end as status,\n  -- Below cases are for citing respective reasons for control state\n  case\n    when a.opt_in_status = 'not-opted-in' then a.region || ' region is disabled.'\n    else\n  case\n    when recording_group -\u003e 'IncludeGlobalResourceTypes' = 'true' then a.region || ' IncludeGlobalResourceTypes enabled,'\n    else a.region || ' IncludeGlobalResourceTypes disabled,'\n  end ||\n  case\n    when recording_group -\u003e 'AllSupported' = 'true' then ' AllSupported enabled,'\n    else ' AllSupported disabled,'\n  end ||\n  case\n    when status -\u003e\u003e 'Recording' = 'true' then ' Recording enabled'\n    else ' Recording disabled'\n  end ||\n  case\n    when status -\u003e\u003e 'LastStatus' = 'SUCCESS' then ' and LastStatus is SUCCESS.'\n    else ' and LastStatus is not SUCCESS.'\n  end\n  end as reason\n  , a.region, a.account_id\nfrom\n  global_recorders as g,\n  aws_region as a\n  left join aws_config_configuration_recorder as r on r.account_id = a.account_id and r.region = a.name;\n",
  "Connector": "AWS",
  "PrimaryTable": "aws_region",
  "ListOfTables": [
    "aws_config_configuration_recorder",
    "aws_region"
  ]
}