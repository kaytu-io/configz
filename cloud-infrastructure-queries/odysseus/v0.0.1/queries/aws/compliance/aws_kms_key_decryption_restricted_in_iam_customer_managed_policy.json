{
  "ID": "aws_kms_key_decryption_restricted_in_iam_customer_managed_policy",
  "Engine": "odysseus-v0.0.1",
  "QueryToExecute": "with policy_with_decrypt_grant as (\n  select\n    distinct arn\n  from\n    aws_iam_policy,\n    jsonb_array_elements(policy_std -\u003e 'Statement') as statement\n  where\n    not is_aws_managed\n    and statement -\u003e\u003e 'Effect' = 'Allow'\n    and statement -\u003e 'Resource' ?| array['*', 'arn:aws:kms:*:' || account_id || ':key/*', 'arn:aws:kms:*:' || account_id || ':alias/*']\n    and statement -\u003e 'Action' ?| array['*', 'kms:*', 'kms:decrypt', 'kms:reencryptfrom', 'kms:reencrypt*']\n)\nselect\n  i.arn as resource,\n  case\n    when d.arn is null then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when d.arn is null then i.title || ' doesn''t allow decryption actions on all keys.'\n    else i.title || ' allows decryption actions on all keys.'\n  end as reason\n  \n  , i.account_id\nfrom\n  aws_iam_policy i\nleft join policy_with_decrypt_grant d on i.arn = d.arn\nwhere\n  not is_aws_managed;\n",
  "Connector": "AWS",
  "PrimaryTable": "aws_iam_policy",
  "ListOfTables": [
    "aws_iam_policy"
  ]
}