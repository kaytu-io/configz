{
  "ID": "aws_lambda_function_cloudtrail_logging_enabled",
  "Engine": "odysseus-v0.0.1",
  "QueryToExecute": "with function_logging_cloudtrails as (\n  select\n    distinct replace(replace(v::text,'\"',''),'/','') as lambda_arn,\n    d -\u003e\u003e 'Type' as type\n  from\n    aws_cloudtrail_trail,\n    jsonb_array_elements(event_selectors) e,\n    jsonb_array_elements(e -\u003e 'DataResources') as d,\n    jsonb_array_elements(d -\u003e 'Values') v\n  where\n    d -\u003e\u003e 'Type' = 'AWS::Lambda::Function'\n    and replace(replace(v::text,'\"',''),'/','') \u003c\u003e 'arn:aws:lambda'\n), function_logging_region as (\n    select\n      region as cloudtrail_region,\n      replace(replace(v::text,'\"',''),'/','') as lambda_arn\n    from\n      aws_cloudtrail_trail,\n      jsonb_array_elements(event_selectors) e,\n      jsonb_array_elements(e -\u003e 'DataResources') as d,\n      jsonb_array_elements(d -\u003e 'Values') v\n    where\n      d -\u003e\u003e 'Type' = 'AWS::Lambda::Function'\n      and replace(replace(v::text,'\"',''),'/','') = 'arn:aws:lambda'\n    group by\n      region,\n      lambda_arn\n),\nfunction_logging_region_advance_es as (\n  select\n    region as cloudtrail_region\n  from\n    aws_cloudtrail_trail,\n    jsonb_array_elements(advanced_event_selectors) a,\n    jsonb_array_elements(a -\u003e 'FieldSelectors') as f,\n    jsonb_array_elements_text(f -\u003e 'Equals') e\n  where\n    e = 'AWS::Lambda::Function'\n    and f -\u003e\u003e 'Field' != 'eventCategory'\n  group by\n    region\n)\nselect\n  distinct l.arn as resource,\n  case\n    when (l.arn = c.lambda_arn)\n      or (r.lambda_arn = 'arn:aws:lambda' and r.cloudtrail_region = l.region )\n      or a.cloudtrail_region = l.region then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when (l.arn = c.lambda_arn)\n      or (r.lambda_arn = 'arn:aws:s3' and r.cloudtrail_region = l.region )\n      or a.cloudtrail_region = l.region then l.name || ' logging enabled.'\n    else l.name || ' logging not enabled.'\n  end as reason\n  \n  , l.region, l.account_id\nfrom\n  aws_lambda_function as l\n  left join function_logging_cloudtrails as c on l.arn = c.lambda_arn\n  left join function_logging_region as r on r.cloudtrail_region = l.region\n  left join function_logging_region_advance_es as a on a.cloudtrail_region = l.region;\n",
  "Connector": "AWS",
  "PrimaryTable": "aws_lambda_function",
  "ListOfTables": [
    "aws_cloudtrail_trail",
    "aws_lambda_function"
  ]
}