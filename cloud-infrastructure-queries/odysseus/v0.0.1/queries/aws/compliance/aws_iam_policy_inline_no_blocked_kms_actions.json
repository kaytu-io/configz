{
  "ID": "aws_iam_policy_inline_no_blocked_kms_actions",
  "Engine": "odysseus-v0.0.1",
  "QueryToExecute": "with iam_resource_types as (\n  select\n    arn,\n    inline_policies_std,\n    name,\n    account_id,\n    region,\n    _ctx\n  from\n    aws_iam_user\n  union\n  select\n    arn,\n    inline_policies_std,\n    name,\n    account_id,\n    region,\n    _ctx\n  from\n    aws_iam_role\n  union\n  select\n    arn,\n    inline_policies_std,\n    name,\n    account_id,\n    region,\n    _ctx\n  from\n    aws_iam_group\n),\nkms_blocked_actions as (\n  select\n    arn,\n    count(*) as statements_num\n  from\n    iam_resource_types,\n    jsonb_array_elements(inline_policies_std) as policy_std,\n    jsonb_array_elements(policy_std -\u003e 'PolicyDocument' -\u003e 'Statement') as s,\n    jsonb_array_elements_text(s -\u003e 'Resource') as resource,\n    jsonb_array_elements_text(s -\u003e 'Action') as action\n  where\n    s -\u003e\u003e 'Effect' = 'Allow'\n    and action like any(array['kms:decrypt','kms:decrypt*', 'kms:reencryptfrom', 'kms:*', 'kms:reencrypt*'])\n  group by\n    arn\n)\nselect\n  u.arn as resource,\n  case\n    when w.arn is null then 'ok'\n    else 'alarm'\n  end status,\n  u.name || ' contains ' || coalesce(w.statements_num,0)  || ' inline policy statement(s) that allow blocked actions on AWS KMS keys.' as reason\n  , u.account_id\nfrom\n  iam_resource_types as u\n  left join kms_blocked_actions as w on u.arn = w.arn;\n",
  "Connector": "AWS",
  "ListOfTables": [
    "aws_iam_group",
    "aws_iam_role",
    "aws_iam_user"
  ]
}