{
  "ID": "aws_resource_policy_public_sql_eventbridge_bus_policy_prohibit_public_access",
  "Engine": "odysseus-v0.0.1",
  "QueryToExecute": "    with wildcard_action_policies as (\n      select\n        arn,\n        count(*) as statements_num\n      from\n        aws_eventbridge_bus,\n        jsonb_array_elements(policy_std -\u003e 'Statement') as s\n      where\n        s -\u003e\u003e 'Effect' = 'Allow'\n        -- aws:SourceOwner\n        and s -\u003e 'Condition' -\u003e 'StringEquals' -\u003e 'aws:sourceowner' is null\n        and s -\u003e 'Condition' -\u003e 'StringEqualsIgnoreCase' -\u003e 'aws:sourceowner' is null\n        and (\n          s -\u003e 'Condition' -\u003e 'StringLike' -\u003e 'aws:sourceowner' is null\n          or s -\u003e 'Condition' -\u003e 'StringLike' -\u003e 'aws:sourceowner' ? '*'\n        )\n        -- aws:SourceAccount\n        and s -\u003e 'Condition' -\u003e 'StringEquals' -\u003e 'aws:sourceaccount' is null\n        and s -\u003e 'Condition' -\u003e 'StringEqualsIgnoreCase' -\u003e 'aws:sourceaccount' is null\n        and (\n          s -\u003e 'Condition' -\u003e 'StringLike' -\u003e 'aws:sourceaccount' is null\n          or s -\u003e 'Condition' -\u003e 'StringLike' -\u003e 'aws:sourceaccount' ? '*'\n        )\n        -- aws:PrincipalOrgID\n        and s -\u003e 'Condition' -\u003e 'StringEquals' -\u003e 'aws:principalorgid' is null\n        and s -\u003e 'Condition' -\u003e 'StringEqualsIgnoreCase' -\u003e 'aws:principalorgid' is null\n        and (\n          s -\u003e 'Condition' -\u003e 'StringLike' -\u003e 'aws:principalorgid' is null\n          or s -\u003e 'Condition' -\u003e 'StringLike' -\u003e 'aws:principalorgid' ? '*'\n        )\n        -- aws:PrincipalAccount\n        and s -\u003e 'Condition' -\u003e 'StringEquals' -\u003e 'aws:principalaccount' is null\n        and s -\u003e 'Condition' -\u003e 'StringEqualsIgnoreCase' -\u003e 'aws:principalaccount' is null\n        and (\n          s -\u003e 'Condition' -\u003e 'StringLike' -\u003e 'aws:principalaccount' is null\n          or s -\u003e 'Condition' -\u003e 'StringLike' -\u003e 'aws:principalaccount' ? '*'\n        )\n        -- aws:PrincipalArn\n        and s -\u003e 'Condition' -\u003e 'StringEquals' -\u003e 'aws:principalarn' is null\n        and s -\u003e 'Condition' -\u003e 'StringEqualsIgnoreCase' -\u003e 'aws:principalarn' is null\n        and (\n          s -\u003e 'Condition' -\u003e 'StringLike' -\u003e 'aws:principalarn' is null\n          or s -\u003e 'Condition' -\u003e 'StringLike' -\u003e 'aws:principalarn' ? '*'\n        )\n        and (\n          s -\u003e 'Condition' -\u003e 'ArnEquals' -\u003e 'aws:principalarn' is null\n          or s -\u003e 'Condition' -\u003e 'ArnEquals' -\u003e 'aws:principalarn' ? '*'\n        )\n        and (\n          s -\u003e 'Condition' -\u003e 'ArnLike' -\u003e 'aws:principalarn' is null\n          or s -\u003e 'Condition' -\u003e 'ArnLike' -\u003e 'aws:principalarn' ? '*'\n        )\n        -- aws:SourceArn\n        and s -\u003e 'Condition' -\u003e 'StringEquals' -\u003e 'aws:sourcearn' is null\n        and s -\u003e 'Condition' -\u003e 'StringEqualsIgnoreCase' -\u003e 'aws:sourcearn' is null\n        and (\n          s -\u003e 'Condition' -\u003e 'StringLike' -\u003e 'aws:sourcearn' is null\n          or s -\u003e 'Condition' -\u003e 'StringLike' -\u003e 'aws:sourcearn' ? '*'\n        )\n        and (\n          s -\u003e 'Condition' -\u003e 'ArnEquals' -\u003e 'aws:sourcearn' is null\n          or s -\u003e 'Condition' -\u003e 'ArnEquals' -\u003e 'aws:sourcearn' ? '*'\n        )\n        and (\n          s -\u003e 'Condition' -\u003e 'ArnLike' -\u003e 'aws:sourcearn' is null\n          or s -\u003e 'Condition' -\u003e 'ArnLike' -\u003e 'aws:sourcearn' ? '*'\n        )\n        and (\n          s -\u003e 'Principal' -\u003e 'AWS' = '[\"*\"]'\n          or s -\u003e\u003e 'Principal' = '*'\n        )\n      group by\n        arn\n    )\n    select\n      r.arn as resource,\n      case\n        when r.policy is null then 'info'\n        when p.arn is null then 'ok'\n        else 'alarm'\n      end as status,\n      case\n        when r.policy is null then title || ' does not have a defined policy or has insufficient access to the policy.'\n        when p.arn is null then title || ' policy does not allow public access.'\n        else title || ' policy contains ' || coalesce(p.statements_num, 0) ||\n        ' statement(s) that allow public access.'\n      end as reason\n      \n      , region, account_id\n    from\n      aws_eventbridge_bus as r\n      left join wildcard_action_policies as p on p.arn = r.arn\n",
  "Connector": "AWS",
  "PrimaryTable": "aws_eventbridge_bus",
  "ListOfTables": [
    "aws_eventbridge_bus"
  ]
}