{
  "ID": "aws_secretsmanager_secret_rotated_as_scheduled",
  "Engine": "odysseus-v0.0.1",
  "QueryToExecute": "select\n  arn as resource,\n  case\n    when primary_region is not null and region != primary_region then 'skip' -- Replica secret\n    when rotation_rules is null then 'alarm' -- Rotation not enabled\n    when last_rotated_date is null\n      and (date(current_date) - date(created_date)) \u003c= (rotation_rules -\u003e 'AutomaticallyAfterDays')::integer then 'ok' -- New secret not due for rotation yet\n    when last_rotated_date is null\n      and (date(current_date) - date(created_date)) \u003e (rotation_rules -\u003e 'AutomaticallyAfterDays')::integer then 'alarm' -- New secret overdue for rotation\n    when last_rotated_date is not null\n    and (date(current_date) - date(last_rotated_date)) \u003e (rotation_rules -\u003e 'AutomaticallyAfterDays')::integer then 'alarm' -- Secret has been rotated before but is overdue for another rotation\n  end as status,\n  case\n    when primary_region is not null and region != primary_region then title || ' is a replica.'\n    when rotation_rules is null then title || ' rotation not enabled.'\n    when last_rotated_date is null\n      and (date(current_date) - date(created_date)) \u003c= (rotation_rules -\u003e 'AutomaticallyAfterDays')::integer then title || ' scheduled for rotation.'\n    when last_rotated_date is null\n    and (date(current_date) - date(created_date)) \u003e (rotation_rules -\u003e 'AutomaticallyAfterDays')::integer then title || ' not rotated as per schedule.'\n    when last_rotated_date is not null\n      and (date(current_date) - date(last_rotated_date)) \u003e (rotation_rules -\u003e 'AutomaticallyAfterDays')::integer then title || ' not rotated as per schedule.'\n  end as reason\n  \n  , region, account_id\nfrom\n  aws_secretsmanager_secret;\n",
  "Connector": "AWS",
  "PrimaryTable": "aws_secretsmanager_secret",
  "ListOfTables": [
    "aws_secretsmanager_secret"
  ]
}