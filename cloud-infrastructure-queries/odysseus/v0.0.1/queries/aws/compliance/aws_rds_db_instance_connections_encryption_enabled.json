{
  "ID": "aws_rds_db_instance_connections_encryption_enabled",
  "Engine": "odysseus-v0.0.1",
  "QueryToExecute": "with instance_pg as (\n  select\n    g -\u003e\u003e 'DBParameterGroupName' as pg_name,\n    i.engine,\n    i.title,\n    i.arn,\n    i.tags,\n    i.region,\n    i.account_id,\n    i._ctx\n  from\n    aws_rds_db_instance as i,\n    jsonb_array_elements(db_parameter_groups) as g\n), pg_with_ssl_enabled as (\n  select\n    g.name\n  from\n    instance_pg as i,\n    aws_rds_db_parameter_group as g,\n    jsonb_array_elements(parameters) as p\n  where\n    i.pg_name = g.name\n    and g.account_id = i.account_id\n    and g.region = i.region\n    and p -\u003e\u003e 'ParameterName' = 'rds.force_ssl'\n    and p -\u003e\u003e 'ParameterValue' = '1'\n)\nselect\n  i.arn as resource,\n  i.engine,\n  case\n    when i.engine not in ('sqlserver', 'postgres') then 'skip'\n    when p.name is not null then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when i.engine not in ('sqlserver', 'postgres') then title || ' has ' || engine || ' engine type.'\n    when p.name is not null then title || ' connections are SSL encrypted.'\n    else title || ' connections are not SSL encrypted.'\n  end as reason\n  \n  , region, account_id\nfrom\n  instance_pg as i\n  left join pg_with_ssl_enabled as p on p.name = i.pg_name\n",
  "Connector": "AWS",
  "PrimaryTable": "aws_rds_db_instance",
  "ListOfTables": [
    "aws_rds_db_instance",
    "aws_rds_db_parameter_group"
  ]
}