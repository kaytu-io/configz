{
  "ID": "aws_expected_tag_values_sql_elasticsearch_domain_expected_tag_values",
  "Engine": "odysseus-v0.0.1",
  "QueryToExecute": "with raw_data as\n(\n  select\n    arn,\n    title,\n    tags,\n    row_to_json(json_each($1)) as expected_tag_values,\n    region,\n    account_id,\n    _ctx\n  from\n    aws_elasticsearch_domain\n  where\n    tags is not null\n    or tags::text != '{}'\n),\nexploded_expected_tag_values as\n(\n  select\n    arn,\n    title,\n    expected_tag_values -\u003e\u003e 'key' as tag_key,\n    jsonb_array_elements_text((expected_tag_values -\u003e\u003e 'value')::jsonb) as expected_values,\n    tags -\u003e\u003e (expected_tag_values -\u003e\u003e 'key') as current_value,\n    region,\n    account_id,\n    _ctx\n  from\n    raw_data\n),\nanalysis as\n(\n  select\n    arn,\n    title,\n    current_value like expected_values as has_appropriate_value,\n    case\n      when current_value is null then true\n      else false\n    end as has_no_matching_tags,\n    tag_key,\n    current_value,\n    region,\n    account_id,\n    _ctx\n  from\n    exploded_expected_tag_values\n),\nstatus_by_tag as\n(\n  select\n    arn,\n    title,\n    bool_or(has_appropriate_value) as status,\n    tag_key,\n    case\n      when bool_or(has_appropriate_value) then ''\n      else tag_key\n    end as reason,\n    bool_or(has_no_matching_tags) as can_skip,\n    current_value,\n    region,\n    account_id,\n    _ctx\n  from\n    analysis\n  group by\n    arn,\n    title,\n    tag_key,\n    current_value,\n    region,\n    account_id,\n    _ctx\n)\nselect\n  arn as resource,\n  case\n    when bool_and(can_skip) then 'skip'\n    when bool_and(status) then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when bool_and(can_skip) then title || ' has no matching tag keys.'\n    when bool_and(status) then title || ' has expected tag values for tags: ' || array_to_string(array_agg(tag_key) filter(where status), ', ') || '.'\n    else title || ' has unexpected tag values for tags: ' || array_to_string(array_agg(tag_key) filter(where not status), ', ') || '.'\n  end as reason\n  \n  , region, account_id\nfrom\n  status_by_tag\ngroup by\n  arn,\n  title,\n  region,\n  account_id,\n  _ctx\nunion all\nselect\n  arn as resource,\n  'skip' as status,\n  title || ' has no tags.' as reason\n  \n  , region, account_id\nfrom\n  aws_elasticsearch_domain\nwhere\n  tags is null\n  or tags = '{}'\nunion all\nselect\n  arn as resource,\n  'skip' as status,\n  title || ' has tags but no expected tag values are set.' as reason\n  \n  , region, account_id\nfrom\n  aws_elasticsearch_domain\nwhere\n  $1::text = '{}'\n  and tags is not null\n  or tags::text != '{}';\n",
  "Connector": "AWS",
  "PrimaryTable": "aws_elasticsearch_domain",
  "ListOfTables": [
    "aws_elasticsearch_domain"
  ]
}