{
  "ID": "aws_common_dimensions_qualifier_sql",
  "Engine": "odysseus-v0.0.1",
  "QueryToExecute": "  with\n  base_month as (\n    select\n      dimension_1 as service_name,\n      replace(lower(trim(dimension_1)), ' ', '-') as service,\n      partition,\n      account_id,\n      _ctx,\n      net_unblended_cost_unit as unit,\n      sum(net_unblended_cost_amount) as cost,\n      region\n    from\n      aws_cost_usage\n    where\n      granularity = 'MONTHLY'\n      and dimension_type_1 = 'SERVICE'\n      and dimension_type_2 = 'RECORD_TYPE'\n      and dimension_2 not in ('Credit')\n      and period_start \u003e= date_trunc('month', current_date - interval '2' month)\n      and period_start \u003c date_trunc('month', current_date - interval '1' month)\n    group by\n      1,2,3,4,5,unit,region\n  ),\n  prev_month as (\n    select\n      dimension_1 as service_name,\n      replace(lower(trim(dimension_1)), ' ', '-') as service,\n      partition,\n      account_id,\n      _ctx,\n      net_unblended_cost_unit as unit,\n      sum(net_unblended_cost_amount) as cost,\n      region\n    from\n      aws_cost_usage\n    where\n      granularity = 'MONTHLY'\n      and dimension_type_1 = 'SERVICE'\n      and dimension_type_2 = 'RECORD_TYPE'\n      and dimension_2 not in ('Credit')\n      and period_start \u003e= date_trunc('month', current_date - interval '1' month)\n      and period_start \u003c date_trunc('month', current_date )\n    group by\n      1,2,3,4,5,unit,region\n  )\nselect\n  case\n    when prev_month.service_name is null then 'arn:' || base_month.partition || ':::' || base_month.account_id || ':cost/' || base_month.service\n    else 'arn:' || prev_month.partition || ':::' || prev_month.account_id || ':cost/' || prev_month.service\n  end as resource,\n  case\n    when base_month.cost is null then 'info'\n    when prev_month.cost is null then 'ok'\n    -- adjust this value to change threshold for the alarm\n    when (prev_month.cost - base_month.cost) \u003e $1 then 'alarm'\n    else 'ok'\n  end as status,\n  case\n    when base_month.cost is null then prev_month.service_name || ' usage is new this month with a spend of ' || round(cast(prev_month.cost as numeric), 2) || ' ' || prev_month.unit\n    when prev_month.cost is null then 'No usage billing for ' || base_month.service_name || ' in current month.'\n    when abs(prev_month.cost - base_month.cost) \u003c 0.01 then prev_month.service_name || ' has remained flat.'\n    when prev_month.cost \u003e base_month.cost then prev_month.service_name || ' usage has increased by ' || round(cast((prev_month.cost - base_month.cost) as numeric), 2)  || ' ' || prev_month.unit\n    else prev_month.service_name || ' usage has decreased (' || round(cast((base_month.cost - prev_month.cost) as numeric), 2) || ') ' || prev_month.unit\n  end as reason\n  , prev_month.region, prev_month.account_id\nfrom\n  base_month\n  full outer join prev_month on base_month.service_name = prev_month.service_name\nwhere\n  prev_month.cost != base_month.cost\norder by\n  (prev_month.cost - base_month.cost) desc;\n",
  "Connector": "AWS",
  "PrimaryTable": "aws_cost_usage",
  "ListOfTables": [
    "aws_cost_usage"
  ]
}