{
  "ID": "aws_iam_policy_custom_no_permissive_role_assumption",
  "Engine": "odysseus-v0.0.1",
  "QueryToExecute": "with bad_policies as (\n  select\n    arn,\n    count(*) as num\n  from\n    aws_iam_policy,\n    jsonb_array_elements(policy_std -\u003e 'Statement') as s,\n    jsonb_array_elements_text(s -\u003e 'Resource') as resource,\n    jsonb_array_elements_text(s -\u003e 'Action') as action\n  where\n    not is_aws_managed\n    and s -\u003e\u003e 'Effect' = 'Allow'\n    and resource = '*'\n    and (\n      ( action = '*'\n        or action = 'sts:*'\n        or action = 'sts:AssumeRole'\n      )\n    )\n  group by\n    arn\n)\nselect\n  p.arn as resource,\n  case\n    when b.arn is not null then 'alarm'\n    else 'ok'\n  end as status,\n  p.name || ' contains ' || coalesce(b.num, 0) ||\n      ' statements that allow overly permissive STS role assumption.' as reason\n  \n  , p.region, p.account_id\nfrom\n  aws_iam_policy as p\n  left join bad_policies as b on p.arn = b.arn\nwhere\n    not is_aws_managed;\n",
  "Connector": "AWS",
  "PrimaryTable": "aws_iam_policy",
  "ListOfTables": [
    "aws_iam_policy"
  ]
}