{
  "ID": "aws_tag_dimensions_sql.common_dimensions_qualifier_sql_ebs_snapshot_shared_with_trusted_accounts",
  "Engine": "odysseus-v0.0.1",
  "QueryToExecute": "with list_of_snashpot_shared_accounts as (\n  select\n    jsonb_agg((p -\u003e 'UserId')) as list,\n    arn\n  from\n    aws_ebs_snapshot,\n    jsonb_array_elements(create_volume_permissions) as p\n  group by arn\n), shared_ebs_snapshot as (\n  select\n    arn,\n    list,\n    list::jsonb - ($1)::text[] as untrusted_accounts\n  from\n    list_of_snashpot_shared_accounts\n)\nselect\n  s.arn as resource,\n  case\n    when jsonb_array_length(untrusted_accounts) \u003e 0 then 'info'\n    else 'ok'\n  end status,\n  case\n    when s.create_volume_permissions @\u003e '[{\"Group\": \"all\"}]'\n    then s.title || ' publicly restorable.'\n    when jsonb_array_length(untrusted_accounts) \u003e 0 and untrusted_accounts #\u003e\u003e '{0}' != 'all'\n    then s.title || ' shared with ' ||\n  case\n    when jsonb_array_length(untrusted_accounts) \u003e 2\n    then concat('untrusted accounts ', untrusted_accounts #\u003e\u003e '{0}', ', ', untrusted_accounts #\u003e\u003e '{1}', ' and ' || (jsonb_array_length(untrusted_accounts) - 2)::text || ' more.' )\n    when jsonb_array_length(untrusted_accounts) = 2\n    then concat('untrusted accounts ', untrusted_accounts #\u003e\u003e '{0}', ' and ', untrusted_accounts #\u003e\u003e '{1}' , '.')\n    else concat('untrusted account ', untrusted_accounts #\u003e\u003e '{0}', '.')\n  end\n    else\n      case when list is null then s.title || ' is not shared.'\n      else s.title || ' shared with trusted account(s).' end\n  end reason\n  \n  , s.region, s.account_id\nfrom\n  aws_ebs_snapshot as s left join shared_ebs_snapshot as ss on s.arn = ss.arn ;\n",
  "Connector": "AWS",
  "PrimaryTable": "aws_ebs_snapshot",
  "ListOfTables": [
    "aws_ebs_snapshot"
  ]
}