{
  "ID": "aws_elasticache_replication_group_redis_auth_enabled",
  "Engine": "odysseus-v0.0.1",
  "QueryToExecute": "with elasticache_cluster_node_version as (\n  select\n    distinct replication_group_id,\n    engine_version\n  from\n    aws_elasticache_cluster\n)\nselect\n  arn as resource,\n  case\n    when regexp_split_to_array(v.engine_version, '\\.')::int[] \u003e= regexp_split_to_array('6.0', '\\.')::int[] then 'skip'\n    when regexp_split_to_array(v.engine_version, '\\.')::int[] \u003c regexp_split_to_array('6.0', '\\.')::int[] and eg.auth_token_enabled then 'ok'\n    else 'alarm'\n  end as status,\n  case\n    when regexp_split_to_array(v.engine_version, '\\.')::int[] \u003e= regexp_split_to_array('6.0', '\\.')::int[] then eg.title || ' node version is ' || engine_version || '.'\n    when regexp_split_to_array(v.engine_version, '\\.')::int[] \u003c regexp_split_to_array('6.0', '\\.')::int[] and eg.auth_token_enabled then eg.title || ' has Redis AUTH enabled.'\n    else eg.title || ' has Redis AUTH disabled.'\n  end as reason\n  , eg.region, eg.account_id\nfrom\n  aws_elasticache_replication_group as eg\n  left join elasticache_cluster_node_version as v on eg.replication_group_id = v.replication_group_id;\n",
  "Connector": "AWS",
  "PrimaryTable": "aws_elasticache_replication_group",
  "ListOfTables": [
    "aws_elasticache_cluster",
    "aws_elasticache_replication_group"
  ]
}